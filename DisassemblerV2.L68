00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.02
Created On: 6/5/2015 11:14:01 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      :  Disassembler
00000000                             3  * Written by :  Paul Kessler and Joscelyn Kim
00000000                             4  * Date       :  199X
00000000                             5  * Description:  This program takes assembled code and disassembles it into 
00000000                             6  *               assembly language readable by humans.  The program will be 
00000000                             7  *               disassembed in a user defined address range
00000000                             8  *-----------------------------------------------------------
00000000  =0000000D                  9  CR          EQU $0D
00000000  =0000000A                 10  LF          EQU $0A
00000000                            11  
00000000  =0000000F                 12  mask        EQU $0000000F
00000000  =000000FF                 13  ascii_mask  EQU $00FF
00000000  =00000000                 14  counter     EQU 0
00000000  =0000B000                 15  stack       EQU $B000
00000000  =0000001E                 16  line_count  EQU 30
00000000                            17  
00000000                            18  *---- User input address range -----
00000000                            19  
00001000                            20                  ORG         $1000                       * start of the program
00001000  4FF9 0000B000             21                  LEA         stack,SP                    * initialize the stack
00001006  4200                      22                  CLR.B       D0                          * clear D0
00001008  43F9 000010F4             23                  LEA         start_addr_msg, A1          * ask for starting address
0000100E  103C 000E                 24                  MOVE.B      #14, D0
00001012  4E4F                      25                  TRAP        #15                         
00001014  103C 0002                 26                  MOVE.B      #2, D0                      * take in user input as string
00001018  4E4F                      27                  TRAP        #15
0000101A  48A7 FFFE                 28                  MOVEM.W     A0-A6/D0-D7,-(SP)           * push registers on the stack
0000101E  4EB9 0000108C             29                  JSR         get_addr                    * strip ascii characters to hex
00001024  4C9F 7FFF                 30                  MOVEM.W     (SP)+, A0-A6/D0-D7          * restore registers
00001028  23F9 00001150 00001154    31                  MOVE.L      addr_val_temp,st_val
00001032                            32                  
00001032  43F9 0000111F             33                  LEA         end_addr_msg, A1            * ask for ending address
00001038  103C 000E                 34                  MOVE.B      #14, D0
0000103C  4E4F                      35                  TRAP        #15
0000103E  224C                      36                  MOVEA.L     A4,A1                       * reset address at A1 to get user input
00001040  103C 0002                 37                  MOVE.B      #2, D0                      * take address as a string
00001044  4E4F                      38                  TRAP        #15
00001046  48A7 FFFE                 39                  MOVEM.W     A0-A6/D0-D7,-(SP)           * push registers on the stack
0000104A  4EB9 0000108C             40                  JSR         get_addr                    * strip ascii address into hex
00001050  4C9F 7FFF                 41                  MOVEM.W     (SP)+, A0-A6/D0-D7          * restore the registers
00001054  23F9 00001150 00001158    42                  MOVE.L      addr_val_temp, end_val      * store address in end_val
0000105E  2A79 00001154             43                  MOVEA.L     st_val,A5                   * store start val in A5
00001064  2C79 00001158             44                  MOVEA.L     end_val,A6                  * store end val in A6
0000106A                            45                  
0000106A  43F9 00001EDD             46                  LEA         outputStart,A1              *ouput starting messaage
00001070  103C 000E                 47                  MOVE.B      #14,D0          
00001074  4E4F                      48                  TRAP        #15
00001076                            49                  
00001076  43F9 00001ED2             50                  LEA         outputNextLine,A1           *output nextline
0000107C  103C 000E                 51                  MOVE.B      #14,D0
00001080  4E4F                      52                  TRAP        #15
00001082                            53                  
00001082  16BC 001E                 54                  MOVE.B      #line_count,(A3)
00001086  5513                      55                  SUBQ.B      #2,(A3)
00001088  6000 00D2                 56                  BRA         getOpCode                   * Jump to getOpCode sub routine
0000108C                            57  
0000108C                            58                  
0000108C                            59  
0000108C                            60  get_addr 
0000108C  5301                      61                  SUBQ.B      #1,D1
0000108E  4287                      62                  CLR.L       D7                          * we need D7 to be 0
00001090  1019                      63                  MOVE.B      (A1)+,D0                    * store first byte in D0
00001092  0280 000000FF             64                  ANDI.L      #ascii_mask,D0              * mask the first byte
00001098  4EB9 000010CE             65                  JSR         strip_ascii                 * strip ascii char into hex
0000109E  C3FC 0004                 66                  MULS.W      #4,D1
000010A2  E3A0                      67                  ASL.L       D1,D0                       * shift left 8
000010A4  8E80                      68                  OR.L        D0,D7
000010A6  1019                      69                  MOVE.B      (A1)+,D0                    * move next byte into D0
000010A8  5901                      70  loop            SUBQ.B      #4,D1
000010AA  0280 000000FF             71                  ANDI.L      #ascii_mask,D0              * mask the second byte
000010B0  4EB9 000010CE             72                  JSR         strip_ascii                 * strip ascii to hex
000010B6  E3A0                      73                  ASL.L       D1,D0                       * shift left 8
000010B8  8E80                      74                  OR.L        D0,D7
000010BA  B23C 0000                 75                  CMP.B       #0,D1
000010BE  6700 0006                 76                  BEQ         rts_strtAddr
000010C2  1019                      77                  MOVE.B      (A1)+,D0
000010C4  60E2                      78                  BRA         loop
000010C6                            79                  
000010C6                            80  rts_strtAddr
000010C6  23C7 00001150             81                  MOVE.L      D7,addr_val_temp
000010CC  4E75                      82                  RTS     
000010CE                            83                  
000010CE  B03C 0039                 84  strip_ascii     CMP.B       #$39,D0                     *Is it in range of 0-9?
000010D2  6F00 001A                 85                  BLE         sub30                       *It's a number
000010D6  B03C 0046                 86                  CMP.B       #$46,D0                     *Is it A...F?
000010DA  6F00 000A                 87                  BLE         sub37                       *It's A...F
000010DE  0400 0057                 88                  SUB.B       #$57,D0                     *It's a...f
000010E2  6000 000E                 89                  BRA         ret_sa                      *Go back
000010E6  0400 0037                 90  sub37           SUB.B       #$37,D0                     *Strip 37
000010EA  6000 0006                 91                  BRA         ret_sa                      *Go back
000010EE  0400 0030                 92  sub30           SUB.B       #$30,D0                     *Strip 30
000010F2  4E75                      93  ret_sa          RTS                                     *Go back
000010F4                            94  
000010F4                            95                  
000010F4                            96  *---- Data ----
000010F4                            97  
000010F4= 45 6E 74 65 72 20 ...     98  start_addr_msg  DC.B    'Enter a starting address to disassemble: $', 0
0000111F= 45 6E 74 65 72 20 ...     99  end_addr_msg    DC.B    'Enter a ending address to stop disassembling: $', 0
00001150= 00000000                 100  addr_val_temp   DC.L    $00000000
00001154= 00000000                 101  st_val          DC.L    $00000000
00001158= 00000000                 102  end_val         DC.L    $00000000
0000115C                           103  
0000115C                           104  *--- Data end ----
0000115C                           105  
0000115C                           106  
0000115C                           107  * Disassembler Start
0000115C                           108  getOpCode                        *Gets opcode
0000115C                           109      *LEA     code,A0             *Loads "code" which is the op code
0000115C                           110      
0000115C  4287                     111      CLR.L   D7
0000115E  4286                     112      CLR.L   D6
00001160  4283                     113      CLR.L   D3
00001162  4281                     114      CLR.L   D1
00001164  4280                     115      CLR.L   D0
00001166  4285                     116      CLR.L   D5
00001168  4284                     117      CLR.L   D4
0000116A                           118      
0000116A  5313                     119      SUBQ.B  #1,(A3)
0000116C  0C13 0000                120      CMP.B   #0,(A3)
00001170  6700 0C4A                121      BEQ     pageContinue
00001174                           122      
00001174  320D                     123      MOVE.W  A5,D1               *move starting addr into D1
00001176  103C 000F                124      MOVE.B  #15,D0              *convert number into hex and output to console
0000117A  143C 0010                125      MOVE.B  #16,D2
0000117E  4E4F                     126      TRAP    #15    
00001180  381D                     127      MOVE.W  (A5)+,D4            *move data at starting addr to D4
00001182                           128      
00001182  4281                     129      CLR.L   D1
00001184                           130      
00001184  43F9 00001ED8            131      LEA     outputColon,A1      *output the colon and a space to the console
0000118A  103C 000E                132      MOVE.B  #14,D0
0000118E  4E4F                     133      TRAP    #15
00001190                           134      
00001190  2248                     135      MOVEA.L A0,A1               *used to clear A0
00001192  3404                     136      MOVE.W  D4,D2               *gets put into D4 and D2
00001194                           137      
00001194  E95A                     138      ROL.W   #4,D2               *rotate the first 4 significant bits to lower 4 bits
00001196                           139      
00001196  C4BC 0000000F            140      AND.L   #mask,D2            *mask it to get only the first byte
0000119C                           141      
0000119C  1A02                     142      MOVE.B  D2,D5               *put that value into D5
0000119E                           143  
0000119E                           144  nopOpCode
0000119E  B87C 4E71                145      CMP.W   #$4E71,D4
000011A2  6600 0012                146      BNE     rtsOpCode
000011A6                           147      
000011A6  43F9 00001E4A            148      LEA     outputNOP,A1
000011AC  103C 000E                149      MOVE.B  #14,D0
000011B0  4E4F                     150      TRAP    #15
000011B2  6000 0C22                151      BRA     DONE
000011B6                           152      
000011B6                           153  rtsOpCode
000011B6  B87C 4E75                154      CMP.W   #$4E75,D4
000011BA  6600 0012                155      BNE     jsrOpCode
000011BE                           156      
000011BE  43F9 00001E54            157      LEA     outputRTS,A1
000011C4  103C 000E                158      MOVE.B  #14,D0
000011C8  4E4F                     159      TRAP    #15
000011CA                           160      
000011CA  6000 0C0A                161      BRA     DONE
000011CE                           162      
000011CE                           163  jsrOpCode
000011CE  3604                     164      MOVE.W  D4,D3
000011D0  E15B                     165      ROL.W   #8,D3
000011D2  C67C 00FF                166      AND.W   #$00FF,D3
000011D6  B63C 004E                167      CMP.B   #$4E,D3
000011DA  6600 0046                168      BNE     movemOpCode
000011DE                           169      
000011DE                           170  jsrMethod
000011DE  3604                     171      MOVE.W  D4,D3
000011E0  E75B                     172      ROL.W   #3,D3
000011E2  C63C 0007                173      AND.B   #7,D3
000011E6  B63C 0002                174      CMP.B   #2,D3
000011EA  6700 000E                175      BEQ     jsrOutputDeref
000011EE                           176      
000011EE  B63C 0007                177      CMP.B   #7,D3
000011F2  6700 001C                178      BEQ     jsrOutputLabel
000011F6                           179      
000011F6  6000 0C66                180      BRA     outputData
000011FA                           181          
000011FA                           182  jsrOutputDeref
000011FA  43F9 00001E4F            183      LEA     outputJSR,A1
00001200  103C 000E                184      MOVE.B  #14,D0
00001204  4E4F                     185      TRAP    #15
00001206                           186      
00001206  4EB9 00001CA8            187      JSR     sourceEA
0000120C                           188      
0000120C  6000 0BC8                189      BRA     DONE
00001210                           190      
00001210                           191  jsrOutputLabel
00001210  B63C 0001                192      CMP.B   #1,D3
00001214  6E00 098C                193      BGT     dataOpCode
00001218  4EB9 00001CA8            194      JSR     sourceEA
0000121E                           195      
0000121E  6000 0BB6                196      BRA     DONE
00001222                           197      
00001222                           198  movemOpCode
00001222  3604                     199      MOVE.W  D4,D3
00001224  EC43                     200      ASR.W   #6,D3
00001226  B67C 0122                201      CMP.W   #$0122,D3
0000122A  6700 001E                202      BEQ     movemWMethodRegToMem
0000122E  B67C 0132                203      CMP.W   #$0132,D3
00001232  6700 003E                204      BEQ     movemWMEthodMemToReg
00001236  B67C 0123                205      CMP.W   #$0123,D3
0000123A  6700 00E0                206      BEQ     movemLMethodRegToMem
0000123E  B67C 0133                207      CMP.W   #$0133,D3
00001242  6700 0100                208      BEQ     movemLMethodMemToReg
00001246  6000 0124                209      BRA     leaOpCode
0000124A                           210      
0000124A                           211  movemWMethodRegToMem
0000124A  1A3C 0000                212      MOVE.B  #0,D5                       *Register to memory baby!
0000124E  3604                     213      MOVE.W  D4,D3
00001250  E61B                     214      ROR.B   #3,D3
00001252  C67C 0007                215      AND.W   #$0007,D3
00001256  B63C 0002                216      CMP.B   #2,D3
0000125A  6700 003E                217      BEQ     movemWOutput
0000125E  B63C 0004                218      CMP.B   #4,D3
00001262  6700 0036                219      BEQ     movemWOutput
00001266  B63C 0007                220      CMP.B   #7,D3
0000126A  6700 002E                221      BEQ     movemWOutput
0000126E  6000 0932                222      BRA     dataOpCode
00001272                           223          
00001272                           224  movemWMethodMemToReg
00001272  1A3C 0001                225      MOVE.B  #1,D5                       *Memory to Register baby!
00001276  3604                     226      MOVE.W  D4,D3
00001278  E61B                     227      ROR.B   #3,D3
0000127A  C67C 0007                228      AND.W   #$0007,D3
0000127E  B63C 0002                229      CMP.B   #2,D3
00001282  6700 0016                230      BEQ     movemWOutput
00001286  B63C 0004                231      CMP.B   #4,D3
0000128A  6700 000E                232      BEQ     movemWOutput
0000128E  B63C 0007                233      CMP.B   #7,D3
00001292  6700 0006                234      BEQ     movemWOutput
00001296  6000 090A                235      BRA     dataOpCode
0000129A                           236      
0000129A                           237  movemWOutput
0000129A                           238  
0000129A  3604                     239      MOVE.W  D4,D3
0000129C  BA3C 0001                240      CMP.B   #1,D5
000012A0  67F8                     241      BEQ     movemWOutput
000012A2                           242      
000012A2  E643                     243      ASR.W   #3,D3
000012A4  C67C 0007                244      AND.W   #$0007,D3
000012A8  B63C 0002                245      CMP.B   #2,D3
000012AC  6700 0024                246      BEQ     getAnMode
000012B0  B63C 0004                247      CMP.B   #4,D3
000012B4  6700 001C                248      BEQ     getAnMode
000012B8  B63C 0007                249      CMP.B   #7,D3
000012BC  6600 08E4                250      BNE     dataOpCode
000012C0  1604                     251      MOVE.B  D4,D3
000012C2  C63C 0007                252      AND.B   #$07,D3
000012C6  B63C 0001                253      CMP.B   #1,D3
000012CA  6E00 08D6                254      BGT     dataOpCode
000012CE  6000 0002                255      BRA     getAnMode
000012D2                           256      
000012D2                           257  getAnMode
000012D2  1403                     258      MOVE.B  D3,D2
000012D4                           259      
000012D4                           260  movemWEA
000012D4  361D                     261      MOVE.W  (A5)+,D3
000012D6                           262  
000012D6  43F9 00001E2A            263      LEA     outputMOVEMW,A1
000012DC  103C 000E                264      MOVE.B  #14,D0
000012E0  4E4F                     265      TRAP    #15
000012E2                           266      
000012E2  B67C FFFF                267      CMP.W   #$FFFF,D3
000012E6  6700 0002                268      BEQ     outputReg
000012EA                           269    
000012EA                           270  outputReg
000012EA  43F9 00001E94            271      LEA     outputRegList,A1
000012F0  103C 000E                272      MOVE.B  #14,D0
000012F4  4E4F                     273      TRAP    #15
000012F6                           274      
000012F6  43F9 00001ECE            275      LEA     outputComma,A1
000012FC  103C 000E                276      MOVE.B  #14,D0
00001300  4E4F                     277      TRAP    #15
00001302                           278      
00001302  B43C 0004                279      CMP.B   #4,D2
00001306  6F00 0006                280      BLE     AnModeSub
0000130A  6000 000C                281      BRA     xxxModeSub
0000130E                           282      
0000130E                           283      
0000130E                           284  AnModeSub    
0000130E  4EB9 00001CA8            285      JSR     sourceEA
00001314  6000 0AC0                286      BRA     DONE
00001318                           287      
00001318                           288  xxxModeSub
00001318                           289      *JSR     xxxW
00001318  6000 0ABC                290      BRA     DONE    
0000131C                           291      
0000131C                           292  moveMOutputMemToReg
0000131C                           293      
0000131C                           294  movemLMethodRegToMem
0000131C  1A3C 0000                295      MOVE.B  #0,D5                       *Register to memory baby!
00001320  3604                     296      MOVE.W  D4,D3
00001322  E61B                     297      ROR.B   #3,D3
00001324  C67C 0007                298      AND.W   #$0007,D3
00001328  B63C 0002                299      CMP.B   #2,D3
0000132C  6700 003E                300      BEQ     movemLOutput
00001330  B63C 0004                301      CMP.B   #4,D3
00001334  6700 0036                302      BEQ     movemLOutput
00001338  B63C 0007                303      CMP.B   #7,D3
0000133C  6700 002E                304      BEQ     movemLOutput
00001340  6000 0860                305      BRA     dataOpCode
00001344                           306  
00001344                           307  movemLMethodMemToReg
00001344  1A3C 0001                308      MOVE.B  #1,D5                       *Memory to Register baby!
00001348  3604                     309      MOVE.W  D4,D3
0000134A  E61B                     310      ROR.B   #3,D3
0000134C  C67C 0007                311      AND.W   #$0007,D3
00001350  B63C 0002                312      CMP.B   #2,D3
00001354  6700 0016                313      BEQ     movemLOutput
00001358  B63C 0004                314      CMP.B   #4,D3
0000135C  6700 000E                315      BEQ     movemLOutput
00001360  B63C 0007                316      CMP.B   #7,D3
00001364  6700 0006                317      BEQ     movemLOutput
00001368  6000 0838                318      BRA     dataOpCode
0000136C                           319      
0000136C                           320  movemLOutput
0000136C                           321      
0000136C                           322  leaOpCode
0000136C  BA3C 0004                323      CMP.B   #4,D5
00001370  6600 0062                324      BNE     oriOpCode
00001374  3604                     325      MOVE.W  D4,D3
00001376  E15B                     326      ROL.W   #8,D3
00001378  B63C 0044                327      CMP.B   #$44,D3
0000137C  6700 062E                328      BEQ     negMethod
00001380  E05B                     329      ROR.W   #8,D3
00001382  EE5B                     330      ROR.W   #7,D3
00001384  C63C 0007                331      AND.B   #7,D3
00001388  B63C 0007                332      CMP.B   #7,D3
0000138C  6600 0814                333      BNE     dataOpCode
00001390                           334      
00001390  3604                     335      MOVE.W  D4,D3
00001392  E65B                     336      ROR.W   #3,D3
00001394  C63C 0007                337      AND.B   #7,D3
00001398  B63C 0002                338      CMP.B   #2,D3
0000139C  6700 000E                339      BEQ     leaOutput
000013A0                           340      
000013A0  B63C 0007                341      CMP.B   #7,D3
000013A4  6700 0006                342      BEQ     leaOutput
000013A8                           343      
000013A8  6000 07F8                344      BRA     dataOpCode
000013AC                           345      
000013AC                           346  leaOutput    
000013AC  43F9 00001E59            347      LEA     outputLEA,A1
000013B2  103C 000E                348      MOVE.B  #14,D0
000013B6  4E4F                     349      TRAP    #15
000013B8                           350      
000013B8  4EB9 00001CA8            351      JSR     sourceEA
000013BE                           352      
000013BE  43F9 00001ECE            353      LEA     outputComma,A1
000013C4  103C 000E                354      MOVE.B  #14,D0
000013C8  4E4F                     355      TRAP    #15
000013CA                           356      
000013CA  4EB9 00001DA0            357      JSR     addaDestEA
000013D0                           358      
000013D0  6000 0A04                359      BRA     DONE
000013D4                           360      
000013D4                           361  oriOpCode                       *OR opcode
000013D4  BA3C 0000                362      CMP.B   #0,D5               
000013D8  6600 00EA                363      BNE     moveByteOpCode      *if not, go to next opcode
000013DC                           364  
000013DC                           365  *-------------------------------------------------Change this when merging         
000013DC  3404                     366      MOVE.W  D4,D2
000013DE  E15A                     367      ROL.W   #8,D2
000013E0  C4BC 0000000F            368      AND.L   #$0000000F,D2
000013E6                           369      
000013E6  2A02                     370      MOVE.L  D2,D5
000013E8                           371      
000013E8                           372  oriMethod
000013E8  BA3C 0000                373      CMP.B   #0,D5
000013EC  6600 0034                374      BNE     cmpiOpCode
000013F0                           375      
000013F0  43F9 00001E6D            376      LEA     outputORI,A1
000013F6  103C 000E                377      MOVE.B  #14,D0
000013FA  4E4F                     378      TRAP    #15
000013FC                           379      
000013FC  4EB9 00001BF8            380      JSR     dotOpMode
00001402                           381          
00001402  7407                     382      MOVE.L  #7,D2
00001404  7604                     383      MOVE.L  #4,D3
00001406  4EB9 00001D22            384      JSR     immediateData
0000140C                           385      
0000140C  43F9 00001ECE            386      LEA     outputComma,A1
00001412  103C 000E                387      MOVE.B  #14,D0
00001416  4E4F                     388      TRAP    #15
00001418                           389      
00001418  4EB9 00001CA8            390      JSR     sourceEA
0000141E  6000 09B6                391      BRA     DONE
00001422                           392  
00001422                           393  cmpiOpCode
00001422  BA3C 000C                394      CMP.B   #12,D5
00001426  6600 0034                395      BNE     bclrOpCode
0000142A                           396      
0000142A                           397  cmpiMethod
0000142A  43F9 00001E78            398      LEA     outputCMPI,A1
00001430  103C 000E                399      MOVE.B  #14,D0
00001434  4E4F                     400      TRAP    #15
00001436                           401      
00001436  4EB9 00001BF8            402      JSR     dotOpMode
0000143C                           403      
0000143C  7407                     404      MOVE.L  #7,D2
0000143E  7604                     405      MOVE.L  #4,D3
00001440  4EB9 00001D22            406      JSR     immediateData
00001446                           407      
00001446  43F9 00001ECE            408      LEA     outputComma,A1
0000144C  103C 000E                409      MOVE.B  #14,D0
00001450  4E4F                     410      TRAP    #15
00001452                           411      
00001452  4EB9 00001CA8            412      JSR     sourceEA
00001458  6000 097C                413      BRA     DONE
0000145C                           414      
0000145C                           415  bclrOpCode
0000145C  43F9 00001E81            416      LEA     outputBCLR,A1
00001462  103C 000E                417      MOVE.B  #14,D0
00001466  4E4F                     418      TRAP    #15
00001468                           419      
00001468  720A                     420      MOVE.L  #10,D1
0000146A  2A04                     421      MOVE.L  D4,D5
0000146C  E37D                     422      ROL.W   D1,D5
0000146E  CABC 00000007            423      AND.L   #$00000007,D5
00001474                           424      
00001474  BA3C 0002                425      CMP.B   #2,D5
00001478  6700 002A                426      BEQ     bclrImmediate
0000147C                           427      
0000147C  7400                     428      MOVE.L  #0,D2
0000147E  2604                     429      MOVE.L  D4,D3
00001480  EF5B                     430      ROL.W   #7,D3
00001482  C6BC 00000007            431      AND.L   #$00000007,D3
00001488                           432      
00001488  4EB9 00001CBA            433      JSR     DnMode
0000148E                           434      
0000148E  43F9 00001ECE            435      LEA     outputComma,A1
00001494  103C 000E                436      MOVE.B  #14,D0
00001498  4E4F                     437      TRAP    #15
0000149A                           438      
0000149A  4EB9 00001CA8            439      JSR     sourceEA
000014A0                           440      
000014A0  6000 0934                441      BRA     DONE
000014A4                           442          
000014A4                           443  bclrImmediate
000014A4                           444      
000014A4  7407                     445      MOVE.L  #7,D2
000014A6  7604                     446      MOVE.L  #4,D3
000014A8                           447      
000014A8  4EB9 00001D22            448      JSR     immediateData
000014AE                           449      
000014AE  43F9 00001ECE            450      LEA     outputComma,A1
000014B4  103C 000E                451      MOVE.B  #14,D0
000014B8  4E4F                     452      TRAP    #15
000014BA                           453      
000014BA  4EB9 00001CA8            454      JSR     sourceEA
000014C0                           455      
000014C0  6000 0914                456      BRA     DONE    
000014C4                           457      
000014C4                           458  moveByteOpCode                  *MOVE.B opcode
000014C4  BA3C 0001                459      CMP.B   #1,D5
000014C8  6600 0036                460      BNE     moveWordOpCode 
000014CC                           461  
000014CC                           462  moveByteMethod                  *MOVE.B output
000014CC  43F9 00001E1F            463      LEA     outputMOVE,A1       *Outputs "MOVE" onto console
000014D2  103C 000E                464      MOVE.B  #14,D0
000014D6  4E4F                     465      TRAP    #15
000014D8                           466      
000014D8  43F9 00001EB4            467      LEA     outputByte,A1       *Outputs ".B" onto console
000014DE  103C 000E                468      MOVE.B  #14,D0
000014E2  4E4F                     469      TRAP    #15
000014E4                           470      
000014E4  4EB9 00001CA8            471      JSR     sourceEA            *Jump to subroutine sourceEA
000014EA                           472      
000014EA  43F9 00001ECE            473      LEA     outputComma,A1      *Outputs a comma onto console
000014F0  103C 000E                474      MOVE.B  #14,D0
000014F4  4E4F                     475      TRAP    #15
000014F6                           476      
000014F6  4EB9 00001D84            477      JSR     moveDestinationEA   *Jump to subroutine moveDestinationEA
000014FC                           478      
000014FC  6000 08D8                479      BRA     DONE                *Yay done
00001500                           480      
00001500                           481  
00001500                           482  moveWordOpCode                  *MOVE.W opcode
00001500  BA3C 0003                483      CMP.B   #3,D5
00001504  6600 005A                484      BNE     moveLongOpCode
00001508                           485     
00001508                           486  moveWordMethod                  *MOVE.W output
00001508  3404                     487      MOVE.W  D4,D2               *D4 has the original word
0000150A  323C 000A                488      MOVE.W  #10,D1              *Move the value 10 into D1 since ROL has issues with
0000150E  E37A                     489      ROL.W   D1,D2               *   immediate values > 8
00001510                           490      
00001510  B47C 0001                491      CMP.W   #1,D2               *If the rotated value is a 1, it's a MOVEA.W
00001514  6700 0012                492      BEQ     moveAWordMethod    
00001518                           493      
00001518  43F9 00001E1F            494      LEA     outputMOVE,A1       *Outputs "MOVE." onto console
0000151E  103C 000E                495      MOVE.B  #14,D0
00001522  4E4F                     496      TRAP    #15
00001524  6000 0012                497      BRA     moveWordMethodpt2   *Go to the rest of the method~
00001528                           498      
00001528                           499  moveAWordMethod                 *MOVEA.W opcode
00001528  43F9 00001E24            500      LEA     outputMOVEA,A1      *Outputs "MOVEA" onto console
0000152E  103C 000E                501      MOVE.B  #14,D0
00001532  4E4F                     502      TRAP    #15
00001534  6000 0002                503      BRA     moveWordMethodpt2   *Go to the rest of the method~
00001538                           504      
00001538                           505  moveWordMethodpt2               *Part 2 of the MOVE/MOVEA.W series
00001538  43F9 00001EB8            506      LEA     outputWord,A1       *Outputs ".W" onto console
0000153E  103C 000E                507      MOVE.B  #14,D0
00001542  4E4F                     508      TRAP    #15
00001544                           509      
00001544  4EB9 00001CA8            510      JSR     sourceEA            *Yay subroutines
0000154A                           511      
0000154A  43F9 00001ECE            512      LEA     outputComma,A1      *outputs a comma onto console
00001550  103C 000E                513      MOVE.B  #14,D0
00001554  4E4F                     514      TRAP    #15
00001556                           515      
00001556  4EB9 00001D84            516      JSR     moveDestinationEA   *Gotta check the destination~
0000155C                           517  
0000155C  6000 0878                518      BRA     DONE                *I'm done, bra
00001560                           519  
00001560                           520  moveLongOpCode                  *MOVE.L opcode
00001560  BA3C 0002                521      CMP.B   #2,D5
00001564  6600 005C                522      BNE     addOpCode
00001568                           523      
00001568                           524  moveLongOpCodeMethod            *MOVE.L output
00001568  340A                     525      MOVE.W  A2,D2               *Gotta check if it's actually a MOVEA
0000156A  323C 000A                526      MOVE.W  #10,D1
0000156E  E37A                     527      ROL.W   D1,D2
00001570                           528      
00001570  B47C 0001                529      CMP.W   #1,D2
00001574  6700 0012                530      BEQ     moveALongMethod   
00001578                           531  
00001578  43F9 00001E1F            532      LEA     outputMOVE,A1       *outputs "MOVE" onto console
0000157E  103C 000E                533      MOVE.B  #14,D0
00001582  4E4F                     534      TRAP    #15
00001584                           535      
00001584  6000 0012                536      BRA     moveLongMethodpt2   *Go to Part 2 of the MOVE series~
00001588                           537      
00001588                           538  moveALongMethod                 *MOVEA.L output
00001588  43F9 00001E24            539      LEA     outputMOVEA,A1      *Outputs "MOVEA" onto console
0000158E  103C 000E                540      MOVE.B  #14,D0
00001592  4E4F                     541      TRAP    #15
00001594  6000 0002                542      BRA     moveLongMethodpt2   *Go to part 2~
00001598                           543      
00001598                           544  moveLongMethodpt2               *Part 2, the sequel(SQL?)
00001598                           545      
00001598  43F9 00001EBC            546      LEA     outputLong,A1       *Outputs ".L" onto console
0000159E  103C 000E                547      MOVE.B  #14,D0
000015A2  4E4F                     548      TRAP    #15
000015A4                           549      
000015A4  5207                     550      ADD.B   #1,D7
000015A6                           551      
000015A6  4EB9 00001CA8            552      JSR     sourceEA            *Go output source
000015AC                           553      
000015AC  43F9 00001ECE            554      LEA     outputComma,A1      *Yay commas
000015B2  103C 000E                555      MOVE.B  #14,D0
000015B6  4E4F                     556      TRAP    #15
000015B8                           557      
000015B8  4EB9 00001D84            558      JSR     moveDestinationEA    *Output destination
000015BE  6000 0816                559      BRA     DONE
000015C2                           560  
000015C2                           561  addOpCode                        *ADD opcode
000015C2  BA3C 000D                562      CMP.B   #13,D5
000015C6  6600 0040                563      BNE     subOpCode    
000015CA                           564      
000015CA                           565  addMethod                        *ADD output
000015CA  43F9 00001E10            566      LEA     outputADD,A1         *Outputs "ADD" onto console
000015D0  103C 000E                567      MOVE.B  #14,D0
000015D4  4E4F                     568      TRAP    #15
000015D6                           569      
000015D6  4EB9 00001BF8            570      JSR     dotOpMode           *Checks if it's a byte,word, or long
000015DC                           571      
000015DC  BC3C 0001                572      CMP.B   #1,D6               *If D6 == 1, the data register is the source
000015E0  6700 05DE                573      BEQ     altOrder            *   D6 was decided in dotOpMode(?)
000015E4                           574      
000015E4  BC3C 0002                575      CMP.B   #2,D6
000015E8  6700 05F2                576      BEQ     addaOrder           *go do ADDA stuff
000015EC                           577      
000015EC  4EB9 00001CA8            578      JSR     sourceEA            *outputs what the source is
000015F2                           579      
000015F2  43F9 00001ECE            580      LEA     outputComma,A1      *Commas~~~
000015F8  103C 000E                581      MOVE.B  #14,D0
000015FC  4E4F                     582      TRAP    #15
000015FE                           583      
000015FE  4EB9 00001D58            584      JSR     addDestinationEA       *outputs what the destination is
00001604                           585      
00001604  6000 07D0                586      BRA     DONE
00001608                           587      
00001608                           588  subOpCode
00001608  BA3C 0009                589      CMP.B   #9,D5               *is it SUB?
0000160C  6600 0038                590      BNE     subQOpCode          *not SUB, check if SUBQ
00001610                           591  
00001610                           592  subMethod
00001610  43F9 00001E16            593      LEA     outputSUB,A1        *output SUB to the console
00001616  103C 000E                594      MOVE.B  #14,D0  
0000161A  4E4F                     595      TRAP    #15
0000161C                           596  
0000161C  4EB9 00001BF8            597      JSR     dotOpMode           *check if its a B,W, or L
00001622                           598  
00001622  BC3C 0001                599      CMP.B   #1,D6               *if D6 == 1, the data register is the source
00001626  6700 0598                600      BEQ     altOrder
0000162A                           601  
0000162A  4EB9 00001CA8            602      JSR     sourceEA            *outputs what the source is
00001630                           603  
00001630  43F9 00001ECE            604      LEA     outputComma,A1      *commas
00001636  103C 000E                605      MOVE.B  #14,D0
0000163A  4E4F                     606      TRAP    #15
0000163C                           607  
0000163C  4EB9 00001D58            608      JSR     addDestinationEA    *outputs what ths destination is
00001642                           609  
00001642  6000 0792                610      BRA     DONE                
00001646                           611  
00001646                           612  subQOpCode
00001646  BA3C 0005                613      CMP.B   #5,D5               *is it SUBQ?
0000164A  6600 008A                614      BNE     orOpCode            *check if its DIVS.W
0000164E                           615      
0000164E                           616  subQMethod
0000164E  43F9 00001E1A            617      LEA     outputSUBQ,A1       *output SUBQ
00001654  103C 000E                618      MOVE.B  #14,D0
00001658  4E4F                     619      TRAP    #15
0000165A                           620      
0000165A  3604                     621      MOVE.W  D4,D3               *move original word from D4
0000165C  123C 000A                622      MOVE.B  #10,D1              *hacks
00001660  E37B                     623      ROL.W   D1,D3               *ROL by 10
00001662  C6BC 00000003            624      AND.L   #00000003,D3        *Mask 
00001668  4EB9 00001C6C            625      JSR     byteOpMode          *check if B,W,L
0000166E                           626      
0000166E  4EB9 0000168A            627      JSR     subQData            *outputs #1-#8
00001674                           628      
00001674  43F9 00001ECE            629      LEA     outputComma,A1      *commas
0000167A  103C 000E                630      MOVE.B  #14,D0
0000167E  4E4F                     631      TRAP    #15
00001680                           632      
00001680  4EB9 00001CA8            633      JSR     sourceEA            *get the source
00001686                           634      
00001686  6000 074E                635      BRA     DONE
0000168A                           636      
0000168A                           637      
0000168A                           638  subQData
0000168A  3604                     639      MOVE.W  D4,D3               *move original word from D4
0000168C  EF5B                     640      ROL.W   #7,D3               *ROL 7
0000168E  C6BC 00000007            641      AND.L   #$00000007,D3       *mask the bits
00001694                           642      
00001694  B63C 0000                643      CMP.B   #0,D3               *if its 0 display 8
00001698  6700 0022                644      BEQ     display8ForSubQ
0000169C                           645      
0000169C  B63C 0008                646      CMP.B   #8,D3
000016A0  6C00 0500                647      BGE     dataOpCode
000016A4                           648      
000016A4  43F9 00001EC9            649      LEA     outputPound,A1      *output #
000016AA  103C 000E                650      MOVE.B  #14,D0
000016AE  4E4F                     651      TRAP    #15
000016B0                           652      
000016B0  4281                     653      CLR.L   D1
000016B2  1203                     654      MOVE.B  D3,D1               *output 1-7
000016B4  103C 0003                655      MOVE.B  #3,D0
000016B8  4E4F                     656      TRAP    #15
000016BA                           657      
000016BA  4E75                     658      RTS                         *return to subQmethod
000016BC                           659      
000016BC                           660  display8ForSubQ
000016BC                           661  
000016BC  43F9 00001EC9            662      LEA     outputPound,A1      *output #
000016C2  103C 000E                663      MOVE.B  #14,D0
000016C6  4E4F                     664      TRAP    #15
000016C8  4281                     665      CLR.L   D1
000016CA  123C 0008                666      MOVE.B  #8,D1               *output 8
000016CE  103C 0003                667      MOVE.B  #3,D0
000016D2  4E4F                     668      TRAP    #15
000016D4                           669      
000016D4  4E75                     670      RTS                         *return to subQMethod
000016D6                           671  
000016D6                           672  orOpCode
000016D6  BA3C 0008                673      CMP.B   #8,D5   
000016DA  6600 008A                674      BNE     eorOpCode
000016DE                           675      
000016DE  2A04                     676      MOVE.L  D4,D5
000016E0  720A                     677      MOVE.L  #10,D1
000016E2  E37D                     678      ROL.W   D1,D5
000016E4                           679      
000016E4  CABC 00000007            680      AND.L   #$00000007,D5
000016EA                           681      
000016EA  BA3C 0007                682      CMP.B   #7,D5
000016EE  6700 0038                683      BEQ     divsWOpCode
000016F2                           684      
000016F2                           685  orMethod
000016F2  43F9 00001E71            686      LEA     outputOR,A1
000016F8  103C 000E                687      MOVE.B  #14,D0
000016FC  4E4F                     688      TRAP    #15
000016FE                           689      
000016FE  4EB9 00001BF8            690      JSR     dotOpMode
00001704                           691      
00001704  BC3C 0001                692      CMP.B   #1,D6
00001708  6700 04B6                693      BEQ     altOrder
0000170C                           694      
0000170C  4EB9 00001CA8            695      JSR     sourceEA
00001712                           696      
00001712  43F9 00001ECE            697      LEA     outputComma,A1
00001718  103C 000E                698      MOVE.B  #14,D0
0000171C  4E4F                     699      TRAP    #15
0000171E                           700      
0000171E  4EB9 00001D58            701      JSR     addDestinationEA
00001724                           702      
00001724  6000 06B0                703      BRA     DONE
00001728                           704      
00001728                           705  divsWOpCode
00001728                           706  *    CMP.B   #8,D5
00001728                           707  *    BEQ     divsWCheck          *bits 8,7,6 need to make 7 to be DIVSW
00001728                           708  *    BRA     eorOpCode
00001728                           709  *    
00001728                           710  divsWCheck
00001728  3604                     711      MOVE.W  D4,D3
0000172A  143C 000A                712      MOVE.B  #10,D2
0000172E  E57B                     713      ROL.W   D2,D3
00001730  C6BC 00000007            714      AND.L   #$00000007,D3
00001736  B63C 0007                715      CMP.B   #7,D3
0000173A  6600 069A                716      BNE     DONE
0000173E                           717      
0000173E  43F9 00001E42            718      LEA     outputDIVSW,A1
00001744  103C 000E                719      MOVE.B  #14,D0
00001748  4E4F                     720      TRAP    #15
0000174A                           721      
0000174A  4EB9 00001CA8            722      JSR     sourceEA 
00001750                           723      
00001750  43F9 00001ECE            724      LEA     outputComma,A1
00001756  103C 000E                725      MOVE.B  #14,D0
0000175A  4E4F                     726      TRAP    #15
0000175C                           727      
0000175C  4EB9 00001D58            728      JSR     addDestinationEA
00001762                           729      
00001762  6000 0672                730      BRA     DONE
00001766                           731      
00001766                           732  eorOpCode
00001766  BA3C 000B                733      CMP.B   #11,D5
0000176A  6600 0078                734      BNE     shiftsOpCode
0000176E                           735      
0000176E  2A04                     736      MOVE.L  D4,D5
00001770  E19D                     737      ROL.L   #8,D5
00001772  CABC 00000001            738      AND.L   #$00000001,D5
00001778                           739      
00001778                           740      
00001778                           741  eorMethod
00001778  BA3C 0001                742      CMP.B   #1,D5
0000177C  6600 0030                743      BNE     cmpOpCode
00001780                           744      
00001780  43F9 00001E74            745      LEA     outputEOR,A1
00001786  103C 000E                746      MOVE.B  #14,D0
0000178A  4E4F                     747      TRAP    #15
0000178C                           748      
0000178C  4EB9 00001BF8            749      JSR     dotOpMode
00001792                           750      
00001792  4EB9 00001D58            751      JSR     addDestinationEA
00001798                           752      
00001798  43F9 00001ECE            753      LEA     outputComma,A1
0000179E  103C 000E                754      MOVE.B  #14,D0
000017A2  4E4F                     755      TRAP    #15
000017A4                           756      
000017A4  4EB9 00001CA8            757      JSR     sourceEA
000017AA                           758      
000017AA  6000 062A                759      BRA     DONE    
000017AE                           760  
000017AE                           761  cmpOpCode
000017AE  BA3C 0000                762      CMP.B   #0,D5
000017B2  6600 0622                763      BNE     DONE
000017B6                           764      
000017B6  43F9 00001E7D            765      LEA     outputCMP,A1
000017BC  103C 000E                766      MOVE.B  #14,D0
000017C0  4E4F                     767      TRAP    #15
000017C2                           768      
000017C2  4EB9 00001BF8            769      JSR     dotOpMode
000017C8                           770      
000017C8  4EB9 00001CA8            771      JSR     sourceEA
000017CE                           772      
000017CE  43F9 00001ECE            773      LEA     outputComma,A1
000017D4  103C 000E                774      MOVE.B  #14,D0
000017D8  4E4F                     775      TRAP    #15
000017DA                           776      
000017DA  4EB9 00001D58            777      JSR     addDestinationEA
000017E0                           778      
000017E0  6000 05F4                779      BRA     DONE
000017E4                           780     
000017E4                           781  shiftsOpCode
000017E4  BA3C 000E                782      CMP.B   #14,D5
000017E8  6600 0166                783      BNE     mulsWOpCode
000017EC                           784      
000017EC  2A04                     785      MOVE.L  D4,D5
000017EE  E65D                     786      ROR.W   #3,D5
000017F0  CABC 00000003            787      AND.L   #$00000003,D5
000017F6                           788      
000017F6                           789  lsdOpCode
000017F6  BA3C 0001                790      CMP.B   #1,D5
000017FA  6600 0036                791      BNE     asdOpCode
000017FE                           792      
000017FE                           793  lsdMethod
000017FE  43F9 00001E87            794      LEA     outputLS,A1
00001804  103C 000E                795      MOVE.B  #14,D0
00001808  4E4F                     796      TRAP    #15
0000180A                           797      
0000180A  4EB9 000018AA            798      JSR     leftRight
00001810                           799      
00001810  4EB9 00001BF8            800      JSR     dotOpMode
00001816                           801      
00001816  4EB9 000018D8            802      JSR     shiftSourceEA
0000181C                           803      
0000181C  43F9 00001ECE            804      LEA     outputComma,A1
00001822  103C 000E                805      MOVE.B  #14,D0
00001826  4E4F                     806      TRAP    #15
00001828                           807      
00001828  4EB9 00001932            808      JSR     shiftDestEA
0000182E                           809      
0000182E  6000 05A6                810      BRA     DONE
00001832                           811   
00001832                           812  asdOpCode
00001832  BA3C 0000                813      CMP.B   #0,D5
00001836  6600 0036                814      BNE     rodOpCode
0000183A                           815      
0000183A  43F9 00001E8A            816      LEA     outputAS,A1
00001840  103C 000E                817      MOVE.B  #14,D0
00001844  4E4F                     818      TRAP    #15
00001846                           819      
00001846  4EB9 000018AA            820      JSR     leftRight
0000184C                           821      
0000184C  4EB9 00001BF8            822      JSR     dotOpMode
00001852                           823      
00001852  4EB9 000018D8            824      JSR     shiftSourceEA
00001858                           825      
00001858  43F9 00001ECE            826      LEA     outputComma,A1
0000185E  103C 000E                827      MOVE.B  #14,D0
00001862  4E4F                     828      TRAP    #15
00001864                           829      
00001864  4EB9 00001932            830      JSR     shiftDestEA    
0000186A                           831      
0000186A  6000 056A                832      BRA     DONE
0000186E                           833      
0000186E                           834  rodOpCode
0000186E  BA3C 0003                835      CMP.B   #3,D5
00001872  6600 0562                836      BNE     DONE
00001876                           837      
00001876  43F9 00001E8D            838      LEA     outputRO,A1
0000187C  103C 000E                839      MOVE.B  #14,D0
00001880  4E4F                     840      TRAP    #15
00001882                           841      
00001882  4EB9 000018AA            842      JSR     leftRight
00001888                           843      
00001888  4EB9 00001BF8            844      JSR     dotOpMode
0000188E                           845      
0000188E  4EB9 000018D8            846      JSR     shiftSourceEA
00001894                           847      
00001894  43F9 00001ECE            848      LEA     outputComma,A1
0000189A  103C 000E                849      MOVE.B  #14,D0
0000189E  4E4F                     850      TRAP    #15
000018A0                           851      
000018A0  4EB9 00001932            852      JSR     shiftDestEA
000018A6                           853      
000018A6  6000 052E                854      BRA     DONE
000018AA                           855      
000018AA                           856  leftRight
000018AA  2604                     857      MOVE.L  D4,D3
000018AC  E15B                     858      ROL.W   #8,D3
000018AE  C6BC 00000001            859      AND.L   #$00000001,D3
000018B4                           860  
000018B4  B63C 0000                861      CMP.B   #0,D3
000018B8  6700 0010                862      BEQ     rightRight
000018BC                           863      
000018BC  43F9 00001E90            864      LEA     outputLeft,A1
000018C2  103C 000E                865      MOVE.B  #14,D0
000018C6  4E4F                     866      TRAP    #15
000018C8                           867      
000018C8  4E75                     868      RTS
000018CA                           869      
000018CA                           870  rightRight
000018CA  43F9 00001E92            871      LEA     outputRight,A1
000018D0  103C 000E                872      MOVE.B  #14,D0
000018D4  4E4F                     873      TRAP    #15
000018D6                           874      
000018D6  4E75                     875      RTS
000018D8                           876      
000018D8                           877  shiftSourceEA
000018D8  2404                     878      MOVE.L  D4,D2
000018DA  EA5A                     879      ROR.W   #5,D2
000018DC  C4BC 00000001            880      AND.L   #$00000001,D2
000018E2                           881  
000018E2  2604                     882      MOVE.L  D4,D3
000018E4  EF5B                     883      ROL.W   #7,D3
000018E6  C6BC 00000007            884      AND.L   #$00000007,D3
000018EC                           885      
000018EC  B43C 0000                886      CMP.B   #0,D2
000018F0  6700 0018                887      BEQ     shiftImmediateEA
000018F4                           888      
000018F4  43F9 00001EC7            889      LEA     outputDn,A1
000018FA  103C 000E                890      MOVE.B  #14,D0
000018FE  4E4F                     891      TRAP    #15
00001900                           892      
00001900  2203                     893      MOVE.L  D3,D1
00001902  103C 0003                894      MOVE.B  #3,D0
00001906  4E4F                     895      TRAP    #15
00001908                           896      
00001908  4E75                     897      RTS
0000190A                           898      
0000190A                           899  shiftImmediateEA
0000190A  43F9 00001EC9            900      LEA     outputPound,A1
00001910  103C 000E                901      MOVE.B  #14,D0
00001914  4E4F                     902      TRAP    #15
00001916                           903      
00001916  B63C 0000                904      CMP.B   #0,D3
0000191A  6700 000C                905      BEQ     shiftImmediateEight
0000191E                           906      
0000191E  2203                     907      MOVE.L  D3,D1
00001920  103C 0003                908      MOVE.B  #3,D0
00001924  4E4F                     909      TRAP    #15
00001926                           910      
00001926  4E75                     911      RTS
00001928                           912      
00001928                           913  shiftImmediateEight
00001928  7208                     914      MOVE.L  #8,D1
0000192A  103C 0003                915      MOVE.B  #3,D0
0000192E  4E4F                     916      TRAP    #15
00001930                           917      
00001930  4E75                     918      RTS
00001932                           919      
00001932                           920  shiftDestEA
00001932  2604                     921      MOVE.L  D4,D3
00001934  C6BC 00000007            922      AND.L   #$00000007,D3
0000193A                           923      
0000193A  43F9 00001EC7            924      LEA     outputDn,A1
00001940  103C 000E                925      MOVE.B  #14,D0
00001944  4E4F                     926      TRAP    #15
00001946                           927      
00001946  2203                     928      MOVE.L  D3,D1
00001948  103C 0003                929      MOVE.B  #3,D0
0000194C  4E4F                     930      TRAP    #15
0000194E                           931      
0000194E  4E75                     932      RTS
00001950                           933      
00001950                           934  mulsWOpCode
00001950  BA3C 000C                935      CMP.B   #12,D5
00001954  6600 004A                936      BNE     mulsLOpCode
00001958  3604                     937      MOVE.W  D4,D3
0000195A  EC5B                     938      ROR.W   #6,D3
0000195C  C63C 0007                939      AND.B   #7,D3
00001960  B63C 0007                940      CMP.B   #7,D3
00001964  6600 023C                941      BNE     dataOpCode   
00001968                           942  
00001968                           943  mulsWMethod
00001968  3604                     944      MOVE.W  D4,D3
0000196A  E61B                     945      ROR.B   #3,D3
0000196C  C63C 0007                946      AND.B   #7,D3
00001970  B63C 0001                947      CMP.B   #1,D3
00001974  6700 022C                948      BEQ     dataOpCode
00001978                           949      
00001978                           950  mulsOutput    
00001978  43F9 00001E3C            951      LEA     outputMULS,A1
0000197E  103C 000E                952      MOVE.B  #14,D0
00001982  4E4F                     953      TRAP    #15
00001984                           954      
00001984  4EB9 00001CA8            955      JSR     sourceEA
0000198A                           956      
0000198A  43F9 00001ECE            957      LEA     outputComma,A1
00001990  103C 000E                958      MOVE.B  #14,D0
00001994  4E4F                     959      TRAP    #15
00001996                           960      
00001996  4EB9 00001D58            961      JSR     addDestinationEA
0000199C                           962      
0000199C  6000 0438                963      BRA     DONE
000019A0                           964      
000019A0                           965  mulsLOpCode *--------Do we need to do MULSL?
000019A0                           966  *    MOVE.W  D4,D3
000019A0                           967  *    MOVE.B  #10,D2
000019A0                           968  *    ROL.W   D2,D3
000019A0                           969  *    AND.W   #$01FF,D3
000019A0                           970  *    CMP.W   #304,D3
000019A0                           971  *    BNE     negOpCode
000019A0                           972      
000019A0                           973  mulsLMethod
000019A0                           974          
000019A0                           975      
000019A0                           976  negOpCode
000019A0  3604                     977      MOVE.W  D4,D3
000019A2  E15B                     978      ROL.W   #8,D3
000019A4  B63C 0044                979      CMP.B   #$44,D3
000019A8  6600 002E                980      BNE     braOpCode
000019AC                           981      
000019AC                           982  negMethod
000019AC  43F9 00001E64            983      LEA     outputNEG,A1        *output NEG to the console
000019B2  103C 000E                984      MOVE.B  #14,D0
000019B6  4E4F                     985      TRAP    #15
000019B8                           986      
000019B8  4283                     987      CLR.L   D3
000019BA  3604                     988      MOVE.W  D4,D3               *move original word from D4
000019BC  123C 000A                989      MOVE.B  #10,D1              *hacks
000019C0  E37B                     990      ROL.W   D1,D3               *ROL by 10
000019C2  C6BC 00000003            991      AND.L   #00000003,D3        *Mask 
000019C8  4EB9 00001C6C            992      JSR     byteOpMode          *check if B,W,L
000019CE                           993          
000019CE  4EB9 00001CA8            994      JSR     sourceEA
000019D4                           995      
000019D4  6000 0400                996      BRA     DONE
000019D8                           997  
000019D8                           998  braOpCode
000019D8  3604                     999      MOVE.W  D4,D3               *move the opcode word into D3
000019DA  E15B                    1000      ROL.W   #8,D3               *isolate the last byte
000019DC  B63C 0060               1001      CMP.B   #$60,D3             *is it a BRA?
000019E0  6600 0154               1002      BNE     bccOpCode           *its data then
000019E4                          1003      
000019E4                          1004  braMethod
000019E4  43F9 00001E68           1005      LEA     outputBRA,A1        
000019EA  103C 000E               1006      MOVE.B  #14,D0
000019EE  4E4F                    1007      TRAP    #15
000019F0                          1008  
000019F0                          1009  
000019F0                          1010  bccDisplacement    
000019F0  1604                    1011      MOVE.B  D4,D3
000019F2  C67C 00FF               1012      AND.W   #$00FF,D3
000019F6  B63C 0000               1013      CMP.B   #$00,D3
000019FA  6700 0048               1014      BEQ     bitDisplacement16
000019FE  B63C 00FF               1015      CMP.B   #$FF,D3
00001A02  6700 00B6               1016      BEQ     bitDisplacement32
00001A06  E11B                    1017      ROL.B   #8,D3
00001A08  0A43 00FF               1018      EOR.W   #$FF,D3
00001A0C  5243                    1019      ADD.W   #1,D3
00001A0E                          1020      
00001A0E  43F9 00001EDB           1021      LEA     outputNegSign,A1
00001A14  103C 000E               1022      MOVE.B  #14,D0
00001A18  4E4F                    1023      TRAP    #15
00001A1A                          1024      
00001A1A  3203                    1025      MOVE.W  D3,D1
00001A1C  103C 0003               1026      MOVE.B  #3,D0
00001A20  4E4F                    1027      TRAP    #15
00001A22                          1028      
00001A22  43F9 00001ED6           1029      LEA     outputSpace,A1
00001A28  103C 000E               1030      MOVE.B  #14,D0
00001A2C  4E4F                    1031      TRAP    #15
00001A2E                          1032      
00001A2E  304D                    1033      MOVE.W  A5,A0
00001A30  90C3                    1034      SUBA.W  D3,A0
00001A32  3208                    1035      MOVE.W  A0,D1
00001A34  103C 000F               1036      MOVE.B  #15,D0
00001A38  143C 0010               1037      MOVE.B  #16,D2
00001A3C  4E4F                    1038      TRAP    #15
00001A3E                          1039      
00001A3E  304C                    1040      MOVE.W  A4,A0
00001A40                          1041      
00001A40                          1042      
00001A40  6000 0394               1043      BRA     DONE
00001A44                          1044     
00001A44                          1045  bitDisplacement16
00001A44                          1046      
00001A44  304D                    1047      MOVE.W  A5,A0
00001A46  381D                    1048      MOVE.W  (A5)+,D4
00001A48  3604                    1049      MOVE.W  D4,D3
00001A4A  E95B                    1050      ROL.W   #4,D3
00001A4C  C67C 000F               1051      AND.W   #$000F,D3
00001A50  B67C 0008               1052      CMP.W   #8,D3
00001A54  6C00 002A               1053      BGE     negBit16
00001A58                          1054      
00001A58  3204                    1055      MOVE.W  D4,D1
00001A5A  103C 0003               1056      MOVE.B  #3,D0
00001A5E  4E4F                    1057      TRAP    #15
00001A60                          1058      
00001A60  43F9 00001ED6           1059      LEA     outputSpace,A1
00001A66  103C 000E               1060      MOVE.B  #14,D0
00001A6A  4E4F                    1061      TRAP    #15
00001A6C                          1062      
00001A6C  D0C4                    1063      ADDA.W  D4,A0
00001A6E  3208                    1064      MOVE.W  A0,D1
00001A70  103C 000F               1065      MOVE.B  #15,D0
00001A74  143C 0010               1066      MOVE.B  #16,D2
00001A78  4E4F                    1067      TRAP    #15
00001A7A                          1068      
00001A7A  304C                    1069      MOVE.W  A4,A0
00001A7C                          1070      
00001A7C  6000 0358               1071      BRA DONE
00001A80                          1072      
00001A80                          1073  negBit16
00001A80                          1074  
00001A80  0A44 FFFF               1075      EOR.W   #$FFFF,D4
00001A84  5244                    1076      ADD.W   #1,D4
00001A86                          1077      
00001A86  43F9 00001EDB           1078      LEA     outputNegSign,A1
00001A8C  103C 000E               1079      MOVE.B  #14,D0
00001A90  4E4F                    1080      TRAP    #15
00001A92                          1081      
00001A92  3204                    1082      MOVE.W  D4,D1
00001A94  103C 0003               1083      MOVE.B  #3,D0
00001A98  4E4F                    1084      TRAP    #15
00001A9A                          1085      
00001A9A  43F9 00001ED6           1086      LEA     outputSpace,A1
00001AA0  103C 000E               1087      MOVE.B  #14,D0
00001AA4  4E4F                    1088      TRAP    #15
00001AA6                          1089      
00001AA6  90C4                    1090      SUBA.W  D4,A0
00001AA8  3208                    1091      MOVE.W  A0,D1
00001AAA  103C 000F               1092      MOVE.B  #15,D0
00001AAE  143C 0010               1093      MOVE.B  #16,D2
00001AB2  4E4F                    1094      TRAP    #15
00001AB4                          1095      
00001AB4  304C                    1096      MOVE.W  A4,A0
00001AB6                          1097      
00001AB6  6000 031E               1098      BRA     DONE
00001ABA                          1099      
00001ABA                          1100  bitDisplacement32
00001ABA                          1101  
00001ABA  204D                    1102      MOVE.L  A5,A0
00001ABC  281D                    1103      MOVE.L  (A5)+,D4
00001ABE  2604                    1104      MOVE.L  D4,D3
00001AC0  E95B                    1105      ROL.W   #4,D3
00001AC2  C6BC 0000000F           1106      AND.L   #$0000000F,D3
00001AC8  B6BC 00000008           1107      CMP.L   #8,D3
00001ACE  6C00 002A               1108      BGE     negBit32
00001AD2                          1109      
00001AD2  2204                    1110      MOVE.L  D4,D1
00001AD4  103C 0003               1111      MOVE.B  #3,D0
00001AD8  4E4F                    1112      TRAP    #15
00001ADA                          1113      
00001ADA  43F9 00001ED6           1114      LEA     outputSpace,A1
00001AE0  103C 000E               1115      MOVE.B  #14,D0
00001AE4  4E4F                    1116      TRAP    #15
00001AE6                          1117      
00001AE6  D1C4                    1118      ADDA.L  D4,A0
00001AE8  2208                    1119      MOVE.L  A0,D1
00001AEA  103C 000F               1120      MOVE.B  #15,D0
00001AEE  143C 0010               1121      MOVE.B  #16,D2
00001AF2  4E4F                    1122      TRAP    #15
00001AF4                          1123      
00001AF4  204C                    1124      MOVE.L  A4,A0
00001AF6                          1125      
00001AF6  6000 02DE               1126      BRA DONE
00001AFA                          1127  
00001AFA                          1128  negBit32
00001AFA                          1129  
00001AFA  0A84 FFFFFFFF           1130      EOR.L   #$FFFFFFFF,D4
00001B00  5284                    1131      ADD.L   #1,D4
00001B02                          1132      
00001B02  43F9 00001EDB           1133      LEA     outputNegSign,A1
00001B08  103C 000E               1134      MOVE.B  #14,D0
00001B0C  4E4F                    1135      TRAP    #15
00001B0E                          1136      
00001B0E  2204                    1137      MOVE.L  D4,D1
00001B10  103C 0003               1138      MOVE.B  #3,D0
00001B14  4E4F                    1139      TRAP    #15
00001B16                          1140      
00001B16  43F9 00001ED6           1141      LEA     outputSpace,A1
00001B1C  103C 000E               1142      MOVE.B  #14,D0
00001B20  4E4F                    1143      TRAP    #15
00001B22                          1144      
00001B22  91C4                    1145      SUBA.L  D4,A0
00001B24  2208                    1146      MOVE.L  A0,D1
00001B26  103C 000F               1147      MOVE.B  #15,D0
00001B2A  143C 0010               1148      MOVE.B  #16,D2
00001B2E  4E4F                    1149      TRAP    #15
00001B30                          1150      
00001B30  204C                    1151      MOVE.L  A4,A0
00001B32                          1152      
00001B32  6000 02A2               1153      BRA     DONE
00001B36                          1154      
00001B36                          1155  bccOpCode
00001B36  BA3C 0006               1156      CMP.B   #6,D5               *is it Bcc?
00001B3A  6600 0066               1157      BNE     dataOpCode          *its data then
00001B3E                          1158      
00001B3E                          1159  bccMethod
00001B3E  3604                    1160      MOVE.W  D4,D3
00001B40  E15B                    1161      ROL.W   #8,D3
00001B42  C67C 000F               1162      AND.W   #$000F,D3
00001B46  B63C 0005               1163      CMP.B   #5,D3
00001B4A  6700 0016               1164      BEQ     bcs
00001B4E  B63C 000C               1165      CMP.B   #$C,D3
00001B52  6700 001E               1166      BEQ     bge
00001B56  B63C 000D               1167      CMP.B   #$D,D3
00001B5A  6700 0026               1168      BEQ     bct
00001B5E  6000 0032               1169      BRA     bvc
00001B62                          1170      
00001B62                          1171  bcs
00001B62  43F9 00001EA0           1172      LEA     outputBCS,A1
00001B68  103C 000E               1173      MOVE.B  #14,D0
00001B6C  4E4F                    1174      TRAP    #15
00001B6E                          1175      
00001B6E  6000 FE80               1176      BRA     bccDisplacement
00001B72                          1177      
00001B72                          1178  bge
00001B72  43F9 00001EA5           1179      LEA     outputBGE,A1
00001B78  103C 000E               1180      MOVE.B  #14,D0
00001B7C  4E4F                    1181      TRAP    #15
00001B7E                          1182      
00001B7E  6000 FE70               1183      BRA     bccDisplacement
00001B82                          1184  
00001B82                          1185  bct
00001B82  43F9 00001EAA           1186      LEA     outputBCT,A1
00001B88  103C 000E               1187      MOVE.B  #14,D0
00001B8C  4E4F                    1188      TRAP    #15
00001B8E                          1189      
00001B8E  6000 FE60               1190      BRA     bccDisplacement
00001B92                          1191      
00001B92                          1192  bvc
00001B92  43F9 00001EAF           1193      LEA     outputBVC,A1
00001B98  103C 000E               1194      MOVE.B  #14,D0
00001B9C  4E4F                    1195      TRAP    #15
00001B9E                          1196      
00001B9E  6000 FE50               1197      BRA     bccDisplacement
00001BA2                          1198      
00001BA2                          1199  
00001BA2                          1200             
00001BA2                          1201  dataOpCode
00001BA2  4283                    1202      CLR.L   D3
00001BA4  43F9 00001E5E           1203      LEA     outputData,A1
00001BAA  103C 000E               1204      MOVE.B  #14,D0
00001BAE  4E4F                    1205      TRAP    #15
00001BB0                          1206      
00001BB0  3215                    1207      MOVE.W  (A5),D1
00001BB2  103C 000F               1208      MOVE.B  #15,D0
00001BB6  143C 0010               1209      MOVE.B  #16,D2
00001BBA  4E4F                    1210      TRAP    #15
00001BBC                          1211      
00001BBC  6000 0218               1212      BRA     DONE
00001BC0                          1213  
00001BC0                          1214  
00001BC0                          1215  altOrder                            *outputs the Dn as the source for ADD
00001BC0  4EB9 00001D58           1216      JSR     addDestinationEA
00001BC6                          1217      
00001BC6  43F9 00001ECE           1218      LEA     outputComma,A1
00001BCC  103C 000E               1219      MOVE.B  #14,D0
00001BD0  4E4F                    1220      TRAP    #15
00001BD2                          1221      
00001BD2  4EB9 00001CA8           1222      JSR     sourceEA
00001BD8  6000 01FC               1223      BRA     DONE
00001BDC                          1224      
00001BDC                          1225  addaOrder                           *ADDA method
00001BDC  4EB9 00001CA8           1226      JSR     sourceEA                *output source first
00001BE2                          1227      
00001BE2  43F9 00001ECE           1228      LEA     outputComma,A1          *Comma
00001BE8  103C 000E               1229      MOVE.B  #14,D0
00001BEC  4E4F                    1230      TRAP    #15
00001BEE                          1231      
00001BEE  4EB9 00001DA0           1232      JSR     addaDestEA              *Have to set destination mode in addaDestEA
00001BF4  6000 01E0               1233      BRA     DONE
00001BF8                          1234  
00001BF8                          1235  
00001BF8                          1236  dotOpMode                           *Checks if it's a Byte,Word, or Long for ADD and SUB
00001BF8  3604                    1237      MOVE.W  D4,D3                   *Gets the original code from D4                 
00001BFA  143C 000A               1238      MOVE.B  #10,D2                  *yay hacks
00001BFE                          1239      
00001BFE  E57B                    1240      ROL.W   D2,D3                   *Rotates the original left by 10 bits
00001C00  C6BC 00000007           1241      AND.L   #$00000007,D3           *mask it up
00001C06                          1242      
00001C06  B63C 0003               1243      CMP.B   #3,D3                   
00001C0A  6C00 0006               1244      BGE     altOpMode               *if value is > 3, Dn is the source
00001C0E                          1245      
00001C0E  6000 005C               1246      BRA     byteOpMode    
00001C12                          1247  
00001C12                          1248  altOpMode                           *But wait, there's more!
00001C12  B63C 0003               1249      CMP.B   #3,D3                   *If it's 3, it's an ADDA.W
00001C16  6700 0016               1250      BEQ     addaWOpMode
00001C1A                          1251      
00001C1A  B63C 0007               1252      CMP.B   #7,D3                   *If it's a 7, it's an ADDA.L
00001C1E  6700 002C               1253      BEQ     addaLOpMode             *Otherwise, it's just ADD with Dn in source
00001C22                          1254      
00001C22  1C3C 0001               1255      MOVE.B  #1,D6                   *D6 is 1 if Dn is the source
00001C26  C63C 0003               1256      AND.B   #$3,D3                  *Mask it so it can continue with the output
00001C2A  6000 0040               1257      BRA     byteOpMode              *without the meddling 2^2 bit
00001C2E                          1258  
00001C2E                          1259  addaWOpMode                         *It's an ADDA.W
00001C2E  3C3C 0002               1260      MOVE.W  #2,D6
00001C32                          1261      
00001C32  43F9 00001E14           1262      LEA     outputADDA,A1
00001C38  103C 000E               1263      MOVE.B  #14,D0
00001C3C  4E4F                    1264      TRAP    #15
00001C3E                          1265      
00001C3E  43F9 00001EB8           1266      LEA     outputWord,A1
00001C44  103C 000E               1267      MOVE.B  #14,D0
00001C48  4E4F                    1268      TRAP    #15
00001C4A                          1269      
00001C4A  4E75                    1270      RTS
00001C4C                          1271      
00001C4C                          1272  addaLOpMode                         *It's an ADDA.L
00001C4C  3C3C 0002               1273      MOVE.W  #2,D6
00001C50                          1274      
00001C50  5207                    1275      ADD.B   #1,D7
00001C52                          1276      
00001C52  43F9 00001E14           1277      LEA     outputADDA,A1
00001C58  103C 000E               1278      MOVE.B  #14,D0
00001C5C  4E4F                    1279      TRAP    #15
00001C5E                          1280      
00001C5E  43F9 00001EBC           1281      LEA     outputLong,A1
00001C64  103C 000E               1282      MOVE.B  #14,D0
00001C68  4E4F                    1283      TRAP    #15
00001C6A                          1284      
00001C6A  4E75                    1285      RTS
00001C6C                          1286      
00001C6C                          1287      
00001C6C                          1288  byteOpMode                          *It's a byte?
00001C6C  B63C 0000               1289      CMP.B   #0,D3
00001C70  6600 0010               1290      BNE     wordOpMode
00001C74                          1291      
00001C74  43F9 00001EB4           1292      LEA     outputByte,A1           *Output ".B" !
00001C7A  103C 000E               1293      MOVE.B  #14,D0
00001C7E  4E4F                    1294      TRAP    #15
00001C80  4E75                    1295      RTS                             *Time to return back in time
00001C82                          1296      
00001C82                          1297  wordOpMode                          *It's a word?
00001C82  B63C 0001               1298      CMP.B   #1,D3
00001C86  6600 0010               1299      BNE     longOpMode
00001C8A                          1300      
00001C8A  43F9 00001EB8           1301      LEA     outputWord,A1           *Output ".W" onto console
00001C90  103C 000E               1302      MOVE.B  #14,D0
00001C94  4E4F                    1303      TRAP    #15
00001C96  4E75                    1304      RTS                             *Time warp~
00001C98                          1305      
00001C98                          1306  longOpMode                          *It better be a long then
00001C98  43F9 00001EBC           1307      LEA     outputLong,A1           *outputs ".L" onto console
00001C9E  103C 000E               1308      MOVE.B  #14,D0
00001CA2  4E4F                    1309      TRAP    #15
00001CA4                          1310      
00001CA4  5207                    1311      ADD.B   #1,D7
00001CA6                          1312     
00001CA6  4E75                    1313      RTS                             *whoosh~
00001CA8                          1314   
00001CA8                          1315      
00001CA8                          1316  sourceEA                            *output the Source EA
00001CA8  3604                    1317      MOVE.W  D4,D3                   *Put the original opcode into D3
00001CAA  3403                    1318      MOVE.W  D3,D2                   *Copy that into D2
00001CAC                          1319      
00001CAC  E65A                    1320      ROR.W   #3,D2                   *Whoo~ Rotating~
00001CAE  C4BC 00000007           1321      AND.L   #$00000007,D2           *D2 has Mode
00001CB4                          1322      
00001CB4                          1323  
00001CB4  C6BC 00000007           1324      AND.L   #$00000007,D3           *D3 has Register
00001CBA                          1325  
00001CBA                          1326   
00001CBA                          1327  DnMode                          *Is the Mode a Data Register?
00001CBA  4281                    1328      CLR.L   D1
00001CBC                          1329      
00001CBC  B43C 0000               1330      CMP.B   #0,D2
00001CC0  6600 0018               1331      BNE     AnMode
00001CC4                          1332      
00001CC4  43F9 00001EC7           1333      LEA     outputDn,A1         *outputs "D" onto console
00001CCA  103C 000E               1334      MOVE.B  #14,D0
00001CCE  4E4F                    1335      TRAP    #15
00001CD0                          1336  
00001CD0  1203                    1337      MOVE.B  D3,D1               *outputs the register, whatever the numeric value is
00001CD2  103C 0003               1338      MOVE.B  #3,D0
00001CD6  4E4F                    1339      TRAP    #15
00001CD8                          1340      
00001CD8  4E75                    1341      RTS                         *wooo~
00001CDA                          1342    
00001CDA                          1343  AnMode                          *Mode is an Address Register?
00001CDA  B43C 0001               1344      CMP.B   #1,D2
00001CDE  6600 0018               1345      BNE     deRefAnMode
00001CE2                          1346      
00001CE2  43F9 00001EC5           1347      LEA     outputAn,A1         *Outputs "A" onto console
00001CE8  103C 000E               1348      MOVE.B  #14,D0
00001CEC  4E4F                    1349      TRAP    #15
00001CEE                          1350      
00001CEE  1203                    1351      MOVE.B  D3,D1               *Outputs the register value
00001CF0  103C 0003               1352      MOVE.B  #3,D0
00001CF4  4E4F                    1353      TRAP    #15
00001CF6                          1354      
00001CF6  4E75                    1355      RTS                         *psssh
00001CF8                          1356      
00001CF8                          1357  deRefAnMode                     *Mode is a (A0)?
00001CF8  B43C 0002               1358      CMP.B   #2,D2               
00001CFC  6600 0024               1359      BNE     immediateData
00001D00                          1360      
00001D00  43F9 00001EC0           1361      LEA     outputdeRefAn1,A1   *Outputs "(A" onto console
00001D06  103C 000E               1362      MOVE.B  #14,D0
00001D0A  4E4F                    1363      TRAP    #15
00001D0C                          1364      
00001D0C  1203                    1365      MOVE.B  D3,D1               *outputs register value
00001D0E  103C 0003               1366      MOVE.B  #3,D0
00001D12  4E4F                    1367      TRAP    #15
00001D14                          1368      
00001D14  43F9 00001EC3           1369      LEA     outputdeRefAn2,A1   *makes it pretty by outputting ")"
00001D1A  103C 000E               1370      MOVE.B  #14,D0
00001D1E  4E4F                    1371      TRAP    #15
00001D20                          1372      
00001D20  4E75                    1373      RTS                         *=-=
00001D22                          1374      
00001D22                          1375  immediateData                   *Mode is an #<data>
00001D22  B43C 0007               1376      CMP.B   #7,D2               *Mode for #<data> is 111
00001D26  6600 00AE               1377      BNE     DONE                
00001D2A                          1378      
00001D2A  B63C 0004               1379      CMP.B   #4,D3               *Register for #<data> is 100
00001D2E  6600 00A6               1380      BNE     DONE
00001D32                          1381                                 
00001D32  43F9 00001EC9           1382      LEA     outputPound,A1      *Outputs "#"
00001D38  103C 000E               1383      MOVE.B  #14,D0
00001D3C  4E4F                    1384      TRAP    #15   
00001D3E                          1385      
00001D3E  BE3C 0001               1386      CMP.B   #1,D7
00001D42  6700 0008               1387      BEQ     immeDataLong
00001D46                          1388      
00001D46  361D                    1389      MOVE.W  (A5)+,D3
00001D48                          1390      
00001D48  6000 0004               1391      BRA     immediateDatapt2
00001D4C                          1392  
00001D4C                          1393  immeDataLong
00001D4C  261D                    1394      MOVE.L  (A5)+,D3    
00001D4E                          1395      
00001D4E                          1396      
00001D4E                          1397  immediateDatapt2               *Outputs register value
00001D4E  2203                    1398      MOVE.L  D3,D1
00001D50  103C 0003               1399      MOVE.B  #3,D0
00001D54  4E4F                    1400      TRAP    #15
00001D56                          1401  
00001D56  4E75                    1402      RTS                         *~owo~
00001D58                          1403      
00001D58                          1404  
00001D58                          1405  addDestinationEA                *Since ADD only has data register in dest area
00001D58  3604                    1406      MOVE.W  D4,D3
00001D5A                          1407      
00001D5A  3403                    1408      MOVE.W  D3,D2
00001D5C                          1409      
00001D5C  720A                    1410      MOVE.L  #10,D1
00001D5E  E37A                    1411      ROL.W   D1,D2
00001D60  C4BC 00000007           1412      AND.L   #$00000007,D2       *D2 has mode
00001D66                          1413      
00001D66                          1414      
00001D66  EF5B                    1415      ROL.W   #7,D3
00001D68  C6BC 00000007           1416      AND.L   #$00000007,D3       *D3 has register
00001D6E                          1417      
00001D6E                          1418  DnRegister                      *For ADD only, since it only has Dn 
00001D6E  43F9 00001EC7           1419      LEA     outputDn,A1         *outputs "D"
00001D74  103C 000E               1420      MOVE.B  #14,D0
00001D78  4E4F                    1421      TRAP    #15
00001D7A                          1422      
00001D7A  1203                    1423      MOVE.B  D3,D1               *Outputs register value
00001D7C  103C 0003               1424      MOVE.B  #3,D0
00001D80  4E4F                    1425      TRAP    #15
00001D82                          1426      
00001D82  4E75                    1427      RTS
00001D84                          1428  
00001D84                          1429  moveDestinationEA               *Destination output for MOVE
00001D84  3604                    1430      MOVE.W  D4,D3
00001D86  3403                    1431      MOVE.W  D3,D2
00001D88                          1432      
00001D88  EF5B                    1433      ROL.W   #7,D3
00001D8A  C6BC 00000007           1434      AND.L   #$00000007,D3       *D3 has Register
00001D90                          1435      
00001D90  323C 000A               1436      MOVE.W  #10,D1      
00001D94  E37A                    1437      ROL.W   D1,D2               *D2 has Mode
00001D96  C4BC 00000007           1438      AND.L   #$00000007,D2
00001D9C                          1439      
00001D9C  6000 FF1C               1440      BRA     DnMode              *output what it is, bra
00001DA0                          1441      
00001DA0                          1442  addaDestEA                      *Sets up the dest mode to be proper
00001DA0  3604                    1443      MOVE.W  D4,D3               *Get the original code again
00001DA2  3403                    1444      MOVE.W  D3,D2
00001DA4                          1445      
00001DA4  EF5B                    1446      ROL.W   #7,D3               
00001DA6  C6BC 00000007           1447      AND.L   #$00000007,D3       *D3 has register
00001DAC                          1448      
00001DAC  323C 000A               1449      MOVE.W  #10,D1
00001DB0  E37A                    1450      ROL.W   D1,D2               *Have to AND it by 1, since the mode for ADDA
00001DB2  C4BC 00000001           1451      AND.L   #$00000001,D2       *is always an Address
00001DB8                          1452      
00001DB8  6000 FF00               1453      BRA     DnMode
00001DBC                          1454      
00001DBC                          1455  pageContinue
00001DBC  43F9 00001F0A           1456      LEA     outputContinue,A1
00001DC2  103C 000E               1457      MOVE.B  #14,D0
00001DC6  4E4F                    1458      TRAP    #15
00001DC8  103C 0005               1459      MOVE.B  #5,D0
00001DCC  4E4F                    1460      TRAP    #15
00001DCE  16BC 001E               1461      MOVE.B  #line_count,(A3)
00001DD2  4EF8 115C               1462      JMP     getOpCode
00001DD6                          1463      
00001DD6                          1464  DONE
00001DD6  BCCD                    1465      CMP.W   A5,A6
00001DD8  6D00 0012               1466      BLT     END   
00001DDC  43F9 00001ED2           1467      LEA     outputNextLine,A1
00001DE2  103C 000E               1468      MOVE.B  #14,D0
00001DE6  4E4F                    1469      TRAP    #15 
00001DE8  4EF8 115C               1470      JMP     getOpCode
00001DEC                          1471      
00001DEC                          1472  END
00001DEC  43F9 00001ED2           1473      LEA     outputNextLine,A1
00001DF2  103C 000E               1474      MOVE.B  #14,D0
00001DF6  4E4F                    1475      TRAP    #15
00001DF8                          1476  
00001DF8  43F9 00001EF5           1477      LEA     outputEnd,A1
00001DFE  103C 000E               1478      MOVE.B  #14,D0
00001E02  4E4F                    1479      TRAP    #15
00001E04  FFFF FFFF               1480      SIMHALT             ; halt simulator
00001E08                          1481  
00001E08                          1482  * Put variables and constants here
00001E08                          1483  
00001E08= 43D2                    1484  code        DC.W    $43D2
00001E0A                          1485  
00001E0A                          1486  
00001E0A= D640                    1487  addCode     DC.W    $D640
00001E0C                          1488  
00001E0C= 303C                    1489  moveCode1   DC.W    $303C
00001E0E= 0011                    1490  moveCode2   DC.W    $0011
00001E10                          1491  
00001E10= 41 44 44 00             1492  outputADD   DC.B    'ADD',0
00001E14= 41 00                   1493  outputADDA  DC.B    'A',0
00001E16= 53 55 42 00             1494  outputSUB   DC.B    'SUB',0
00001E1A= 53 55 42 51 00          1495  outputSUBQ  DC.B    'SUBQ',0
00001E1F= 4D 4F 56 45 00          1496  outputMOVE  DC.B    'MOVE',0
00001E24= 4D 4F 56 45 41 00       1497  outputMOVEA DC.B    'MOVEA',0
00001E2A= 4D 4F 56 45 4D 2E ...   1498  outputMOVEMW DC.B   'MOVEM.W ',0
00001E33= 4D 4F 56 45 4D 2E ...   1499  outputMOVEML DC.B   'MOVEM.L ',0
00001E3C= 4D 55 4C 53 20 00       1500  outputMULS DC.B     'MULS ',0
00001E42= 44 49 56 53 2E 57 ...   1501  outputDIVSW DC.B    'DIVS.W ',0
00001E4A= 4E 4F 50 20 00          1502  outputNOP   DC.B    'NOP ',0
00001E4F= 4A 53 52 20 00          1503  outputJSR   DC.B    'JSR ',0
00001E54= 52 54 53 20 00          1504  outputRTS   DC.B    'RTS ',0
00001E59= 4C 45 41 20 00          1505  outputLEA   DC.B    'LEA ',0
00001E5E= 44 41 54 41 20 00       1506  outputData  DC.B    'DATA ',0
00001E64= 4E 45 47 00             1507  outputNEG   DC.B    'NEG',0
00001E68= 42 52 41 20 00          1508  outputBRA   DC.B    'BRA ',0
00001E6D= 4F 52 49 00             1509  outputORI   DC.B    'ORI',0
00001E71= 4F 52 00                1510  outputOR    DC.B    'OR',0
00001E74= 45 4F 52 00             1511  outputEOR   DC.B    'EOR',0
00001E78= 43 4D 50 49 00          1512  outputCMPI  DC.B    'CMPI',0
00001E7D= 43 4D 50 00             1513  outputCMP   DC.B    'CMP',0
00001E81= 42 43 4C 52 20 00       1514  outputBCLR  DC.B    'BCLR ',0
00001E87= 4C 53 00                1515  outputLS    DC.B    'LS',0
00001E8A= 41 53 00                1516  outputAS    DC.B    'AS',0
00001E8D= 52 4F 00                1517  outputRO    DC.B    'RO',0
00001E90= 4C 00                   1518  outputLeft  DC.B    'L',0
00001E92= 52 00                   1519  outputRight DC.B    'R',0
00001E94= 41 30 2D 41 37 2F ...   1520  outputRegList DC.B  'A0-A7/D0-D7',0
00001EA0                          1521  
00001EA0= 42 43 53 20 00          1522  outputBCS   DC.B    'BCS ',0
00001EA5= 42 47 45 20 00          1523  outputBGE   DC.B    'BGE ',0
00001EAA= 42 43 54 20 00          1524  outputBCT   DC.B    'BCT ',0
00001EAF= 42 56 43 20 00          1525  outputBVC   DC.B    'BVC ',0
00001EB4                          1526  
00001EB4= 2E 42 20 00             1527  outputByte  DC.B    '.B ',0
00001EB8= 2E 57 20 00             1528  outputWord  DC.B    '.W ',0
00001EBC= 2E 4C 20 00             1529  outputLong  DC.B    '.L ',0
00001EC0                          1530  
00001EC0= 28 41 00                1531  outputdeRefAn1   DC.B    '(A',0
00001EC3= 29 00                   1532  outputdeRefAn2   DC.B    ')',0
00001EC5                          1533  
00001EC5= 41 00                   1534  outputAn    DC.B    'A',0
00001EC7= 44 00                   1535  outputDn    DC.B    'D',0
00001EC9= 23 00                   1536  outputPound DC.B    '#',0
00001ECC= 0000                    1537  outputCurrentAddr   DC.W    $0000
00001ECE                          1538  
00001ECE= 2C 00                   1539  outputComma     DC.B    ',',0
00001ED0= 2E 00                   1540  outputDot       DC.B    '.',0
00001ED2= 20 0D 0A 00             1541  outputNextLine  DC.B    ' ',CR,LF,0
00001ED6= 20 00                   1542  outputSpace     DC.B    ' ',0
00001ED8= 3A 20 00                1543  outputColon     DC.B    ': ',0
00001EDB= 2D 00                   1544  outputNegSign   DC.B    '-',0
00001EDD= 44 69 73 61 73 73 ...   1545  outputStart     DC.B    'Disassembling Initiated',0
00001EF5= 50 72 6F 67 72 61 ...   1546  outputEnd       DC.B    'Program Disassembled',0
00001F0A= 50 72 65 73 73 20 ...   1547  outputContinue  DC.B    'Press ENTER key to continue disassembling',CR,LF,0
00001F36                          1548      END    $1000        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADDADESTEA          1DA0
ADDALOPMODE         1C4C
ADDAORDER           1BDC
ADDAWOPMODE         1C2E
ADDCODE             1E0A
ADDDESTINATIONEA    1D58
ADDMETHOD           15CA
ADDOPCODE           15C2
ADDR_VAL_TEMP       1150
ALTOPMODE           1C12
ALTORDER            1BC0
ANMODE              1CDA
ANMODESUB           130E
ASCII_MASK          FF
ASDOPCODE           1832
BCCDISPLACEMENT     19F0
BCCMETHOD           1B3E
BCCOPCODE           1B36
BCLRIMMEDIATE       14A4
BCLROPCODE          145C
BCS                 1B62
BCT                 1B82
BGE                 1B72
BITDISPLACEMENT16   1A44
BITDISPLACEMENT32   1ABA
BRAMETHOD           19E4
BRAOPCODE           19D8
BVC                 1B92
BYTEOPMODE          1C6C
CMPIMETHOD          142A
CMPIOPCODE          1422
CMPOPCODE           17AE
CODE                1E08
COUNTER             0
CR                  D
DATAOPCODE          1BA2
DEREFANMODE         1CF8
DISPLAY8FORSUBQ     16BC
DIVSWCHECK          1728
DIVSWOPCODE         1728
DNMODE              1CBA
DNREGISTER          1D6E
DONE                1DD6
DOTOPMODE           1BF8
END                 1DEC
END_ADDR_MSG        111F
END_VAL             1158
EORMETHOD           1778
EOROPCODE           1766
GETANMODE           12D2
GETOPCODE           115C
GET_ADDR            108C
IMMEDATALONG        1D4C
IMMEDIATEDATA       1D22
IMMEDIATEDATAPT2    1D4E
JSRMETHOD           11DE
JSROPCODE           11CE
JSROUTPUTDEREF      11FA
JSROUTPUTLABEL      1210
LEAOPCODE           136C
LEAOUTPUT           13AC
LEFTRIGHT           18AA
LF                  A
LINE_COUNT          1E
LONGOPMODE          1C98
LOOP                10A8
LSDMETHOD           17FE
LSDOPCODE           17F6
MASK                F
MOVEALONGMETHOD     1588
MOVEAWORDMETHOD     1528
MOVEBYTEMETHOD      14CC
MOVEBYTEOPCODE      14C4
MOVECODE1           1E0C
MOVECODE2           1E0E
MOVEDESTINATIONEA   1D84
MOVELONGMETHODPT2   1598
MOVELONGOPCODE      1560
MOVELONGOPCODEMETHOD  1568
MOVEMLMETHODMEMTOREG  1344
MOVEMLMETHODREGTOMEM  131C
MOVEMLOUTPUT        136C
MOVEMOPCODE         1222
MOVEMOUTPUTMEMTOREG  131C
MOVEMWEA            12D4
MOVEMWMETHODMEMTOREG  1272
MOVEMWMETHODREGTOMEM  124A
MOVEMWOUTPUT        129A
MOVEWORDMETHOD      1508
MOVEWORDMETHODPT2   1538
MOVEWORDOPCODE      1500
MULSLMETHOD         19A0
MULSLOPCODE         19A0
MULSOUTPUT          1978
MULSWMETHOD         1968
MULSWOPCODE         1950
NEGBIT16            1A80
NEGBIT32            1AFA
NEGMETHOD           19AC
NEGOPCODE           19A0
NOPOPCODE           119E
ORIMETHOD           13E8
ORIOPCODE           13D4
ORMETHOD            16F2
OROPCODE            16D6
OUTPUTADD           1E10
OUTPUTADDA          1E14
OUTPUTAN            1EC5
OUTPUTAS            1E8A
OUTPUTBCLR          1E81
OUTPUTBCS           1EA0
OUTPUTBCT           1EAA
OUTPUTBGE           1EA5
OUTPUTBRA           1E68
OUTPUTBVC           1EAF
OUTPUTBYTE          1EB4
OUTPUTCMP           1E7D
OUTPUTCMPI          1E78
OUTPUTCOLON         1ED8
OUTPUTCOMMA         1ECE
OUTPUTCONTINUE      1F0A
OUTPUTCURRENTADDR   1ECC
OUTPUTDATA          1E5E
OUTPUTDEREFAN1      1EC0
OUTPUTDEREFAN2      1EC3
OUTPUTDIVSW         1E42
OUTPUTDN            1EC7
OUTPUTDOT           1ED0
OUTPUTEND           1EF5
OUTPUTEOR           1E74
OUTPUTJSR           1E4F
OUTPUTLEA           1E59
OUTPUTLEFT          1E90
OUTPUTLONG          1EBC
OUTPUTLS            1E87
OUTPUTMOVE          1E1F
OUTPUTMOVEA         1E24
OUTPUTMOVEML        1E33
OUTPUTMOVEMW        1E2A
OUTPUTMULS          1E3C
OUTPUTNEG           1E64
OUTPUTNEGSIGN       1EDB
OUTPUTNEXTLINE      1ED2
OUTPUTNOP           1E4A
OUTPUTOR            1E71
OUTPUTORI           1E6D
OUTPUTPOUND         1EC9
OUTPUTREG           12EA
OUTPUTREGLIST       1E94
OUTPUTRIGHT         1E92
OUTPUTRO            1E8D
OUTPUTRTS           1E54
OUTPUTSPACE         1ED6
OUTPUTSTART         1EDD
OUTPUTSUB           1E16
OUTPUTSUBQ          1E1A
OUTPUTWORD          1EB8
PAGECONTINUE        1DBC
RET_SA              10F2
RIGHTRIGHT          18CA
RODOPCODE           186E
RTSOPCODE           11B6
RTS_STRTADDR        10C6
SHIFTDESTEA         1932
SHIFTIMMEDIATEEA    190A
SHIFTIMMEDIATEEIGHT  1928
SHIFTSOPCODE        17E4
SHIFTSOURCEEA       18D8
SOURCEEA            1CA8
STACK               B000
START_ADDR_MSG      10F4
STRIP_ASCII         10CE
ST_VAL              1154
SUB30               10EE
SUB37               10E6
SUBMETHOD           1610
SUBOPCODE           1608
SUBQDATA            168A
SUBQMETHOD          164E
SUBQOPCODE          1646
WORDOPMODE          1C82
XXXMODESUB          1318
