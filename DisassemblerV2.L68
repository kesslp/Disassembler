00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.02
Created On: 6/3/2015 12:51:36 AM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      :  Disassembler
00000000                             3  * Written by :  Paul Kessler and Joscelyn Kim
00000000                             4  * Date       :  199X
00000000                             5  * Description:  This program takes assembled code ans disassembles it into 
00000000                             6  *               assembly language readable by humans.  The program will be 
00000000                             7  *               disassembed in a user defined address range
00000000                             8  *-----------------------------------------------------------
00000000  =0000000D                  9  CR          EQU $0D
00000000  =0000000A                 10  LF          EQU $0A
00000000                            11  
00000000  =0000000F                 12  mask        EQU $0000000F
00000000  =000000FF                 13  ascii_mask  EQU $00FF
00000000  =00000000                 14  counter     EQU 0
00000000  =0000B000                 15  stack       EQU $B000
00000000  =0000001E                 16  line_count  EQU 30
00000000                            17  
00000000                            18  *---- User input address range -----
00000000                            19  
00001000                            20                  ORG         $1000                       * start of the program
00001000  4FF9 0000B000             21                  LEA         stack,SP                    * initialize the stack
00001006  4200                      22                  CLR.B       D0                          * clear D0
00001008  43F9 00001120             23                  LEA         start_addr_msg, A1          * ask for starting address
0000100E  103C 000E                 24                  MOVE.B      #14, D0
00001012  4E4F                      25                  TRAP        #15                         
00001014  103C 0002                 26                  MOVE.B      #2, D0                      * take in user input as string
00001018  4E4F                      27                  TRAP        #15
0000101A  23D1 0000117C             28                  MOVE.L      (A1),ascii_val_start        * store ascii address in DC
00001020  48A7 FFFE                 29                  MOVEM.W     A0-A6/D0-D7,-(SP)           * push registers on the stack
00001024  4EB9 000010AA             30                  JSR         get_addr                    * strip ascii characters to hex
0000102A  4C9F 7FFF                 31                  MOVEM.W     (SP)+, A0-A6/D0-D7          * restore registers
0000102E  33F9 00001180 00001182    32                  MOVE.W      addr_val_temp, st_val       * store address value into st_val
00001038  3A39 00001182             33                  MOVE.W      st_val, D5                  * check if address is correct
0000103E  42B9 0000117C             34                  CLR.L       ascii_val_start             * clr DC for end address input
00001044                            35                  
00001044  43F9 0000114B             36                  LEA         end_addr_msg, A1            * ask for ending address
0000104A  103C 000E                 37                  MOVE.B      #14, D0
0000104E  4E4F                      38                  TRAP        #15
00001050  224C                      39                  MOVEA.L     A4,A1                       * reset address at A1 to get user input
00001052  103C 0002                 40                  MOVE.B      #2, D0                      * take address as a string
00001056  4E4F                      41                  TRAP        #15
00001058  23D1 0000117C             42                  MOVE.L      (A1),ascii_val_start        * save in DC
0000105E  48A7 FFFE                 43                  MOVEM.W     A0-A6/D0-D7,-(SP)           * push registers on the stack
00001062  4EB9 000010AA             44                  JSR         get_addr                    * strip ascii address into hex
00001068  4C9F 7FFF                 45                  MOVEM.W     (SP)+, A0-A6/D0-D7          * restore the registers
0000106C  33F9 00001180 00001184    46                  MOVE.W      addr_val_temp, end_val      * store address in end_val
00001076  3C39 00001184             47                  MOVE.W      end_val, D6                 * check if result is correct
0000107C  3A79 00001182             48                  MOVEA.W     st_val,A5                   * store start val in A5
00001082  3C79 00001184             49                  MOVEA.W     end_val,A6                  * store end val in A6
00001088                            50                  
00001088  43F9 00001C3B             51                  LEA         outputStart,A1              *ouput starting messaage
0000108E  103C 000E                 52                  MOVE.B      #14,D0          
00001092  4E4F                      53                  TRAP        #15
00001094                            54                  
00001094  43F9 00001C30             55                  LEA         outputNextLine,A1           *output nextline
0000109A  103C 000E                 56                  MOVE.B      #14,D0
0000109E  4E4F                      57                  TRAP        #15
000010A0                            58                  
000010A0  16BC 001E                 59                  MOVE.B      #line_count,(A3)
000010A4  5513                      60                  SUBQ.B      #2,(A3)
000010A6  6000 00DE                 61                  BRA         getOpCode                   * Jump to getOpCode sub routine
000010AA                            62  
000010AA                            63                  
000010AA                            64  
000010AA                            65  get_addr                            
000010AA  4247                      66                  CLR.W       D7                          * we need D7 to be 0
000010AC  43F9 0000117C             67                  LEA         ascii_val_start, A1         * load ascii value to be stripped
000010B2  1019                      68                  MOVE.B      (A1)+,D0                    * store first byte in D0
000010B4  0240 00FF                 69                  ANDI.W      #ascii_mask,D0              * mask the first byte
000010B8  4EB9 000010FA             70                  JSR         strip_ascii                 * strip ascii char into hex
000010BE  E140                      71                  ASL.W       #8,D0                       * shift left 8
000010C0  E940                      72                  ASL.W       #4,D0                       * shift left 4
000010C2  8E40                      73                  OR.W        D0,D7
000010C4  1019                      74                  MOVE.B      (A1)+,D0                    * move next byte into D0
000010C6  0240 00FF                 75                  ANDI.W      #ascii_mask,D0              * mask the second byte
000010CA  4EB9 000010FA             76                  JSR         strip_ascii                 * strip ascii to hex
000010D0  E140                      77                  ASL.W       #8,D0                       * shift left 8
000010D2  8E40                      78                  OR.W        D0,D7
000010D4  1019                      79                  MOVE.B      (A1)+,D0                    * move next byte into D0
000010D6  0240 00FF                 80                  ANDI.W      #ascii_mask,D0              * mask byte in D0
000010DA  4EB9 000010FA             81                  JSR         strip_ascii                 * strip ascii into hex
000010E0  E940                      82                  ASL.W       #4,D0                       * shift left 4
000010E2  8E40                      83                  OR.W        D0,D7
000010E4  1019                      84                  MOVE.B      (A1)+,D0                    * move final byte into D0
000010E6  0240 00FF                 85                  ANDI.W      #ascii_mask,D0              * mask final byte
000010EA  4EB9 000010FA             86                  JSR         strip_ascii                 * strip it to hex
000010F0  8E40                      87                  OR.W        D0,D7
000010F2  33C7 00001180             88                  MOVE.W      D7,addr_val_temp            * store hex address in temp value
000010F8  4E75                      89                  RTS                                     * return
000010FA                            90       
000010FA                            91                  
000010FA  B03C 0039                 92  strip_ascii     CMP.B       #$39,D0                     *Is it in range of 0-9?
000010FE  6F00 001A                 93                  BLE         sub30                       *It's a number
00001102  B03C 0046                 94                  CMP.B       #$46,D0                     *Is it A...F?
00001106  6F00 000A                 95                  BLE         sub37                       *It's A...F
0000110A  0400 0057                 96                  SUB.B       #$57,D0                     *It's a...f
0000110E  6000 000E                 97                  BRA         ret_sa                      *Go back
00001112  0400 0037                 98  sub37           SUB.B       #$37,D0                     *Strip 37
00001116  6000 0006                 99                  BRA         ret_sa                      *Go back
0000111A  0400 0030                100  sub30           SUB.B       #$30,D0                     *Strip 30
0000111E  4E75                     101  ret_sa          RTS                                     *Go back
00001120                           102  
00001120                           103  
00001120                           104  *---- Data ----
00001120                           105  
00001120= 45 6E 74 65 72 20 ...    106  start_addr_msg  DC.B    'Enter a starting address to disassemble: $', 0
0000114B= 45 6E 74 65 72 20 ...    107  end_addr_msg    DC.B    'Enter a ending address to stop disassembling: $', 0
0000117C= 0000                     108  ascii_val_start DC.W    $0000
0000117E= 0000                     109  ascii_val_end   DC.W    $0000
00001180= 0000                     110  addr_val_temp   DC.W    $0000
00001182= 0000                     111  st_val          DC.W    $0000
00001184= 0000                     112  end_val         DC.W    $0000
00001186                           113  
00001186                           114  *--- Data end ----
00001186                           115  
00001186                           116  
00001186                           117  * Put program  here
00001186                           118  getOpCode                        *Gets opcode
00001186                           119      *LEA     code,A0             *Loads "code" which is the op code
00001186                           120      
00001186  4287                     121      CLR.L   D7
00001188  4286                     122      CLR.L   D6
0000118A  4283                     123      CLR.L   D3
0000118C  4281                     124      CLR.L   D1
0000118E  4280                     125      CLR.L   D0
00001190  4285                     126      CLR.L   D5
00001192  4284                     127      CLR.L   D4
00001194                           128      
00001194  5313                     129      SUBQ.B  #1,(A3)
00001196  0C13 0000                130      CMP.B   #0,(A3)
0000119A  6700 099C                131      BEQ     pageContinue
0000119E                           132      
0000119E  320D                     133      MOVE.W  A5,D1               *move starting addr into D1
000011A0  103C 000F                134      MOVE.B  #15,D0              *convert number into hex and output to console
000011A4  143C 0010                135      MOVE.B  #16,D2
000011A8  4E4F                     136      TRAP    #15    
000011AA  381D                     137      MOVE.W  (A5)+,D4            *move data at starting addr to D4
000011AC                           138      
000011AC  4281                     139      CLR.L   D1
000011AE                           140      
000011AE  43F9 00001C36            141      LEA     outputColon,A1      *output the colon and a space to the console
000011B4  103C 000E                142      MOVE.B  #14,D0
000011B8  4E4F                     143      TRAP    #15
000011BA                           144      
000011BA  2248                     145      MOVEA.L A0,A1               *used to clear A0
000011BC  3404                     146      MOVE.W  D4,D2               *gets put into D4 and D2
000011BE                           147      
000011BE  E95A                     148      ROL.W   #4,D2               *rotate the first 4 significant bits to lower 4 bits
000011C0                           149      
000011C0  C4BC 0000000F            150      AND.L   #mask,D2            *mask it to get only the first byte
000011C6                           151      
000011C6  1A02                     152      MOVE.B  D2,D5               *put that value into D5
000011C8                           153  
000011C8                           154  nopOpCode
000011C8  B87C 4E71                155      CMP.W   #$4E71,D4
000011CC  6600 0012                156      BNE     rtsOpCode
000011D0                           157      
000011D0  43F9 00001BAE            158      LEA     outputNOP,A1
000011D6  103C 000E                159      MOVE.B  #14,D0
000011DA  4E4F                     160      TRAP    #15
000011DC  6000 0974                161      BRA     DONE
000011E0                           162      
000011E0                           163  rtsOpCode
000011E0  B87C 4E75                164      CMP.W   #$4E75,D4
000011E4  6600 000E                165      BNE     leaOpCode
000011E8                           166      
000011E8  43F9 00001BB3            167      LEA     outputRTS,A1
000011EE  103C 000E                168      MOVE.B  #14,D0
000011F2  4E4F                     169      TRAP    #15
000011F4                           170      
000011F4                           171  leaOpCode
000011F4  BA3C 0004                172      CMP.B   #4,D5
000011F8  6600 0038                173      BNE     oriOpCode
000011FC  3604                     174      MOVE.W  D4,D3
000011FE  E15B                     175      ROL.W   #8,D3
00001200  B63C 0044                176      CMP.B   #$44,D3
00001204  6700 0478                177      BEQ     negMethod
00001208  4283                     178      CLR.L   D3
0000120A                           179      
0000120A  43F9 00001BB8            180      LEA     outputLEA,A1
00001210  103C 000E                181      MOVE.B  #14,D0
00001214  4E4F                     182      TRAP    #15
00001216                           183      
00001216  4EB9 00001A24            184      JSR     sourceEA
0000121C                           185      
0000121C  43F9 00001C2C            186      LEA     outputComma,A1
00001222  103C 000E                187      MOVE.B  #14,D0
00001226  4E4F                     188      TRAP    #15
00001228                           189      
00001228  4EB9 00001B1C            190      JSR     addaDestEA
0000122E                           191      
0000122E  6000 0922                192      BRA     DONE
00001232                           193      
00001232                           194  oriOpCode                       *OR opcode
00001232  BA3C 0000                195      CMP.B   #0,D5               
00001236  6600 00EA                196      BNE     moveByteOpCode      *if not, go to next opcode
0000123A                           197  
0000123A                           198  *-------------------------------------------------Change this when merging         
0000123A  3404                     199      MOVE.W  D4,D2
0000123C  E15A                     200      ROL.W   #8,D2
0000123E  C4BC 0000000F            201      AND.L   #$0000000F,D2
00001244                           202      
00001244  2A02                     203      MOVE.L  D2,D5
00001246                           204      
00001246                           205  oriMethod
00001246  BA3C 0000                206      CMP.B   #0,D5
0000124A  6600 0034                207      BNE     cmpiOpCode
0000124E                           208      
0000124E  43F9 00001BCC            209      LEA     outputORI,A1
00001254  103C 000E                210      MOVE.B  #14,D0
00001258  4E4F                     211      TRAP    #15
0000125A                           212      
0000125A  4EB9 00001974            213      JSR     dotOpMode
00001260                           214          
00001260  7407                     215      MOVE.L  #7,D2
00001262  7604                     216      MOVE.L  #4,D3
00001264  4EB9 00001A9E            217      JSR     immediateData
0000126A                           218      
0000126A  43F9 00001C2C            219      LEA     outputComma,A1
00001270  103C 000E                220      MOVE.B  #14,D0
00001274  4E4F                     221      TRAP    #15
00001276                           222      
00001276  4EB9 00001A24            223      JSR     sourceEA
0000127C  6000 08D4                224      BRA     DONE
00001280                           225  
00001280                           226  cmpiOpCode
00001280  BA3C 000C                227      CMP.B   #12,D5
00001284  6600 0034                228      BNE     bclrOpCode
00001288                           229      
00001288                           230  cmpiMethod
00001288  43F9 00001BD7            231      LEA     outputCMPI,A1
0000128E  103C 000E                232      MOVE.B  #14,D0
00001292  4E4F                     233      TRAP    #15
00001294                           234      
00001294  4EB9 00001974            235      JSR     dotOpMode
0000129A                           236      
0000129A  7407                     237      MOVE.L  #7,D2
0000129C  7604                     238      MOVE.L  #4,D3
0000129E  4EB9 00001A9E            239      JSR     immediateData
000012A4                           240      
000012A4  43F9 00001C2C            241      LEA     outputComma,A1
000012AA  103C 000E                242      MOVE.B  #14,D0
000012AE  4E4F                     243      TRAP    #15
000012B0                           244      
000012B0  4EB9 00001A24            245      JSR     sourceEA
000012B6  6000 089A                246      BRA     DONE
000012BA                           247      
000012BA                           248  bclrOpCode
000012BA  43F9 00001BE0            249      LEA     outputBCLR,A1
000012C0  103C 000E                250      MOVE.B  #14,D0
000012C4  4E4F                     251      TRAP    #15
000012C6                           252      
000012C6  720A                     253      MOVE.L  #10,D1
000012C8  2A04                     254      MOVE.L  D4,D5
000012CA  E37D                     255      ROL.W   D1,D5
000012CC  CABC 00000007            256      AND.L   #$00000007,D5
000012D2                           257      
000012D2  BA3C 0002                258      CMP.B   #2,D5
000012D6  6700 002A                259      BEQ     bclrImmediate
000012DA                           260      
000012DA  7400                     261      MOVE.L  #0,D2
000012DC  2604                     262      MOVE.L  D4,D3
000012DE  EF5B                     263      ROL.W   #7,D3
000012E0  C6BC 00000007            264      AND.L   #$00000007,D3
000012E6                           265      
000012E6  4EB9 00001A36            266      JSR     DnMode
000012EC                           267      
000012EC  43F9 00001C2C            268      LEA     outputComma,A1
000012F2  103C 000E                269      MOVE.B  #14,D0
000012F6  4E4F                     270      TRAP    #15
000012F8                           271      
000012F8  4EB9 00001A24            272      JSR     sourceEA
000012FE                           273      
000012FE  6000 0852                274      BRA     DONE
00001302                           275          
00001302                           276  bclrImmediate
00001302                           277      
00001302  7407                     278      MOVE.L  #7,D2
00001304  7604                     279      MOVE.L  #4,D3
00001306                           280      
00001306  4EB9 00001A9E            281      JSR     immediateData
0000130C                           282      
0000130C  43F9 00001C2C            283      LEA     outputComma,A1
00001312  103C 000E                284      MOVE.B  #14,D0
00001316  4E4F                     285      TRAP    #15
00001318                           286      
00001318  4EB9 00001A24            287      JSR     sourceEA
0000131E                           288      
0000131E  6000 0832                289      BRA     DONE    
00001322                           290    
00001322                           291  
00001322                           292      
00001322                           293  moveByteOpCode                  *MOVE.B opcode
00001322  BA3C 0001                294      CMP.B   #1,D5
00001326  6600 0036                295      BNE     moveWordOpCode 
0000132A                           296  
0000132A                           297  moveByteMethod                  *MOVE.B output
0000132A  43F9 00001B93            298      LEA     outputMOVE,A1       *Outputs "MOVE" onto console
00001330  103C 000E                299      MOVE.B  #14,D0
00001334  4E4F                     300      TRAP    #15
00001336                           301      
00001336  43F9 00001C12            302      LEA     outputByte,A1       *Outputs ".B" onto console
0000133C  103C 000E                303      MOVE.B  #14,D0
00001340  4E4F                     304      TRAP    #15
00001342                           305      
00001342  4EB9 00001A24            306      JSR     sourceEA            *Jump to subroutine sourceEA
00001348                           307      
00001348  43F9 00001C2C            308      LEA     outputComma,A1      *Outputs a comma onto console
0000134E  103C 000E                309      MOVE.B  #14,D0
00001352  4E4F                     310      TRAP    #15
00001354                           311      
00001354  4EB9 00001B00            312      JSR     moveDestinationEA   *Jump to subroutine moveDestinationEA
0000135A                           313      
0000135A  6000 07F6                314      BRA     DONE                *Yay done
0000135E                           315      
0000135E                           316  
0000135E                           317  moveWordOpCode                  *MOVE.W opcode
0000135E  BA3C 0003                318      CMP.B   #3,D5
00001362  6600 005A                319      BNE     moveLongOpCode
00001366                           320     
00001366                           321  moveWordMethod                  *MOVE.W output
00001366  3404                     322      MOVE.W  D4,D2               *D4 has the original word
00001368  323C 000A                323      MOVE.W  #10,D1              *Move the value 10 into D1 since ROL has issues with
0000136C  E37A                     324      ROL.W   D1,D2               *   immediate values > 8
0000136E                           325      
0000136E  B47C 0001                326      CMP.W   #1,D2               *If the rotated value is a 1, it's a MOVEA.W
00001372  6700 0012                327      BEQ     moveAWordMethod    
00001376                           328      
00001376  43F9 00001B93            329      LEA     outputMOVE,A1       *Outputs "MOVE." onto console
0000137C  103C 000E                330      MOVE.B  #14,D0
00001380  4E4F                     331      TRAP    #15
00001382  6000 0012                332      BRA     moveWordMethodpt2   *Go to the rest of the method~
00001386                           333      
00001386                           334  moveAWordMethod                 *MOVEA.W opcode
00001386  43F9 00001B98            335      LEA     outputMOVEA,A1      *Outputs "MOVEA" onto console
0000138C  103C 000E                336      MOVE.B  #14,D0
00001390  4E4F                     337      TRAP    #15
00001392  6000 0002                338      BRA     moveWordMethodpt2   *Go to the rest of the method~
00001396                           339      
00001396                           340  moveWordMethodpt2               *Part 2 of the MOVE/MOVEA.W series
00001396  43F9 00001C16            341      LEA     outputWord,A1       *Outputs ".W" onto console
0000139C  103C 000E                342      MOVE.B  #14,D0
000013A0  4E4F                     343      TRAP    #15
000013A2                           344      
000013A2  4EB9 00001A24            345      JSR     sourceEA            *Yay subroutines
000013A8                           346      
000013A8  43F9 00001C2C            347      LEA     outputComma,A1      *outputs a comma onto console
000013AE  103C 000E                348      MOVE.B  #14,D0
000013B2  4E4F                     349      TRAP    #15
000013B4                           350      
000013B4  4EB9 00001B00            351      JSR     moveDestinationEA   *Gotta check the destination~
000013BA                           352  
000013BA  6000 0796                353      BRA     DONE                *I'm done, bra
000013BE                           354  
000013BE                           355  moveLongOpCode                  *MOVE.L opcode
000013BE  BA3C 0002                356      CMP.B   #2,D5
000013C2  6600 005C                357      BNE     addOpCode
000013C6                           358      
000013C6                           359  moveLongOpCodeMethod            *MOVE.L output
000013C6  340A                     360      MOVE.W  A2,D2               *Gotta check if it's actually a MOVEA
000013C8  323C 000A                361      MOVE.W  #10,D1
000013CC  E37A                     362      ROL.W   D1,D2
000013CE                           363      
000013CE  B47C 0001                364      CMP.W   #1,D2
000013D2  6700 0012                365      BEQ     moveALongMethod   
000013D6                           366  
000013D6  43F9 00001B93            367      LEA     outputMOVE,A1       *outputs "MOVE" onto console
000013DC  103C 000E                368      MOVE.B  #14,D0
000013E0  4E4F                     369      TRAP    #15
000013E2                           370      
000013E2  6000 0012                371      BRA     moveLongMethodpt2   *Go to Part 2 of the MOVE series~
000013E6                           372      
000013E6                           373  moveALongMethod                 *MOVEA.L output
000013E6  43F9 00001B98            374      LEA     outputMOVEA,A1      *Outputs "MOVEA" onto console
000013EC  103C 000E                375      MOVE.B  #14,D0
000013F0  4E4F                     376      TRAP    #15
000013F2  6000 0002                377      BRA     moveLongMethodpt2   *Go to part 2~
000013F6                           378      
000013F6                           379  moveLongMethodpt2               *Part 2, the sequel(SQL?)
000013F6                           380      
000013F6  43F9 00001C1A            381      LEA     outputLong,A1       *Outputs ".L" onto console
000013FC  103C 000E                382      MOVE.B  #14,D0
00001400  4E4F                     383      TRAP    #15
00001402                           384      
00001402  5207                     385      ADD.B   #1,D7
00001404                           386      
00001404  4EB9 00001A24            387      JSR     sourceEA            *Go output source
0000140A                           388      
0000140A  43F9 00001C2C            389      LEA     outputComma,A1      *Yay commas
00001410  103C 000E                390      MOVE.B  #14,D0
00001414  4E4F                     391      TRAP    #15
00001416                           392      
00001416  4EB9 00001B00            393      JSR     moveDestinationEA    *Output destination
0000141C  6000 0734                394      BRA     DONE
00001420                           395  
00001420                           396  addOpCode                        *ADD opcode
00001420  BA3C 000D                397      CMP.B   #13,D5
00001424  6600 0040                398      BNE     subOpCode    
00001428                           399      
00001428                           400  addMethod                        *ADD output
00001428  43F9 00001B84            401      LEA     outputADD,A1         *Outputs "ADD" onto console
0000142E  103C 000E                402      MOVE.B  #14,D0
00001432  4E4F                     403      TRAP    #15
00001434                           404      
00001434  4EB9 00001974            405      JSR     dotOpMode           *Checks if it's a byte,word, or long
0000143A                           406      
0000143A  BC3C 0001                407      CMP.B   #1,D6               *If D6 == 1, the data register is the source
0000143E  6700 04FC                408      BEQ     altOrder            *   D6 was decided in dotOpMode(?)
00001442                           409      
00001442  BC3C 0002                410      CMP.B   #2,D6
00001446  6700 0510                411      BEQ     addaOrder           *go do ADDA stuff
0000144A                           412      
0000144A  4EB9 00001A24            413      JSR     sourceEA            *outputs what the source is
00001450                           414      
00001450  43F9 00001C2C            415      LEA     outputComma,A1      *Commas~~~
00001456  103C 000E                416      MOVE.B  #14,D0
0000145A  4E4F                     417      TRAP    #15
0000145C                           418      
0000145C  4EB9 00001AD4            419      JSR     addDestinationEA       *outputs what the destination is
00001462                           420      
00001462  6000 06EE                421      BRA     DONE
00001466                           422      
00001466                           423  subOpCode
00001466  BA3C 0009                424      CMP.B   #9,D5               *is it SUB?
0000146A  6600 0038                425      BNE     subQOpCode          *not SUB, check if SUBQ
0000146E                           426  
0000146E                           427  subMethod
0000146E  43F9 00001B8A            428      LEA     outputSUB,A1        *output SUB to the console
00001474  103C 000E                429      MOVE.B  #14,D0  
00001478  4E4F                     430      TRAP    #15
0000147A                           431  
0000147A  4EB9 00001974            432      JSR     dotOpMode           *check if its a B,W, or L
00001480                           433  
00001480  BC3C 0001                434      CMP.B   #1,D6               *if D6 == 1, the data register is the source
00001484  6700 04B6                435      BEQ     altOrder
00001488                           436  
00001488  4EB9 00001A24            437      JSR     sourceEA            *outputs what the source is
0000148E                           438  
0000148E  43F9 00001C2C            439      LEA     outputComma,A1      *commas
00001494  103C 000E                440      MOVE.B  #14,D0
00001498  4E4F                     441      TRAP    #15
0000149A                           442  
0000149A  4EB9 00001AD4            443      JSR     addDestinationEA    *outputs what ths destination is
000014A0                           444  
000014A0  6000 06B0                445      BRA     DONE                
000014A4                           446  
000014A4                           447  subQOpCode
000014A4  BA3C 0005                448      CMP.B   #5,D5               *is it SUBQ?
000014A8  6600 008A                449      BNE     orOpCode            *check if its DIVS.W
000014AC                           450      
000014AC                           451  subQMethod
000014AC  43F9 00001B8E            452      LEA     outputSUBQ,A1       *output SUBQ
000014B2  103C 000E                453      MOVE.B  #14,D0
000014B6  4E4F                     454      TRAP    #15
000014B8                           455      
000014B8  3604                     456      MOVE.W  D4,D3               *move original word from D4
000014BA  123C 000A                457      MOVE.B  #10,D1              *hacks
000014BE  E37B                     458      ROL.W   D1,D3               *ROL by 10
000014C0  C6BC 00000003            459      AND.L   #00000003,D3        *Mask 
000014C6  4EB9 000019E8            460      JSR     byteOpMode          *check if B,W,L
000014CC                           461      
000014CC  4EB9 000014E8            462      JSR     subQData            *outputs #1-#8
000014D2                           463      
000014D2  43F9 00001C2C            464      LEA     outputComma,A1      *commas
000014D8  103C 000E                465      MOVE.B  #14,D0
000014DC  4E4F                     466      TRAP    #15
000014DE                           467      
000014DE  4EB9 00001A24            468      JSR     sourceEA            *get the source
000014E4                           469      
000014E4  6000 066C                470      BRA     DONE
000014E8                           471      
000014E8                           472      
000014E8                           473  subQData
000014E8  3604                     474      MOVE.W  D4,D3               *move original word from D4
000014EA  EF5B                     475      ROL.W   #7,D3               *ROL 7
000014EC  C6BC 00000007            476      AND.L   #$00000007,D3       *mask the bits
000014F2                           477      
000014F2  B63C 0000                478      CMP.B   #0,D3               *if its 0 display 8
000014F6  6700 0022                479      BEQ     display8ForSubQ
000014FA                           480      
000014FA  B63C 0008                481      CMP.B   #8,D3
000014FE  6C00 041E                482      BGE     dataOpCode
00001502                           483      
00001502  43F9 00001C27            484      LEA     outputPound,A1      *output #
00001508  103C 000E                485      MOVE.B  #14,D0
0000150C  4E4F                     486      TRAP    #15
0000150E                           487      
0000150E  4281                     488      CLR.L   D1
00001510  1203                     489      MOVE.B  D3,D1               *output 1-7
00001512  103C 0003                490      MOVE.B  #3,D0
00001516  4E4F                     491      TRAP    #15
00001518                           492      
00001518  4E75                     493      RTS                         *return to subQmethod
0000151A                           494      
0000151A                           495  display8ForSubQ
0000151A                           496  
0000151A  43F9 00001C27            497      LEA     outputPound,A1      *output #
00001520  103C 000E                498      MOVE.B  #14,D0
00001524  4E4F                     499      TRAP    #15
00001526  4281                     500      CLR.L   D1
00001528  123C 0008                501      MOVE.B  #8,D1               *output 8
0000152C  103C 0003                502      MOVE.B  #3,D0
00001530  4E4F                     503      TRAP    #15
00001532                           504      
00001532  4E75                     505      RTS                         *return to subQMethod
00001534                           506  
00001534                           507  orOpCode
00001534  BA3C 0008                508      CMP.B   #8,D5   
00001538  6600 008A                509      BNE     eorOpCode
0000153C                           510      
0000153C  2A04                     511      MOVE.L  D4,D5
0000153E  720A                     512      MOVE.L  #10,D1
00001540  E37D                     513      ROL.W   D1,D5
00001542                           514      
00001542  CABC 00000007            515      AND.L   #$00000007,D5
00001548                           516      
00001548  BA3C 0007                517      CMP.B   #7,D5
0000154C  6700 0038                518      BEQ     divsWOpCode
00001550                           519      
00001550                           520  orMethod
00001550  43F9 00001BD0            521      LEA     outputOR,A1
00001556  103C 000E                522      MOVE.B  #14,D0
0000155A  4E4F                     523      TRAP    #15
0000155C                           524      
0000155C  4EB9 00001974            525      JSR     dotOpMode
00001562                           526      
00001562  BC3C 0001                527      CMP.B   #1,D6
00001566  6700 03D4                528      BEQ     altOrder
0000156A                           529      
0000156A  4EB9 00001A24            530      JSR     sourceEA
00001570                           531      
00001570  43F9 00001C2C            532      LEA     outputComma,A1
00001576  103C 000E                533      MOVE.B  #14,D0
0000157A  4E4F                     534      TRAP    #15
0000157C                           535      
0000157C  4EB9 00001AD4            536      JSR     addDestinationEA
00001582                           537      
00001582  6000 05CE                538      BRA     DONE
00001586                           539      
00001586                           540  divsWOpCode
00001586                           541  *    CMP.B   #8,D5
00001586                           542  *    BEQ     divsWCheck          *bits 8,7,6 need to make 7 to be DIVSW
00001586                           543  *    BRA     eorOpCode
00001586                           544  *    
00001586                           545  divsWCheck
00001586  3604                     546      MOVE.W  D4,D3
00001588  143C 000A                547      MOVE.B  #10,D2
0000158C  E57B                     548      ROL.W   D2,D3
0000158E  C6BC 00000007            549      AND.L   #$00000007,D3
00001594  B63C 0007                550      CMP.B   #7,D3
00001598  6600 05B8                551      BNE     DONE
0000159C                           552      
0000159C  43F9 00001BA6            553      LEA     outputDIVSW,A1
000015A2  103C 000E                554      MOVE.B  #14,D0
000015A6  4E4F                     555      TRAP    #15
000015A8                           556      
000015A8  4EB9 00001A24            557      JSR     sourceEA 
000015AE                           558      
000015AE  43F9 00001C2C            559      LEA     outputComma,A1
000015B4  103C 000E                560      MOVE.B  #14,D0
000015B8  4E4F                     561      TRAP    #15
000015BA                           562      
000015BA  4EB9 00001AD4            563      JSR     addDestinationEA
000015C0                           564      
000015C0  6000 0590                565      BRA     DONE
000015C4                           566      
000015C4                           567  eorOpCode
000015C4  BA3C 000B                568      CMP.B   #11,D5
000015C8  6600 0078                569      BNE     mulsWOpCode
000015CC                           570      
000015CC  2A04                     571      MOVE.L  D4,D5
000015CE  E19D                     572      ROL.L   #8,D5
000015D0  CABC 00000001            573      AND.L   #$00000001,D5
000015D6                           574      
000015D6                           575      
000015D6                           576  eorMethod
000015D6  BA3C 0001                577      CMP.B   #1,D5
000015DA  6600 0030                578      BNE     cmpOpCode
000015DE                           579      
000015DE  43F9 00001BD3            580      LEA     outputEOR,A1
000015E4  103C 000E                581      MOVE.B  #14,D0
000015E8  4E4F                     582      TRAP    #15
000015EA                           583      
000015EA  4EB9 00001974            584      JSR     dotOpMode
000015F0                           585      
000015F0  4EB9 00001AD4            586      JSR     addDestinationEA
000015F6                           587      
000015F6  43F9 00001C2C            588      LEA     outputComma,A1
000015FC  103C 000E                589      MOVE.B  #14,D0
00001600  4E4F                     590      TRAP    #15
00001602                           591      
00001602  4EB9 00001A24            592      JSR     sourceEA
00001608                           593      
00001608  6000 0548                594      BRA     DONE    
0000160C                           595  
0000160C                           596  cmpOpCode
0000160C  BA3C 0000                597      CMP.B   #0,D5
00001610  6600 0540                598      BNE     DONE
00001614                           599      
00001614  43F9 00001BDC            600      LEA     outputCMP,A1
0000161A  103C 000E                601      MOVE.B  #14,D0
0000161E  4E4F                     602      TRAP    #15
00001620                           603      
00001620  4EB9 00001974            604      JSR     dotOpMode
00001626                           605      
00001626  4EB9 00001A24            606      JSR     sourceEA
0000162C                           607      
0000162C  43F9 00001C2C            608      LEA     outputComma,A1
00001632  103C 000E                609      MOVE.B  #14,D0
00001636  4E4F                     610      TRAP    #15
00001638                           611      
00001638  4EB9 00001AD4            612      JSR     addDestinationEA
0000163E                           613      
0000163E  6000 0512                614      BRA     DONE
00001642                           615     
00001642                           616      
00001642                           617  mulsWOpCode
00001642  BA3C 000C                618      CMP.B   #12,D5
00001646  6600 002A                619      BNE     negOpCode    
0000164A                           620  
0000164A                           621  mulsWMethod
0000164A  43F9 00001B9E            622      LEA     outputMULSW,A1
00001650  103C 000E                623      MOVE.B  #14,D0
00001654  4E4F                     624      TRAP    #15
00001656                           625      
00001656  4EB9 00001A24            626      JSR     sourceEA
0000165C                           627      
0000165C  43F9 00001C2C            628      LEA     outputComma,A1
00001662  103C 000E                629      MOVE.B  #14,D0
00001666  4E4F                     630      TRAP    #15
00001668                           631      
00001668  4EB9 00001AD4            632      JSR     addDestinationEA
0000166E                           633      
0000166E  6000 04E2                634      BRA     DONE
00001672                           635      
00001672                           636  negOpCode
00001672  3604                     637      MOVE.W  D4,D3               *move full opcode into D3
00001674  E15B                     638      ROL.W   #8,D3               *move most sig 8 bits
00001676  B63C 0044                639      CMP.B   #$44,D3             *is it a NEG?             
0000167A  6600 002C                640      BNE     braOpCode           *check if its a BRA
0000167E                           641      
0000167E                           642  negMethod
0000167E  43F9 00001BC3            643      LEA     outputNEG,A1        *output NEG to the console
00001684  103C 000E                644      MOVE.B  #14,D0
00001688  4E4F                     645      TRAP    #15
0000168A                           646      
0000168A  E15B                     647      ROL.W   #8,D3
0000168C                           648      *CLR.L   D3
0000168C                           649      *MOVE.W  D4,D3               *move original word from D4
0000168C  123C 000A                650      MOVE.B  #10,D1              *hacks
00001690  E37B                     651      ROL.W   D1,D3               *ROL by 10
00001692  C6BC 00000003            652      AND.L   #00000003,D3        *Mask 
00001698  4EB9 000019E8            653      JSR     byteOpMode          *check if B,W,L
0000169E                           654          
0000169E  4EB9 00001A24            655      JSR     sourceEA
000016A4                           656      
000016A4  6000 04AC                657      BRA     DONE
000016A8                           658  
000016A8                           659  braOpCode
000016A8  3604                     660      MOVE.W  D4,D3               *move the opcode word into D3
000016AA  E15B                     661      ROL.W   #8,D3               *isolate the last byte
000016AC  B63C 0060                662      CMP.B   #$60,D3             *is it a BRA?
000016B0  6600 0154                663      BNE     bccOpCode           *its data then
000016B4                           664      
000016B4                           665  braMethod
000016B4  43F9 00001BC7            666      LEA     outputBRA,A1        
000016BA  103C 000E                667      MOVE.B  #14,D0
000016BE  4E4F                     668      TRAP    #15
000016C0                           669  
000016C0                           670  
000016C0                           671  bccDisplacement    
000016C0  1604                     672      MOVE.B  D4,D3
000016C2  C67C 00FF                673      AND.W   #$00FF,D3
000016C6  B63C 0000                674      CMP.B   #$00,D3
000016CA  6700 0048                675      BEQ     bitDisplacement16
000016CE  B63C 00FF                676      CMP.B   #$FF,D3
000016D2  6700 00B6                677      BEQ     bitDisplacement32
000016D6  E11B                     678      ROL.B   #8,D3
000016D8  0A43 00FF                679      EOR.W   #$FF,D3
000016DC  5243                     680      ADD.W   #1,D3
000016DE                           681      
000016DE  43F9 00001C39            682      LEA     outputNegSign,A1
000016E4  103C 000E                683      MOVE.B  #14,D0
000016E8  4E4F                     684      TRAP    #15
000016EA                           685      
000016EA  3203                     686      MOVE.W  D3,D1
000016EC  103C 0003                687      MOVE.B  #3,D0
000016F0  4E4F                     688      TRAP    #15
000016F2                           689      
000016F2  43F9 00001C34            690      LEA     outputSpace,A1
000016F8  103C 000E                691      MOVE.B  #14,D0
000016FC  4E4F                     692      TRAP    #15
000016FE                           693      
000016FE  304D                     694      MOVE.W  A5,A0
00001700  90C3                     695      SUBA.W  D3,A0
00001702  3208                     696      MOVE.W  A0,D1
00001704  103C 000F                697      MOVE.B  #15,D0
00001708  143C 0010                698      MOVE.B  #16,D2
0000170C  4E4F                     699      TRAP    #15
0000170E                           700      
0000170E  304C                     701      MOVE.W  A4,A0
00001710                           702      
00001710                           703      
00001710  6000 0440                704      BRA     DONE
00001714                           705     
00001714                           706  bitDisplacement16
00001714                           707      
00001714  304D                     708      MOVE.W  A5,A0
00001716  381D                     709      MOVE.W  (A5)+,D4
00001718  3604                     710      MOVE.W  D4,D3
0000171A  E95B                     711      ROL.W   #4,D3
0000171C  C67C 000F                712      AND.W   #$000F,D3
00001720  B67C 0008                713      CMP.W   #8,D3
00001724  6C00 002A                714      BGE     negBit16
00001728                           715      
00001728  3204                     716      MOVE.W  D4,D1
0000172A  103C 0003                717      MOVE.B  #3,D0
0000172E  4E4F                     718      TRAP    #15
00001730                           719      
00001730  43F9 00001C34            720      LEA     outputSpace,A1
00001736  103C 000E                721      MOVE.B  #14,D0
0000173A  4E4F                     722      TRAP    #15
0000173C                           723      
0000173C  D0C4                     724      ADDA.W  D4,A0
0000173E  3208                     725      MOVE.W  A0,D1
00001740  103C 000F                726      MOVE.B  #15,D0
00001744  143C 0010                727      MOVE.B  #16,D2
00001748  4E4F                     728      TRAP    #15
0000174A                           729      
0000174A  304C                     730      MOVE.W  A4,A0
0000174C                           731      
0000174C  6000 0404                732      BRA DONE
00001750                           733      
00001750                           734  negBit16
00001750                           735  
00001750  0A44 FFFF                736      EOR.W   #$FFFF,D4
00001754  5244                     737      ADD.W   #1,D4
00001756                           738      
00001756  43F9 00001C39            739      LEA     outputNegSign,A1
0000175C  103C 000E                740      MOVE.B  #14,D0
00001760  4E4F                     741      TRAP    #15
00001762                           742      
00001762  3204                     743      MOVE.W  D4,D1
00001764  103C 0003                744      MOVE.B  #3,D0
00001768  4E4F                     745      TRAP    #15
0000176A                           746      
0000176A  43F9 00001C34            747      LEA     outputSpace,A1
00001770  103C 000E                748      MOVE.B  #14,D0
00001774  4E4F                     749      TRAP    #15
00001776                           750      
00001776                           751      *MOVE.W  A5,A0
00001776  90C4                     752      SUBA.W  D4,A0
00001778  3208                     753      MOVE.W  A0,D1
0000177A  103C 000F                754      MOVE.B  #15,D0
0000177E  143C 0010                755      MOVE.B  #16,D2
00001782  4E4F                     756      TRAP    #15
00001784                           757      
00001784  304C                     758      MOVE.W  A4,A0
00001786                           759      
00001786  6000 03CA                760      BRA     DONE
0000178A                           761      
0000178A                           762  bitDisplacement32
0000178A                           763  
0000178A  204D                     764      MOVE.L  A5,A0
0000178C  281D                     765      MOVE.L  (A5)+,D4
0000178E  2604                     766      MOVE.L  D4,D3
00001790  E95B                     767      ROL.W   #4,D3
00001792  C6BC 0000000F            768      AND.L   #$0000000F,D3
00001798  B6BC 00000008            769      CMP.L   #8,D3
0000179E  6C00 002A                770      BGE     negBit32
000017A2                           771      
000017A2  2204                     772      MOVE.L  D4,D1
000017A4  103C 0003                773      MOVE.B  #3,D0
000017A8  4E4F                     774      TRAP    #15
000017AA                           775      
000017AA  43F9 00001C34            776      LEA     outputSpace,A1
000017B0  103C 000E                777      MOVE.B  #14,D0
000017B4  4E4F                     778      TRAP    #15
000017B6                           779      
000017B6  D1C4                     780      ADDA.L  D4,A0
000017B8  2208                     781      MOVE.L  A0,D1
000017BA  103C 000F                782      MOVE.B  #15,D0
000017BE  143C 0010                783      MOVE.B  #16,D2
000017C2  4E4F                     784      TRAP    #15
000017C4                           785      
000017C4  204C                     786      MOVE.L  A4,A0
000017C6                           787      
000017C6  6000 038A                788      BRA DONE
000017CA                           789  
000017CA                           790  negBit32
000017CA                           791  
000017CA  0A84 FFFFFFFF            792      EOR.L   #$FFFFFFFF,D4
000017D0  5284                     793      ADD.L   #1,D4
000017D2                           794      
000017D2  43F9 00001C39            795      LEA     outputNegSign,A1
000017D8  103C 000E                796      MOVE.B  #14,D0
000017DC  4E4F                     797      TRAP    #15
000017DE                           798      
000017DE  2204                     799      MOVE.L  D4,D1
000017E0  103C 0003                800      MOVE.B  #3,D0
000017E4  4E4F                     801      TRAP    #15
000017E6                           802      
000017E6  43F9 00001C34            803      LEA     outputSpace,A1
000017EC  103C 000E                804      MOVE.B  #14,D0
000017F0  4E4F                     805      TRAP    #15
000017F2                           806      
000017F2                           807      *MOVE.L  A5,A0
000017F2  91C4                     808      SUBA.L  D4,A0
000017F4  2208                     809      MOVE.L  A0,D1
000017F6  103C 000F                810      MOVE.B  #15,D0
000017FA  143C 0010                811      MOVE.B  #16,D2
000017FE  4E4F                     812      TRAP    #15
00001800                           813      
00001800  204C                     814      MOVE.L  A4,A0
00001802                           815      
00001802  6000 034E                816      BRA     DONE
00001806                           817      
00001806                           818  bccOpCode
00001806  BA3C 0006                819      CMP.B   #6,D5               *is it Bcc?
0000180A  6600 0066                820      BNE     shiftOpCode          *its data then
0000180E                           821      
0000180E                           822  bccMethod
0000180E  3604                     823      MOVE.W  D4,D3
00001810  E15B                     824      ROL.W   #8,D3
00001812  C67C 000F                825      AND.W   #$000F,D3
00001816  B63C 0005                826      CMP.B   #5,D3
0000181A  6700 0016                827      BEQ     bcs
0000181E  B63C 000C                828      CMP.B   #$C,D3
00001822  6700 001E                829      BEQ     bge
00001826  B63C 000D                830      CMP.B   #$D,D3
0000182A  6700 0026                831      BEQ     bct
0000182E  6000 0032                832      BRA     bvc
00001832                           833      
00001832                           834  bcs
00001832  43F9 00001BE6            835      LEA     outputBCS,A1
00001838  103C 000E                836      MOVE.B  #14,D0
0000183C  4E4F                     837      TRAP    #15
0000183E                           838      
0000183E  6000 FE80                839      BRA     bccDisplacement
00001842                           840      
00001842                           841  bge
00001842  43F9 00001BEB            842      LEA     outputBGE,A1
00001848  103C 000E                843      MOVE.B  #14,D0
0000184C  4E4F                     844      TRAP    #15
0000184E                           845      
0000184E  6000 FE70                846      BRA     bccDisplacement
00001852                           847  
00001852                           848  bct
00001852  43F9 00001BF0            849      LEA     outputBCT,A1
00001858  103C 000E                850      MOVE.B  #14,D0
0000185C  4E4F                     851      TRAP    #15
0000185E                           852      
0000185E  6000 FE60                853      BRA     bccDisplacement
00001862                           854      
00001862                           855  bvc
00001862  43F9 00001BF5            856      LEA     outputBVC,A1
00001868  103C 000E                857      MOVE.B  #14,D0
0000186C  4E4F                     858      TRAP    #15
0000186E                           859      
0000186E  6000 FE50                860      BRA     bccDisplacement
00001872                           861             
00001872                           862  *shifts go here
00001872                           863  shiftOpCode
00001872  BA3C 000E                864      CMP.B   #14,D5
00001876  6600 00A6                865      BNE     dataOpCode
0000187A  3604                     866      MOVE.W  D4,D3
0000187C  E61B                     867      ROR.B   #3,D3
0000187E  C67C 0003                868      AND.W   #$0003,D3
00001882  B63C 0001                869      CMP.B   #1,D3
00001886  6700 0006                870      BEQ     lsl
0000188A  B63C 0000                871      CMP.B   #0,D3
0000188E                           872      *BEQ     asl
0000188E                           873      *BRA     rol
0000188E                           874      *BRA     DONE
0000188E                           875   
0000188E                           876  lsl
0000188E  3604                     877      MOVE.W  D4,D3
00001890  E05B                     878      ROR.W   #8,D3
00001892  C67C 0001                879      AND.W   #$0001,D3
00001896  B63C 0000                880      CMP.B   #0,D3
0000189A  6700 0012                881      BEQ     lsr
0000189E                           882      
0000189E  43F9 00001BFA            883      LEA     outputLSL,A1
000018A4  103C 000E                884      MOVE.B  #14,D0
000018A8  4E4F                     885      TRAP    #15
000018AA                           886      
000018AA  6000 02A6                887      BRA     DONE
000018AE                           888  lsr 
000018AE  43F9 00001BFE            889      LEA     outputLSR,A1
000018B4  103C 000E                890      MOVE.B  #14,D0
000018B8  4E4F                     891      TRAP    #15 
000018BA                           892  
000018BA  6000 0296                893      BRA     DONE
000018BE                           894      
000018BE                           895  asl
000018BE  3604                     896      MOVE.W  D4,D3
000018C0  E05B                     897      ROR.W   #8,D3
000018C2  C67C 0001                898      AND.W   #$0001,D3
000018C6  B63C 0000                899      CMP.B   #0,D3
000018CA  6700 0012                900      BEQ     asr
000018CE                           901      
000018CE  43F9 00001C02            902      LEA     outputASL,A1
000018D4  103C 000E                903      MOVE.B  #14,D0
000018D8  4E4F                     904      TRAP    #15
000018DA                           905      
000018DA  6000 0276                906      BRA     DONE
000018DE                           907  
000018DE                           908  asr
000018DE                           909  
000018DE  43F9 00001C06            910      LEA     outputASR,A1
000018E4  103C 000E                911      MOVE.B  #14,D0
000018E8  4E4F                     912      TRAP    #15
000018EA                           913      
000018EA  6000 0266                914      BRA     DONE
000018EE                           915  
000018EE                           916  rol
000018EE  3604                     917      MOVE.W  D4,D3
000018F0  E05B                     918      ROR.W   #8,D3
000018F2  C67C 0001                919      AND.W   #$0001,D3
000018F6  B63C 0000                920      CMP.B   #0,D3
000018FA  6700 0012                921      BEQ     ror
000018FE                           922      
000018FE  43F9 00001C0A            923      LEA     outputROL,A1
00001904  103C 000E                924      MOVE.B  #14,D0
00001908  4E4F                     925      TRAP    #15
0000190A                           926      
0000190A  6000 0246                927      BRA     DONE
0000190E                           928  
0000190E                           929  ror
0000190E  43F9 00001C0E            930      LEA     outputROR,A1
00001914  103C 000E                931      MOVE.B  #14,D0
00001918  4E4F                     932      TRAP    #15
0000191A                           933      
0000191A  6000 0236                934      BRA     DONE
0000191E                           935    
0000191E                           936  dataOpCode
0000191E  4283                     937      CLR.L   D3
00001920  43F9 00001BBD            938      LEA     outputData,A1
00001926  103C 000E                939      MOVE.B  #14,D0
0000192A  4E4F                     940      TRAP    #15
0000192C                           941      
0000192C  3215                     942      MOVE.W  (A5),D1
0000192E  103C 000F                943      MOVE.B  #15,D0
00001932  143C 0010                944      MOVE.B  #16,D2
00001936  4E4F                     945      TRAP    #15
00001938                           946      
00001938  6000 0218                947      BRA     DONE
0000193C                           948  
0000193C                           949  
0000193C                           950  altOrder                            *outputs the Dn as the source for ADD
0000193C  4EB9 00001AD4            951      JSR     addDestinationEA
00001942                           952      
00001942  43F9 00001C2C            953      LEA     outputComma,A1
00001948  103C 000E                954      MOVE.B  #14,D0
0000194C  4E4F                     955      TRAP    #15
0000194E                           956      
0000194E  4EB9 00001A24            957      JSR     sourceEA
00001954  6000 01FC                958      BRA     DONE
00001958                           959      
00001958                           960  addaOrder                           *ADDA method
00001958  4EB9 00001A24            961      JSR     sourceEA                *output source first
0000195E                           962      
0000195E  43F9 00001C2C            963      LEA     outputComma,A1          *Comma
00001964  103C 000E                964      MOVE.B  #14,D0
00001968  4E4F                     965      TRAP    #15
0000196A                           966      
0000196A  4EB9 00001B1C            967      JSR     addaDestEA              *Have to set destination mode in addaDestEA
00001970  6000 01E0                968      BRA     DONE
00001974                           969  
00001974                           970  
00001974                           971  dotOpMode                           *Checks if it's a Byte,Word, or Long for ADD and SUB
00001974  3604                     972      MOVE.W  D4,D3                   *Gets the original code from D4                 
00001976  143C 000A                973      MOVE.B  #10,D2                  *yay hacks
0000197A                           974      
0000197A  E57B                     975      ROL.W   D2,D3                   *Rotates the original left by 10 bits
0000197C  C6BC 00000007            976      AND.L   #$00000007,D3           *mask it up
00001982                           977      
00001982  B63C 0003                978      CMP.B   #3,D3                   
00001986  6C00 0006                979      BGE     altOpMode               *if value is > 3, Dn is the source
0000198A                           980      
0000198A  6000 005C                981      BRA     byteOpMode    
0000198E                           982  
0000198E                           983  altOpMode                           *But wait, there's more!
0000198E  B63C 0003                984      CMP.B   #3,D3                   *If it's 3, it's an ADDA.W
00001992  6700 0016                985      BEQ     addaWOpMode
00001996                           986      
00001996  B63C 0007                987      CMP.B   #7,D3                   *If it's a 7, it's an ADDA.L
0000199A  6700 002C                988      BEQ     addaLOpMode             *Otherwise, it's just ADD with Dn in source
0000199E                           989      
0000199E  1C3C 0001                990      MOVE.B  #1,D6                   *D6 is 1 if Dn is the source
000019A2  C63C 0003                991      AND.B   #$3,D3                  *Mask it so it can continue with the output
000019A6  6000 0040                992      BRA     byteOpMode              *without the meddling 2^2 bit
000019AA                           993  
000019AA                           994  addaWOpMode                         *It's an ADDA.W
000019AA  3C3C 0002                995      MOVE.W  #2,D6
000019AE                           996      
000019AE  43F9 00001B88            997      LEA     outputADDA,A1
000019B4  103C 000E                998      MOVE.B  #14,D0
000019B8  4E4F                     999      TRAP    #15
000019BA                          1000      
000019BA  43F9 00001C16           1001      LEA     outputWord,A1
000019C0  103C 000E               1002      MOVE.B  #14,D0
000019C4  4E4F                    1003      TRAP    #15
000019C6                          1004      
000019C6  4E75                    1005      RTS
000019C8                          1006      
000019C8                          1007  addaLOpMode                         *It's an ADDA.L
000019C8  3C3C 0002               1008      MOVE.W  #2,D6
000019CC                          1009      
000019CC  5207                    1010      ADD.B   #1,D7
000019CE                          1011      
000019CE  43F9 00001B88           1012      LEA     outputADDA,A1
000019D4  103C 000E               1013      MOVE.B  #14,D0
000019D8  4E4F                    1014      TRAP    #15
000019DA                          1015      
000019DA  43F9 00001C1A           1016      LEA     outputLong,A1
000019E0  103C 000E               1017      MOVE.B  #14,D0
000019E4  4E4F                    1018      TRAP    #15
000019E6                          1019      
000019E6  4E75                    1020      RTS
000019E8                          1021      
000019E8                          1022      
000019E8                          1023  byteOpMode                          *It's a byte?
000019E8  B63C 0000               1024      CMP.B   #0,D3
000019EC  6600 0010               1025      BNE     wordOpMode
000019F0                          1026      
000019F0  43F9 00001C12           1027      LEA     outputByte,A1           *Output ".B" !
000019F6  103C 000E               1028      MOVE.B  #14,D0
000019FA  4E4F                    1029      TRAP    #15
000019FC  4E75                    1030      RTS                             *Time to return back in time
000019FE                          1031      
000019FE                          1032  wordOpMode                          *It's a word?
000019FE  B63C 0001               1033      CMP.B   #1,D3
00001A02  6600 0010               1034      BNE     longOpMode
00001A06                          1035      
00001A06  43F9 00001C16           1036      LEA     outputWord,A1           *Output ".W" onto console
00001A0C  103C 000E               1037      MOVE.B  #14,D0
00001A10  4E4F                    1038      TRAP    #15
00001A12  4E75                    1039      RTS                             *Time warp~
00001A14                          1040      
00001A14                          1041  longOpMode                          *It better be a long then
00001A14  43F9 00001C1A           1042      LEA     outputLong,A1           *outputs ".L" onto console
00001A1A  103C 000E               1043      MOVE.B  #14,D0
00001A1E  4E4F                    1044      TRAP    #15
00001A20                          1045      
00001A20  5207                    1046      ADD.B   #1,D7
00001A22                          1047     
00001A22  4E75                    1048      RTS                             *whoosh~
00001A24                          1049   
00001A24                          1050      
00001A24                          1051  sourceEA                            *output the Source EA
00001A24  3604                    1052      MOVE.W  D4,D3                   *Put the original opcode into D3
00001A26  3403                    1053      MOVE.W  D3,D2                   *Copy that into D2
00001A28                          1054      
00001A28  E65A                    1055      ROR.W   #3,D2                   *Whoo~ Rotating~
00001A2A  C4BC 00000007           1056      AND.L   #$00000007,D2           *D2 has Mode
00001A30                          1057      
00001A30                          1058  
00001A30  C6BC 00000007           1059      AND.L   #$00000007,D3           *D3 has Register
00001A36                          1060  
00001A36                          1061   
00001A36                          1062  DnMode                          *Is the Mode a Data Register?
00001A36  4281                    1063      CLR.L   D1
00001A38                          1064      
00001A38  B43C 0000               1065      CMP.B   #0,D2
00001A3C  6600 0018               1066      BNE     AnMode
00001A40                          1067      
00001A40  43F9 00001C25           1068      LEA     outputDn,A1         *outputs "D" onto console
00001A46  103C 000E               1069      MOVE.B  #14,D0
00001A4A  4E4F                    1070      TRAP    #15
00001A4C                          1071  
00001A4C  1203                    1072      MOVE.B  D3,D1               *outputs the register, whatever the numeric value is
00001A4E  103C 0003               1073      MOVE.B  #3,D0
00001A52  4E4F                    1074      TRAP    #15
00001A54                          1075      
00001A54  4E75                    1076      RTS                         *wooo~
00001A56                          1077    
00001A56                          1078  AnMode                          *Mode is an Address Register?
00001A56  B43C 0001               1079      CMP.B   #1,D2
00001A5A  6600 0018               1080      BNE     deRefAnMode
00001A5E                          1081      
00001A5E  43F9 00001C23           1082      LEA     outputAn,A1         *Outputs "A" onto console
00001A64  103C 000E               1083      MOVE.B  #14,D0
00001A68  4E4F                    1084      TRAP    #15
00001A6A                          1085      
00001A6A  1203                    1086      MOVE.B  D3,D1               *Outputs the register value
00001A6C  103C 0003               1087      MOVE.B  #3,D0
00001A70  4E4F                    1088      TRAP    #15
00001A72                          1089      
00001A72  4E75                    1090      RTS                         *psssh
00001A74                          1091      
00001A74                          1092  deRefAnMode                     *Mode is a (A0)?
00001A74  B43C 0002               1093      CMP.B   #2,D2               
00001A78  6600 0024               1094      BNE     immediateData
00001A7C                          1095      
00001A7C  43F9 00001C1E           1096      LEA     outputdeRefAn1,A1   *Outputs "(A" onto console
00001A82  103C 000E               1097      MOVE.B  #14,D0
00001A86  4E4F                    1098      TRAP    #15
00001A88                          1099      
00001A88  1203                    1100      MOVE.B  D3,D1               *outputs register value
00001A8A  103C 0003               1101      MOVE.B  #3,D0
00001A8E  4E4F                    1102      TRAP    #15
00001A90                          1103      
00001A90  43F9 00001C21           1104      LEA     outputdeRefAn2,A1   *makes it pretty by outputting ")"
00001A96  103C 000E               1105      MOVE.B  #14,D0
00001A9A  4E4F                    1106      TRAP    #15
00001A9C                          1107      
00001A9C  4E75                    1108      RTS                         *=-=
00001A9E                          1109      
00001A9E                          1110  immediateData                   *Mode is an #<data>
00001A9E  B43C 0007               1111      CMP.B   #7,D2               *Mode for #<data> is 111
00001AA2  6600 00AE               1112      BNE     DONE                
00001AA6                          1113      
00001AA6  B63C 0004               1114      CMP.B   #4,D3               *Register for #<data> is 100
00001AAA  6600 00A6               1115      BNE     DONE
00001AAE                          1116                                 
00001AAE  43F9 00001C27           1117      LEA     outputPound,A1      *Outputs "#"
00001AB4  103C 000E               1118      MOVE.B  #14,D0
00001AB8  4E4F                    1119      TRAP    #15   
00001ABA                          1120      
00001ABA  BE3C 0001               1121      CMP.B   #1,D7
00001ABE  6700 0008               1122      BEQ     immeDataLong
00001AC2                          1123      
00001AC2  361D                    1124      MOVE.W  (A5)+,D3
00001AC4                          1125      
00001AC4  6000 0004               1126      BRA     immediateDatapt2
00001AC8                          1127  
00001AC8                          1128  immeDataLong
00001AC8  261D                    1129      MOVE.L  (A5)+,D3    
00001ACA                          1130      
00001ACA                          1131      
00001ACA                          1132  immediateDatapt2               *Outputs register value
00001ACA  2203                    1133      MOVE.L  D3,D1
00001ACC  103C 0003               1134      MOVE.B  #3,D0
00001AD0  4E4F                    1135      TRAP    #15
00001AD2                          1136  
00001AD2  4E75                    1137      RTS                         *~owo~
00001AD4                          1138      
00001AD4                          1139  
00001AD4                          1140  addDestinationEA                *Since ADD only has data register in dest area
00001AD4  3604                    1141      MOVE.W  D4,D3
00001AD6                          1142      
00001AD6  3403                    1143      MOVE.W  D3,D2
00001AD8                          1144      
00001AD8  720A                    1145      MOVE.L  #10,D1
00001ADA  E37A                    1146      ROL.W   D1,D2
00001ADC  C4BC 00000007           1147      AND.L   #$00000007,D2       *D2 has mode
00001AE2                          1148      
00001AE2                          1149      
00001AE2  EF5B                    1150      ROL.W   #7,D3
00001AE4  C6BC 00000007           1151      AND.L   #$00000007,D3       *D3 has register
00001AEA                          1152      
00001AEA                          1153  DnRegister                      *For ADD only, since it only has Dn 
00001AEA  43F9 00001C25           1154      LEA     outputDn,A1         *outputs "D"
00001AF0  103C 000E               1155      MOVE.B  #14,D0
00001AF4  4E4F                    1156      TRAP    #15
00001AF6                          1157      
00001AF6  1203                    1158      MOVE.B  D3,D1               *Outputs register value
00001AF8  103C 0003               1159      MOVE.B  #3,D0
00001AFC  4E4F                    1160      TRAP    #15
00001AFE                          1161      
00001AFE  4E75                    1162      RTS
00001B00                          1163  
00001B00                          1164  moveDestinationEA               *Destination output for MOVE
00001B00  3604                    1165      MOVE.W  D4,D3
00001B02  3403                    1166      MOVE.W  D3,D2
00001B04                          1167      
00001B04  EF5B                    1168      ROL.W   #7,D3
00001B06  C6BC 00000007           1169      AND.L   #$00000007,D3       *D3 has Register
00001B0C                          1170      
00001B0C  323C 000A               1171      MOVE.W  #10,D1      
00001B10  E37A                    1172      ROL.W   D1,D2               *D2 has Mode
00001B12  C4BC 00000007           1173      AND.L   #$00000007,D2
00001B18                          1174      
00001B18  6000 FF1C               1175      BRA     DnMode              *output what it is, bra
00001B1C                          1176      
00001B1C                          1177  addaDestEA                      *Sets up the dest mode to be proper
00001B1C  3604                    1178      MOVE.W  D4,D3               *Get the original code again
00001B1E  3403                    1179      MOVE.W  D3,D2
00001B20                          1180      
00001B20  EF5B                    1181      ROL.W   #7,D3               
00001B22  C6BC 00000007           1182      AND.L   #$00000007,D3       *D3 has register
00001B28                          1183      
00001B28  323C 000A               1184      MOVE.W  #10,D1
00001B2C  E37A                    1185      ROL.W   D1,D2               *Have to AND it by 1, since the mode for ADDA
00001B2E  C4BC 00000001           1186      AND.L   #$00000001,D2       *is always an Address
00001B34                          1187      
00001B34  6000 FF00               1188      BRA     DnMode
00001B38                          1189      
00001B38                          1190  pageContinue
00001B38  43F9 00001C68           1191      LEA     outputContinue,A1
00001B3E  103C 000E               1192      MOVE.B  #14,D0
00001B42  4E4F                    1193      TRAP    #15
00001B44  103C 0005               1194      MOVE.B  #5,D0
00001B48  4E4F                    1195      TRAP    #15
00001B4A  16BC 001E               1196      MOVE.B  #line_count,(A3)
00001B4E  4EF8 1186               1197      JMP     getOpCode
00001B52                          1198      
00001B52                          1199  DONE
00001B52  BCCD                    1200      CMP.W   A5,A6
00001B54  6D00 0012               1201      BLT     END   
00001B58  43F9 00001C30           1202      LEA     outputNextLine,A1
00001B5E  103C 000E               1203      MOVE.B  #14,D0
00001B62  4E4F                    1204      TRAP    #15 
00001B64  4EF8 1186               1205      JMP     getOpCode
00001B68                          1206      
00001B68                          1207  END
00001B68  43F9 00001C30           1208      LEA     outputNextLine,A1
00001B6E  103C 000E               1209      MOVE.B  #14,D0
00001B72  4E4F                    1210      TRAP    #15
00001B74                          1211  
00001B74  43F9 00001C53           1212      LEA     outputEnd,A1
00001B7A  103C 000E               1213      MOVE.B  #14,D0
00001B7E  4E4F                    1214      TRAP    #15
00001B80  FFFF FFFF               1215      SIMHALT             ; halt simulator
00001B84                          1216  
00001B84                          1217  * Put variables and constants here
00001B84                          1218  
00001B84= 41 44 44 00             1219  outputADD   DC.B    'ADD',0
00001B88= 41 00                   1220  outputADDA  DC.B    'A',0
00001B8A= 53 55 42 00             1221  outputSUB   DC.B    'SUB',0
00001B8E= 53 55 42 51 00          1222  outputSUBQ  DC.B    'SUBQ',0
00001B93= 4D 4F 56 45 00          1223  outputMOVE  DC.B    'MOVE',0
00001B98= 4D 4F 56 45 41 00       1224  outputMOVEA DC.B    'MOVEA',0
00001B9E= 4D 55 4C 53 2E 57 ...   1225  outputMULSW DC.B    'MULS.W ',0
00001BA6= 44 49 56 53 2E 57 ...   1226  outputDIVSW DC.B    'DIVS.W ',0
00001BAE= 4E 4F 50 20 00          1227  outputNOP   DC.B    'NOP ',0
00001BB3= 52 54 53 20 00          1228  outputRTS   DC.B    'RTS ',0
00001BB8= 4C 45 41 20 00          1229  outputLEA   DC.B    'LEA ',0
00001BBD= 44 41 54 41 20 00       1230  outputData  DC.B    'DATA ',0
00001BC3= 4E 45 47 00             1231  outputNEG   DC.B    'NEG',0
00001BC7= 42 52 41 20 00          1232  outputBRA   DC.B    'BRA ',0
00001BCC= 4F 52 49 00             1233  outputORI   DC.B    'ORI',0
00001BD0= 4F 52 00                1234  outputOR    DC.B    'OR',0
00001BD3= 45 4F 52 00             1235  outputEOR   DC.B    'EOR',0
00001BD7= 43 4D 50 49 00          1236  outputCMPI  DC.B    'CMPI',0
00001BDC= 43 4D 50 00             1237  outputCMP   DC.B    'CMP',0
00001BE0= 42 43 4C 52 20 00       1238  outputBCLR  DC.B    'BCLR ',0
00001BE6= 42 43 53 20 00          1239  outputBCS   DC.B    'BCS ',0
00001BEB= 42 47 45 20 00          1240  outputBGE   DC.B    'BGE ',0
00001BF0= 42 43 54 20 00          1241  outputBCT   DC.B    'BCT ',0
00001BF5= 42 56 43 20 00          1242  outputBVC   DC.B    'BVC ',0
00001BFA= 4C 53 4C 00             1243  outputLSL   DC.B    'LSL',0
00001BFE= 4C 53 52 00             1244  outputLSR   DC.B    'LSR',0
00001C02= 41 53 4C 00             1245  outputASL   DC.B    'ASL',0
00001C06= 41 53 52 00             1246  outputASR   DC.B    'ASR',0
00001C0A= 52 4F 4C 00             1247  outputROL   DC.B    'ROL',0
00001C0E= 52 4F 52 00             1248  outputROR   DC.B    'ROR',0
00001C12                          1249  
00001C12= 2E 42 20 00             1250  outputByte  DC.B    '.B ',0
00001C16= 2E 57 20 00             1251  outputWord  DC.B    '.W ',0
00001C1A= 2E 4C 20 00             1252  outputLong  DC.B    '.L ',0
00001C1E                          1253  
00001C1E= 28 41 00                1254  outputdeRefAn1   DC.B    '(A',0
00001C21= 29 00                   1255  outputdeRefAn2   DC.B    ')',0
00001C23                          1256  
00001C23= 41 00                   1257  outputAn    DC.B    'A',0
00001C25= 44 00                   1258  outputDn    DC.B    'D',0
00001C27= 23 00                   1259  outputPound DC.B    '#',0
00001C2A= 0000                    1260  outputCurrentAddr   DC.W    $0000
00001C2C                          1261  
00001C2C= 2C 00                   1262  outputComma     DC.B    ',',0
00001C2E= 2E 00                   1263  outputDot       DC.B    '.',0
00001C30= 20 0D 0A 00             1264  outputNextLine  DC.B    ' ',CR,LF,0
00001C34= 20 00                   1265  outputSpace     DC.B    ' ',0
00001C36= 3A 20 00                1266  outputColon     DC.B    ': ',0
00001C39= 2D 00                   1267  outputNegSign   DC.B    '-',0
00001C3B= 44 69 73 61 73 73 ...   1268  outputStart     DC.B    'Disassembling Initiated',0
00001C53= 50 72 6F 67 72 61 ...   1269  outputEnd       DC.B    'Program Disassembled',0
00001C68= 50 72 65 73 73 20 ...   1270  outputContinue  DC.B    'Press ENTER key to continue disassembling',CR,LF,0
00001C94                          1271      END    $1000        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADDADESTEA          1B1C
ADDALOPMODE         19C8
ADDAORDER           1958
ADDAWOPMODE         19AA
ADDDESTINATIONEA    1AD4
ADDMETHOD           1428
ADDOPCODE           1420
ADDR_VAL_TEMP       1180
ALTOPMODE           198E
ALTORDER            193C
ANMODE              1A56
ASCII_MASK          FF
ASCII_VAL_END       117E
ASCII_VAL_START     117C
ASL                 18BE
ASR                 18DE
BCCDISPLACEMENT     16C0
BCCMETHOD           180E
BCCOPCODE           1806
BCLRIMMEDIATE       1302
BCLROPCODE          12BA
BCS                 1832
BCT                 1852
BGE                 1842
BITDISPLACEMENT16   1714
BITDISPLACEMENT32   178A
BRAMETHOD           16B4
BRAOPCODE           16A8
BVC                 1862
BYTEOPMODE          19E8
CMPIMETHOD          1288
CMPIOPCODE          1280
CMPOPCODE           160C
COUNTER             0
CR                  D
DATAOPCODE          191E
DEREFANMODE         1A74
DISPLAY8FORSUBQ     151A
DIVSWCHECK          1586
DIVSWOPCODE         1586
DNMODE              1A36
DNREGISTER          1AEA
DONE                1B52
DOTOPMODE           1974
END                 1B68
END_ADDR_MSG        114B
END_VAL             1184
EORMETHOD           15D6
EOROPCODE           15C4
GETOPCODE           1186
GET_ADDR            10AA
IMMEDATALONG        1AC8
IMMEDIATEDATA       1A9E
IMMEDIATEDATAPT2    1ACA
LEAOPCODE           11F4
LF                  A
LINE_COUNT          1E
LONGOPMODE          1A14
LSL                 188E
LSR                 18AE
MASK                F
MOVEALONGMETHOD     13E6
MOVEAWORDMETHOD     1386
MOVEBYTEMETHOD      132A
MOVEBYTEOPCODE      1322
MOVEDESTINATIONEA   1B00
MOVELONGMETHODPT2   13F6
MOVELONGOPCODE      13BE
MOVELONGOPCODEMETHOD  13C6
MOVEWORDMETHOD      1366
MOVEWORDMETHODPT2   1396
MOVEWORDOPCODE      135E
MULSWMETHOD         164A
MULSWOPCODE         1642
NEGBIT16            1750
NEGBIT32            17CA
NEGMETHOD           167E
NEGOPCODE           1672
NOPOPCODE           11C8
ORIMETHOD           1246
ORIOPCODE           1232
ORMETHOD            1550
OROPCODE            1534
OUTPUTADD           1B84
OUTPUTADDA          1B88
OUTPUTAN            1C23
OUTPUTASL           1C02
OUTPUTASR           1C06
OUTPUTBCLR          1BE0
OUTPUTBCS           1BE6
OUTPUTBCT           1BF0
OUTPUTBGE           1BEB
OUTPUTBRA           1BC7
OUTPUTBVC           1BF5
OUTPUTBYTE          1C12
OUTPUTCMP           1BDC
OUTPUTCMPI          1BD7
OUTPUTCOLON         1C36
OUTPUTCOMMA         1C2C
OUTPUTCONTINUE      1C68
OUTPUTCURRENTADDR   1C2A
OUTPUTDATA          1BBD
OUTPUTDEREFAN1      1C1E
OUTPUTDEREFAN2      1C21
OUTPUTDIVSW         1BA6
OUTPUTDN            1C25
OUTPUTDOT           1C2E
OUTPUTEND           1C53
OUTPUTEOR           1BD3
OUTPUTLEA           1BB8
OUTPUTLONG          1C1A
OUTPUTLSL           1BFA
OUTPUTLSR           1BFE
OUTPUTMOVE          1B93
OUTPUTMOVEA         1B98
OUTPUTMULSW         1B9E
OUTPUTNEG           1BC3
OUTPUTNEGSIGN       1C39
OUTPUTNEXTLINE      1C30
OUTPUTNOP           1BAE
OUTPUTOR            1BD0
OUTPUTORI           1BCC
OUTPUTPOUND         1C27
OUTPUTROL           1C0A
OUTPUTROR           1C0E
OUTPUTRTS           1BB3
OUTPUTSPACE         1C34
OUTPUTSTART         1C3B
OUTPUTSUB           1B8A
OUTPUTSUBQ          1B8E
OUTPUTWORD          1C16
PAGECONTINUE        1B38
RET_SA              111E
ROL                 18EE
ROR                 190E
RTSOPCODE           11E0
SHIFTOPCODE         1872
SOURCEEA            1A24
STACK               B000
START_ADDR_MSG      1120
STRIP_ASCII         10FA
ST_VAL              1182
SUB30               111A
SUB37               1112
SUBMETHOD           146E
SUBOPCODE           1466
SUBQDATA            14E8
SUBQMETHOD          14AC
SUBQOPCODE          14A4
WORDOPMODE          19FE
