00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.02
Created On: 6/3/2015 1:11:59 AM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      :  Disassembler
00000000                             3  * Written by :  Paul Kessler and Joscelyn Kim
00000000                             4  * Date       :  199X
00000000                             5  * Description:  This program takes assembled code ans disassembles it into 
00000000                             6  *               assembly language readable by humans.  The program will be 
00000000                             7  *               disassembed in a user defined address range
00000000                             8  *-----------------------------------------------------------
00000000  =0000000D                  9  CR          EQU $0D
00000000  =0000000A                 10  LF          EQU $0A
00000000                            11  
00000000  =0000000F                 12  mask        EQU $0000000F
00000000  =000000FF                 13  ascii_mask  EQU $00FF
00000000  =00000000                 14  counter     EQU 0
00000000  =0000B000                 15  stack       EQU $B000
00000000  =0000001E                 16  line_count  EQU 30
00000000                            17  
00000000                            18  *---- User input address range -----
00000000                            19  
00001000                            20                  ORG         $1000                       * start of the program
00001000  4FF9 0000B000             21                  LEA         stack,SP                    * initialize the stack
00001006  4200                      22                  CLR.B       D0                          * clear D0
00001008  43F9 00001120             23                  LEA         start_addr_msg, A1          * ask for starting address
0000100E  103C 000E                 24                  MOVE.B      #14, D0
00001012  4E4F                      25                  TRAP        #15                         
00001014  103C 0002                 26                  MOVE.B      #2, D0                      * take in user input as string
00001018  4E4F                      27                  TRAP        #15
0000101A  23D1 0000117C             28                  MOVE.L      (A1),ascii_val_start        * store ascii address in DC
00001020  48A7 FFFE                 29                  MOVEM.W     A0-A6/D0-D7,-(SP)           * push registers on the stack
00001024  4EB9 000010AA             30                  JSR         get_addr                    * strip ascii characters to hex
0000102A  4C9F 7FFF                 31                  MOVEM.W     (SP)+, A0-A6/D0-D7          * restore registers
0000102E  33F9 00001180 00001182    32                  MOVE.W      addr_val_temp, st_val       * store address value into st_val
00001038  3A39 00001182             33                  MOVE.W      st_val, D5                  * check if address is correct
0000103E  42B9 0000117C             34                  CLR.L       ascii_val_start             * clr DC for end address input
00001044                            35                  
00001044  43F9 0000114B             36                  LEA         end_addr_msg, A1            * ask for ending address
0000104A  103C 000E                 37                  MOVE.B      #14, D0
0000104E  4E4F                      38                  TRAP        #15
00001050  224C                      39                  MOVEA.L     A4,A1                       * reset address at A1 to get user input
00001052  103C 0002                 40                  MOVE.B      #2, D0                      * take address as a string
00001056  4E4F                      41                  TRAP        #15
00001058  23D1 0000117C             42                  MOVE.L      (A1),ascii_val_start        * save in DC
0000105E  48A7 FFFE                 43                  MOVEM.W     A0-A6/D0-D7,-(SP)           * push registers on the stack
00001062  4EB9 000010AA             44                  JSR         get_addr                    * strip ascii address into hex
00001068  4C9F 7FFF                 45                  MOVEM.W     (SP)+, A0-A6/D0-D7          * restore the registers
0000106C  33F9 00001180 00001184    46                  MOVE.W      addr_val_temp, end_val      * store address in end_val
00001076  3C39 00001184             47                  MOVE.W      end_val, D6                 * check if result is correct
0000107C  3A79 00001182             48                  MOVEA.W     st_val,A5                   * store start val in A5
00001082  3C79 00001184             49                  MOVEA.W     end_val,A6                  * store end val in A6
00001088                            50                  
00001088  43F9 00001CFD             51                  LEA         outputStart,A1              *ouput starting messaage
0000108E  103C 000E                 52                  MOVE.B      #14,D0          
00001092  4E4F                      53                  TRAP        #15
00001094                            54                  
00001094  43F9 00001CF2             55                  LEA         outputNextLine,A1           *output nextline
0000109A  103C 000E                 56                  MOVE.B      #14,D0
0000109E  4E4F                      57                  TRAP        #15
000010A0                            58                  
000010A0  16BC 001E                 59                  MOVE.B      #line_count,(A3)
000010A4  5513                      60                  SUBQ.B      #2,(A3)
000010A6  6000 00DE                 61                  BRA         getOpCode                   * Jump to getOpCode sub routine
000010AA                            62  
000010AA                            63                  
000010AA                            64  
000010AA                            65  get_addr                            
000010AA  4247                      66                  CLR.W       D7                          * we need D7 to be 0
000010AC  43F9 0000117C             67                  LEA         ascii_val_start, A1         * load ascii value to be stripped
000010B2  1019                      68                  MOVE.B      (A1)+,D0                    * store first byte in D0
000010B4  0240 00FF                 69                  ANDI.W      #ascii_mask,D0              * mask the first byte
000010B8  4EB9 000010FA             70                  JSR         strip_ascii                 * strip ascii char into hex
000010BE  E140                      71                  ASL.W       #8,D0                       * shift left 8
000010C0  E940                      72                  ASL.W       #4,D0                       * shift left 4
000010C2  8E40                      73                  OR.W        D0,D7
000010C4  1019                      74                  MOVE.B      (A1)+,D0                    * move next byte into D0
000010C6  0240 00FF                 75                  ANDI.W      #ascii_mask,D0              * mask the second byte
000010CA  4EB9 000010FA             76                  JSR         strip_ascii                 * strip ascii to hex
000010D0  E140                      77                  ASL.W       #8,D0                       * shift left 8
000010D2  8E40                      78                  OR.W        D0,D7
000010D4  1019                      79                  MOVE.B      (A1)+,D0                    * move next byte into D0
000010D6  0240 00FF                 80                  ANDI.W      #ascii_mask,D0              * mask byte in D0
000010DA  4EB9 000010FA             81                  JSR         strip_ascii                 * strip ascii into hex
000010E0  E940                      82                  ASL.W       #4,D0                       * shift left 4
000010E2  8E40                      83                  OR.W        D0,D7
000010E4  1019                      84                  MOVE.B      (A1)+,D0                    * move final byte into D0
000010E6  0240 00FF                 85                  ANDI.W      #ascii_mask,D0              * mask final byte
000010EA  4EB9 000010FA             86                  JSR         strip_ascii                 * strip it to hex
000010F0  8E40                      87                  OR.W        D0,D7
000010F2  33C7 00001180             88                  MOVE.W      D7,addr_val_temp            * store hex address in temp value
000010F8  4E75                      89                  RTS                                     * return
000010FA                            90       
000010FA                            91                  
000010FA  B03C 0039                 92  strip_ascii     CMP.B       #$39,D0                     *Is it in range of 0-9?
000010FE  6F00 001A                 93                  BLE         sub30                       *It's a number
00001102  B03C 0046                 94                  CMP.B       #$46,D0                     *Is it A...F?
00001106  6F00 000A                 95                  BLE         sub37                       *It's A...F
0000110A  0400 0057                 96                  SUB.B       #$57,D0                     *It's a...f
0000110E  6000 000E                 97                  BRA         ret_sa                      *Go back
00001112  0400 0037                 98  sub37           SUB.B       #$37,D0                     *Strip 37
00001116  6000 0006                 99                  BRA         ret_sa                      *Go back
0000111A  0400 0030                100  sub30           SUB.B       #$30,D0                     *Strip 30
0000111E  4E75                     101  ret_sa          RTS                                     *Go back
00001120                           102  
00001120                           103  
00001120                           104  *---- Data ----
00001120                           105  
00001120= 45 6E 74 65 72 20 ...    106  start_addr_msg  DC.B    'Enter a starting address to disassemble: $', 0
0000114B= 45 6E 74 65 72 20 ...    107  end_addr_msg    DC.B    'Enter a ending address to stop disassembling: $', 0
0000117C= 0000                     108  ascii_val_start DC.W    $0000
0000117E= 0000                     109  ascii_val_end   DC.W    $0000
00001180= 0000                     110  addr_val_temp   DC.W    $0000
00001182= 0000                     111  st_val          DC.W    $0000
00001184= 0000                     112  end_val         DC.W    $0000
00001186                           113  
00001186                           114  *--- Data end ----
00001186                           115  
00001186                           116  
00001186                           117  * Put program  here
00001186                           118  getOpCode                        *Gets opcode
00001186                           119      *LEA     code,A0             *Loads "code" which is the op code
00001186                           120      
00001186  4287                     121      CLR.L   D7
00001188  4286                     122      CLR.L   D6
0000118A  4283                     123      CLR.L   D3
0000118C  4281                     124      CLR.L   D1
0000118E  4280                     125      CLR.L   D0
00001190  4285                     126      CLR.L   D5
00001192  4284                     127      CLR.L   D4
00001194                           128      
00001194  5313                     129      SUBQ.B  #1,(A3)
00001196  0C13 0000                130      CMP.B   #0,(A3)
0000119A  6700 0A62                131      BEQ     pageContinue
0000119E                           132      
0000119E  320D                     133      MOVE.W  A5,D1               *move starting addr into D1
000011A0  103C 000F                134      MOVE.B  #15,D0              *convert number into hex and output to console
000011A4  143C 0010                135      MOVE.B  #16,D2
000011A8  4E4F                     136      TRAP    #15    
000011AA  381D                     137      MOVE.W  (A5)+,D4            *move data at starting addr to D4
000011AC                           138      
000011AC  4281                     139      CLR.L   D1
000011AE                           140      
000011AE  43F9 00001CF8            141      LEA     outputColon,A1      *output the colon and a space to the console
000011B4  103C 000E                142      MOVE.B  #14,D0
000011B8  4E4F                     143      TRAP    #15
000011BA                           144      
000011BA  2248                     145      MOVEA.L A0,A1               *used to clear A0
000011BC  3404                     146      MOVE.W  D4,D2               *gets put into D4 and D2
000011BE                           147      
000011BE  E95A                     148      ROL.W   #4,D2               *rotate the first 4 significant bits to lower 4 bits
000011C0                           149      
000011C0  C4BC 0000000F            150      AND.L   #mask,D2            *mask it to get only the first byte
000011C6                           151      
000011C6  1A02                     152      MOVE.B  D2,D5               *put that value into D5
000011C8                           153  
000011C8                           154  nopOpCode
000011C8  B87C 4E71                155      CMP.W   #$4E71,D4
000011CC  6600 0012                156      BNE     rtsOpCode
000011D0                           157      
000011D0  43F9 00001C7C            158      LEA     outputNOP,A1
000011D6  103C 000E                159      MOVE.B  #14,D0
000011DA  4E4F                     160      TRAP    #15
000011DC  6000 0A3A                161      BRA     DONE
000011E0                           162      
000011E0                           163  rtsOpCode
000011E0  B87C 4E75                164      CMP.W   #$4E75,D4
000011E4  6600 000E                165      BNE     leaOpCode
000011E8                           166      
000011E8  43F9 00001C81            167      LEA     outputRTS,A1
000011EE  103C 000E                168      MOVE.B  #14,D0
000011F2  4E4F                     169      TRAP    #15
000011F4                           170      
000011F4                           171  leaOpCode
000011F4  BA3C 0004                172      CMP.B   #4,D5
000011F8  6600 0038                173      BNE     oriOpCode
000011FC  3604                     174      MOVE.W  D4,D3
000011FE  E15B                     175      ROL.W   #8,D3
00001200  B63C 0044                176      CMP.B   #$44,D3
00001204  6700 05E4                177      BEQ     negMethod
00001208  4283                     178      CLR.L   D3
0000120A                           179      
0000120A  43F9 00001C86            180      LEA     outputLEA,A1
00001210  103C 000E                181      MOVE.B  #14,D0
00001214  4E4F                     182      TRAP    #15
00001216                           183      
00001216  4EB9 00001AEA            184      JSR     sourceEA
0000121C                           185      
0000121C  43F9 00001CEE            186      LEA     outputComma,A1
00001222  103C 000E                187      MOVE.B  #14,D0
00001226  4E4F                     188      TRAP    #15
00001228                           189      
00001228  4EB9 00001BE2            190      JSR     addaDestEA
0000122E                           191      
0000122E  6000 09E8                192      BRA     DONE
00001232                           193      
00001232                           194  oriOpCode                       *OR opcode
00001232  BA3C 0000                195      CMP.B   #0,D5               
00001236  6600 00EA                196      BNE     moveByteOpCode      *if not, go to next opcode
0000123A                           197  
0000123A                           198  *-------------------------------------------------Change this when merging         
0000123A  3404                     199      MOVE.W  D4,D2
0000123C  E15A                     200      ROL.W   #8,D2
0000123E  C4BC 0000000F            201      AND.L   #$0000000F,D2
00001244                           202      
00001244  2A02                     203      MOVE.L  D2,D5
00001246                           204      
00001246                           205  oriMethod
00001246  BA3C 0000                206      CMP.B   #0,D5
0000124A  6600 0034                207      BNE     cmpiOpCode
0000124E                           208      
0000124E  43F9 00001C9A            209      LEA     outputORI,A1
00001254  103C 000E                210      MOVE.B  #14,D0
00001258  4E4F                     211      TRAP    #15
0000125A                           212      
0000125A  4EB9 00001A3A            213      JSR     dotOpMode
00001260                           214          
00001260  7407                     215      MOVE.L  #7,D2
00001262  7604                     216      MOVE.L  #4,D3
00001264  4EB9 00001B64            217      JSR     immediateData
0000126A                           218      
0000126A  43F9 00001CEE            219      LEA     outputComma,A1
00001270  103C 000E                220      MOVE.B  #14,D0
00001274  4E4F                     221      TRAP    #15
00001276                           222      
00001276  4EB9 00001AEA            223      JSR     sourceEA
0000127C  6000 099A                224      BRA     DONE
00001280                           225  
00001280                           226  cmpiOpCode
00001280  BA3C 000C                227      CMP.B   #12,D5
00001284  6600 0034                228      BNE     bclrOpCode
00001288                           229      
00001288                           230  cmpiMethod
00001288  43F9 00001CA5            231      LEA     outputCMPI,A1
0000128E  103C 000E                232      MOVE.B  #14,D0
00001292  4E4F                     233      TRAP    #15
00001294                           234      
00001294  4EB9 00001A3A            235      JSR     dotOpMode
0000129A                           236      
0000129A  7407                     237      MOVE.L  #7,D2
0000129C  7604                     238      MOVE.L  #4,D3
0000129E  4EB9 00001B64            239      JSR     immediateData
000012A4                           240      
000012A4  43F9 00001CEE            241      LEA     outputComma,A1
000012AA  103C 000E                242      MOVE.B  #14,D0
000012AE  4E4F                     243      TRAP    #15
000012B0                           244      
000012B0  4EB9 00001AEA            245      JSR     sourceEA
000012B6  6000 0960                246      BRA     DONE
000012BA                           247      
000012BA                           248  bclrOpCode
000012BA  43F9 00001CAE            249      LEA     outputBCLR,A1
000012C0  103C 000E                250      MOVE.B  #14,D0
000012C4  4E4F                     251      TRAP    #15
000012C6                           252      
000012C6  720A                     253      MOVE.L  #10,D1
000012C8  2A04                     254      MOVE.L  D4,D5
000012CA  E37D                     255      ROL.W   D1,D5
000012CC  CABC 00000007            256      AND.L   #$00000007,D5
000012D2                           257      
000012D2  BA3C 0002                258      CMP.B   #2,D5
000012D6  6700 002A                259      BEQ     bclrImmediate
000012DA                           260      
000012DA  7400                     261      MOVE.L  #0,D2
000012DC  2604                     262      MOVE.L  D4,D3
000012DE  EF5B                     263      ROL.W   #7,D3
000012E0  C6BC 00000007            264      AND.L   #$00000007,D3
000012E6                           265      
000012E6  4EB9 00001AFC            266      JSR     DnMode
000012EC                           267      
000012EC  43F9 00001CEE            268      LEA     outputComma,A1
000012F2  103C 000E                269      MOVE.B  #14,D0
000012F6  4E4F                     270      TRAP    #15
000012F8                           271      
000012F8  4EB9 00001AEA            272      JSR     sourceEA
000012FE                           273      
000012FE  6000 0918                274      BRA     DONE
00001302                           275          
00001302                           276  bclrImmediate
00001302                           277      
00001302  7407                     278      MOVE.L  #7,D2
00001304  7604                     279      MOVE.L  #4,D3
00001306                           280      
00001306  4EB9 00001B64            281      JSR     immediateData
0000130C                           282      
0000130C  43F9 00001CEE            283      LEA     outputComma,A1
00001312  103C 000E                284      MOVE.B  #14,D0
00001316  4E4F                     285      TRAP    #15
00001318                           286      
00001318  4EB9 00001AEA            287      JSR     sourceEA
0000131E                           288      
0000131E  6000 08F8                289      BRA     DONE    
00001322                           290    
00001322                           291  
00001322                           292      
00001322                           293  moveByteOpCode                  *MOVE.B opcode
00001322  BA3C 0001                294      CMP.B   #1,D5
00001326  6600 0036                295      BNE     moveWordOpCode 
0000132A                           296  
0000132A                           297  moveByteMethod                  *MOVE.B output
0000132A  43F9 00001C61            298      LEA     outputMOVE,A1       *Outputs "MOVE" onto console
00001330  103C 000E                299      MOVE.B  #14,D0
00001334  4E4F                     300      TRAP    #15
00001336                           301      
00001336  43F9 00001CD5            302      LEA     outputByte,A1       *Outputs ".B" onto console
0000133C  103C 000E                303      MOVE.B  #14,D0
00001340  4E4F                     304      TRAP    #15
00001342                           305      
00001342  4EB9 00001AEA            306      JSR     sourceEA            *Jump to subroutine sourceEA
00001348                           307      
00001348  43F9 00001CEE            308      LEA     outputComma,A1      *Outputs a comma onto console
0000134E  103C 000E                309      MOVE.B  #14,D0
00001352  4E4F                     310      TRAP    #15
00001354                           311      
00001354  4EB9 00001BC6            312      JSR     moveDestinationEA   *Jump to subroutine moveDestinationEA
0000135A                           313      
0000135A  6000 08BC                314      BRA     DONE                *Yay done
0000135E                           315      
0000135E                           316  
0000135E                           317  moveWordOpCode                  *MOVE.W opcode
0000135E  BA3C 0003                318      CMP.B   #3,D5
00001362  6600 005A                319      BNE     moveLongOpCode
00001366                           320     
00001366                           321  moveWordMethod                  *MOVE.W output
00001366  3404                     322      MOVE.W  D4,D2               *D4 has the original word
00001368  323C 000A                323      MOVE.W  #10,D1              *Move the value 10 into D1 since ROL has issues with
0000136C  E37A                     324      ROL.W   D1,D2               *   immediate values > 8
0000136E                           325      
0000136E  B47C 0001                326      CMP.W   #1,D2               *If the rotated value is a 1, it's a MOVEA.W
00001372  6700 0012                327      BEQ     moveAWordMethod    
00001376                           328      
00001376  43F9 00001C61            329      LEA     outputMOVE,A1       *Outputs "MOVE." onto console
0000137C  103C 000E                330      MOVE.B  #14,D0
00001380  4E4F                     331      TRAP    #15
00001382  6000 0012                332      BRA     moveWordMethodpt2   *Go to the rest of the method~
00001386                           333      
00001386                           334  moveAWordMethod                 *MOVEA.W opcode
00001386  43F9 00001C66            335      LEA     outputMOVEA,A1      *Outputs "MOVEA" onto console
0000138C  103C 000E                336      MOVE.B  #14,D0
00001390  4E4F                     337      TRAP    #15
00001392  6000 0002                338      BRA     moveWordMethodpt2   *Go to the rest of the method~
00001396                           339      
00001396                           340  moveWordMethodpt2               *Part 2 of the MOVE/MOVEA.W series
00001396  43F9 00001CD9            341      LEA     outputWord,A1       *Outputs ".W" onto console
0000139C  103C 000E                342      MOVE.B  #14,D0
000013A0  4E4F                     343      TRAP    #15
000013A2                           344      
000013A2  4EB9 00001AEA            345      JSR     sourceEA            *Yay subroutines
000013A8                           346      
000013A8  43F9 00001CEE            347      LEA     outputComma,A1      *outputs a comma onto console
000013AE  103C 000E                348      MOVE.B  #14,D0
000013B2  4E4F                     349      TRAP    #15
000013B4                           350      
000013B4  4EB9 00001BC6            351      JSR     moveDestinationEA   *Gotta check the destination~
000013BA                           352  
000013BA  6000 085C                353      BRA     DONE                *I'm done, bra
000013BE                           354  
000013BE                           355  moveLongOpCode                  *MOVE.L opcode
000013BE  BA3C 0002                356      CMP.B   #2,D5
000013C2  6600 005C                357      BNE     addOpCode
000013C6                           358      
000013C6                           359  moveLongOpCodeMethod            *MOVE.L output
000013C6  340A                     360      MOVE.W  A2,D2               *Gotta check if it's actually a MOVEA
000013C8  323C 000A                361      MOVE.W  #10,D1
000013CC  E37A                     362      ROL.W   D1,D2
000013CE                           363      
000013CE  B47C 0001                364      CMP.W   #1,D2
000013D2  6700 0012                365      BEQ     moveALongMethod   
000013D6                           366  
000013D6  43F9 00001C61            367      LEA     outputMOVE,A1       *outputs "MOVE" onto console
000013DC  103C 000E                368      MOVE.B  #14,D0
000013E0  4E4F                     369      TRAP    #15
000013E2                           370      
000013E2  6000 0012                371      BRA     moveLongMethodpt2   *Go to Part 2 of the MOVE series~
000013E6                           372      
000013E6                           373  moveALongMethod                 *MOVEA.L output
000013E6  43F9 00001C66            374      LEA     outputMOVEA,A1      *Outputs "MOVEA" onto console
000013EC  103C 000E                375      MOVE.B  #14,D0
000013F0  4E4F                     376      TRAP    #15
000013F2  6000 0002                377      BRA     moveLongMethodpt2   *Go to part 2~
000013F6                           378      
000013F6                           379  moveLongMethodpt2               *Part 2, the sequel(SQL?)
000013F6                           380      
000013F6  43F9 00001CDD            381      LEA     outputLong,A1       *Outputs ".L" onto console
000013FC  103C 000E                382      MOVE.B  #14,D0
00001400  4E4F                     383      TRAP    #15
00001402                           384      
00001402  5207                     385      ADD.B   #1,D7
00001404                           386      
00001404  4EB9 00001AEA            387      JSR     sourceEA            *Go output source
0000140A                           388      
0000140A  43F9 00001CEE            389      LEA     outputComma,A1      *Yay commas
00001410  103C 000E                390      MOVE.B  #14,D0
00001414  4E4F                     391      TRAP    #15
00001416                           392      
00001416  4EB9 00001BC6            393      JSR     moveDestinationEA    *Output destination
0000141C  6000 07FA                394      BRA     DONE
00001420                           395  
00001420                           396  addOpCode                        *ADD opcode
00001420  BA3C 000D                397      CMP.B   #13,D5
00001424  6600 0040                398      BNE     subOpCode    
00001428                           399      
00001428                           400  addMethod                        *ADD output
00001428  43F9 00001C52            401      LEA     outputADD,A1         *Outputs "ADD" onto console
0000142E  103C 000E                402      MOVE.B  #14,D0
00001432  4E4F                     403      TRAP    #15
00001434                           404      
00001434  4EB9 00001A3A            405      JSR     dotOpMode           *Checks if it's a byte,word, or long
0000143A                           406      
0000143A  BC3C 0001                407      CMP.B   #1,D6               *If D6 == 1, the data register is the source
0000143E  6700 05C2                408      BEQ     altOrder            *   D6 was decided in dotOpMode(?)
00001442                           409      
00001442  BC3C 0002                410      CMP.B   #2,D6
00001446  6700 05D6                411      BEQ     addaOrder           *go do ADDA stuff
0000144A                           412      
0000144A  4EB9 00001AEA            413      JSR     sourceEA            *outputs what the source is
00001450                           414      
00001450  43F9 00001CEE            415      LEA     outputComma,A1      *Commas~~~
00001456  103C 000E                416      MOVE.B  #14,D0
0000145A  4E4F                     417      TRAP    #15
0000145C                           418      
0000145C  4EB9 00001B9A            419      JSR     addDestinationEA       *outputs what the destination is
00001462                           420      
00001462  6000 07B4                421      BRA     DONE
00001466                           422      
00001466                           423  subOpCode
00001466  BA3C 0009                424      CMP.B   #9,D5               *is it SUB?
0000146A  6600 0038                425      BNE     subQOpCode          *not SUB, check if SUBQ
0000146E                           426  
0000146E                           427  subMethod
0000146E  43F9 00001C58            428      LEA     outputSUB,A1        *output SUB to the console
00001474  103C 000E                429      MOVE.B  #14,D0  
00001478  4E4F                     430      TRAP    #15
0000147A                           431  
0000147A  4EB9 00001A3A            432      JSR     dotOpMode           *check if its a B,W, or L
00001480                           433  
00001480  BC3C 0001                434      CMP.B   #1,D6               *if D6 == 1, the data register is the source
00001484  6700 057C                435      BEQ     altOrder
00001488                           436  
00001488  4EB9 00001AEA            437      JSR     sourceEA            *outputs what the source is
0000148E                           438  
0000148E  43F9 00001CEE            439      LEA     outputComma,A1      *commas
00001494  103C 000E                440      MOVE.B  #14,D0
00001498  4E4F                     441      TRAP    #15
0000149A                           442  
0000149A  4EB9 00001B9A            443      JSR     addDestinationEA    *outputs what ths destination is
000014A0                           444  
000014A0  6000 0776                445      BRA     DONE                
000014A4                           446  
000014A4                           447  subQOpCode
000014A4  BA3C 0005                448      CMP.B   #5,D5               *is it SUBQ?
000014A8  6600 008A                449      BNE     orOpCode            *check if its DIVS.W
000014AC                           450      
000014AC                           451  subQMethod
000014AC  43F9 00001C5C            452      LEA     outputSUBQ,A1       *output SUBQ
000014B2  103C 000E                453      MOVE.B  #14,D0
000014B6  4E4F                     454      TRAP    #15
000014B8                           455      
000014B8  3604                     456      MOVE.W  D4,D3               *move original word from D4
000014BA  123C 000A                457      MOVE.B  #10,D1              *hacks
000014BE  E37B                     458      ROL.W   D1,D3               *ROL by 10
000014C0  C6BC 00000003            459      AND.L   #00000003,D3        *Mask 
000014C6  4EB9 00001AAE            460      JSR     byteOpMode          *check if B,W,L
000014CC                           461      
000014CC  4EB9 000014E8            462      JSR     subQData            *outputs #1-#8
000014D2                           463      
000014D2  43F9 00001CEE            464      LEA     outputComma,A1      *commas
000014D8  103C 000E                465      MOVE.B  #14,D0
000014DC  4E4F                     466      TRAP    #15
000014DE                           467      
000014DE  4EB9 00001AEA            468      JSR     sourceEA            *get the source
000014E4                           469      
000014E4  6000 0732                470      BRA     DONE
000014E8                           471      
000014E8                           472      
000014E8                           473  subQData
000014E8  3604                     474      MOVE.W  D4,D3               *move original word from D4
000014EA  EF5B                     475      ROL.W   #7,D3               *ROL 7
000014EC  C6BC 00000007            476      AND.L   #$00000007,D3       *mask the bits
000014F2                           477      
000014F2  B63C 0000                478      CMP.B   #0,D3               *if its 0 display 8
000014F6  6700 0022                479      BEQ     display8ForSubQ
000014FA                           480      
000014FA  B63C 0008                481      CMP.B   #8,D3
000014FE  6C00 04E4                482      BGE     dataOpCode
00001502                           483      
00001502  43F9 00001CEA            484      LEA     outputPound,A1      *output #
00001508  103C 000E                485      MOVE.B  #14,D0
0000150C  4E4F                     486      TRAP    #15
0000150E                           487      
0000150E  4281                     488      CLR.L   D1
00001510  1203                     489      MOVE.B  D3,D1               *output 1-7
00001512  103C 0003                490      MOVE.B  #3,D0
00001516  4E4F                     491      TRAP    #15
00001518                           492      
00001518  4E75                     493      RTS                         *return to subQmethod
0000151A                           494      
0000151A                           495  display8ForSubQ
0000151A                           496  
0000151A  43F9 00001CEA            497      LEA     outputPound,A1      *output #
00001520  103C 000E                498      MOVE.B  #14,D0
00001524  4E4F                     499      TRAP    #15
00001526  4281                     500      CLR.L   D1
00001528  123C 0008                501      MOVE.B  #8,D1               *output 8
0000152C  103C 0003                502      MOVE.B  #3,D0
00001530  4E4F                     503      TRAP    #15
00001532                           504      
00001532  4E75                     505      RTS                         *return to subQMethod
00001534                           506  
00001534                           507  orOpCode
00001534  BA3C 0008                508      CMP.B   #8,D5   
00001538  6600 008A                509      BNE     eorOpCode
0000153C                           510      
0000153C  2A04                     511      MOVE.L  D4,D5
0000153E  720A                     512      MOVE.L  #10,D1
00001540  E37D                     513      ROL.W   D1,D5
00001542                           514      
00001542  CABC 00000007            515      AND.L   #$00000007,D5
00001548                           516      
00001548  BA3C 0007                517      CMP.B   #7,D5
0000154C  6700 0038                518      BEQ     divsWOpCode
00001550                           519      
00001550                           520  orMethod
00001550  43F9 00001C9E            521      LEA     outputOR,A1
00001556  103C 000E                522      MOVE.B  #14,D0
0000155A  4E4F                     523      TRAP    #15
0000155C                           524      
0000155C  4EB9 00001A3A            525      JSR     dotOpMode
00001562                           526      
00001562  BC3C 0001                527      CMP.B   #1,D6
00001566  6700 049A                528      BEQ     altOrder
0000156A                           529      
0000156A  4EB9 00001AEA            530      JSR     sourceEA
00001570                           531      
00001570  43F9 00001CEE            532      LEA     outputComma,A1
00001576  103C 000E                533      MOVE.B  #14,D0
0000157A  4E4F                     534      TRAP    #15
0000157C                           535      
0000157C  4EB9 00001B9A            536      JSR     addDestinationEA
00001582                           537      
00001582  6000 0694                538      BRA     DONE
00001586                           539      
00001586                           540  divsWOpCode
00001586                           541  *    CMP.B   #8,D5
00001586                           542  *    BEQ     divsWCheck          *bits 8,7,6 need to make 7 to be DIVSW
00001586                           543  *    BRA     eorOpCode
00001586                           544  *    
00001586                           545  divsWCheck
00001586  3604                     546      MOVE.W  D4,D3
00001588  143C 000A                547      MOVE.B  #10,D2
0000158C  E57B                     548      ROL.W   D2,D3
0000158E  C6BC 00000007            549      AND.L   #$00000007,D3
00001594  B63C 0007                550      CMP.B   #7,D3
00001598  6600 067E                551      BNE     DONE
0000159C                           552      
0000159C  43F9 00001C74            553      LEA     outputDIVSW,A1
000015A2  103C 000E                554      MOVE.B  #14,D0
000015A6  4E4F                     555      TRAP    #15
000015A8                           556      
000015A8  4EB9 00001AEA            557      JSR     sourceEA 
000015AE                           558      
000015AE  43F9 00001CEE            559      LEA     outputComma,A1
000015B4  103C 000E                560      MOVE.B  #14,D0
000015B8  4E4F                     561      TRAP    #15
000015BA                           562      
000015BA  4EB9 00001B9A            563      JSR     addDestinationEA
000015C0                           564      
000015C0  6000 0656                565      BRA     DONE
000015C4                           566      
000015C4                           567  eorOpCode
000015C4  BA3C 000B                568      CMP.B   #11,D5
000015C8  6600 0078                569      BNE     shiftsOpCode
000015CC                           570      
000015CC  2A04                     571      MOVE.L  D4,D5
000015CE  E19D                     572      ROL.L   #8,D5
000015D0  CABC 00000001            573      AND.L   #$00000001,D5
000015D6                           574      
000015D6                           575      
000015D6                           576  eorMethod
000015D6  BA3C 0001                577      CMP.B   #1,D5
000015DA  6600 0030                578      BNE     cmpOpCode
000015DE                           579      
000015DE  43F9 00001CA1            580      LEA     outputEOR,A1
000015E4  103C 000E                581      MOVE.B  #14,D0
000015E8  4E4F                     582      TRAP    #15
000015EA                           583      
000015EA  4EB9 00001A3A            584      JSR     dotOpMode
000015F0                           585      
000015F0  4EB9 00001B9A            586      JSR     addDestinationEA
000015F6                           587      
000015F6  43F9 00001CEE            588      LEA     outputComma,A1
000015FC  103C 000E                589      MOVE.B  #14,D0
00001600  4E4F                     590      TRAP    #15
00001602                           591      
00001602  4EB9 00001AEA            592      JSR     sourceEA
00001608                           593      
00001608  6000 060E                594      BRA     DONE    
0000160C                           595  
0000160C                           596  cmpOpCode
0000160C  BA3C 0000                597      CMP.B   #0,D5
00001610  6600 0606                598      BNE     DONE
00001614                           599      
00001614  43F9 00001CAA            600      LEA     outputCMP,A1
0000161A  103C 000E                601      MOVE.B  #14,D0
0000161E  4E4F                     602      TRAP    #15
00001620                           603      
00001620  4EB9 00001A3A            604      JSR     dotOpMode
00001626                           605      
00001626  4EB9 00001AEA            606      JSR     sourceEA
0000162C                           607      
0000162C  43F9 00001CEE            608      LEA     outputComma,A1
00001632  103C 000E                609      MOVE.B  #14,D0
00001636  4E4F                     610      TRAP    #15
00001638                           611      
00001638  4EB9 00001B9A            612      JSR     addDestinationEA
0000163E                           613      
0000163E  6000 05D8                614      BRA     DONE
00001642                           615     
00001642                           616  shiftsOpCode
00001642  BA3C 000E                617      CMP.B   #14,D5
00001646  6600 0166                618      BNE     mulsWOpCode
0000164A                           619      
0000164A  2A04                     620      MOVE.L  D4,D5
0000164C  E65D                     621      ROR.W   #3,D5
0000164E  CABC 00000003            622      AND.L   #$00000003,D5
00001654                           623      
00001654                           624  lsdOpCode
00001654  BA3C 0001                625      CMP.B   #1,D5
00001658  6600 0036                626      BNE     asdOpCode
0000165C                           627      
0000165C                           628  lsdMethod
0000165C  43F9 00001CB4            629      LEA     outputLS,A1
00001662  103C 000E                630      MOVE.B  #14,D0
00001666  4E4F                     631      TRAP    #15
00001668                           632      
00001668  4EB9 00001708            633      JSR     leftRight
0000166E                           634      
0000166E  4EB9 00001A3A            635      JSR     dotOpMode
00001674                           636      
00001674  4EB9 00001736            637      JSR     shiftSourceEA
0000167A                           638      
0000167A  43F9 00001CEE            639      LEA     outputComma,A1
00001680  103C 000E                640      MOVE.B  #14,D0
00001684  4E4F                     641      TRAP    #15
00001686                           642      
00001686  4EB9 00001790            643      JSR     shiftDestEA
0000168C                           644      
0000168C  6000 058A                645      BRA     DONE
00001690                           646   
00001690                           647  asdOpCode
00001690  BA3C 0000                648      CMP.B   #0,D5
00001694  6600 0036                649      BNE     rodOpCode
00001698                           650      
00001698  43F9 00001CB7            651      LEA     outputAS,A1
0000169E  103C 000E                652      MOVE.B  #14,D0
000016A2  4E4F                     653      TRAP    #15
000016A4                           654      
000016A4  4EB9 00001708            655      JSR     leftRight
000016AA                           656      
000016AA  4EB9 00001A3A            657      JSR     dotOpMode
000016B0                           658      
000016B0  4EB9 00001736            659      JSR     shiftSourceEA
000016B6                           660      
000016B6  43F9 00001CEE            661      LEA     outputComma,A1
000016BC  103C 000E                662      MOVE.B  #14,D0
000016C0  4E4F                     663      TRAP    #15
000016C2                           664      
000016C2  4EB9 00001790            665      JSR     shiftDestEA    
000016C8                           666      
000016C8  6000 054E                667      BRA     DONE
000016CC                           668      
000016CC                           669  rodOpCode
000016CC  BA3C 0003                670      CMP.B   #3,D5
000016D0  6600 0546                671      BNE     DONE
000016D4                           672      
000016D4  43F9 00001CBA            673      LEA     outputRO,A1
000016DA  103C 000E                674      MOVE.B  #14,D0
000016DE  4E4F                     675      TRAP    #15
000016E0                           676      
000016E0  4EB9 00001708            677      JSR     leftRight
000016E6                           678      
000016E6  4EB9 00001A3A            679      JSR     dotOpMode
000016EC                           680      
000016EC  4EB9 00001736            681      JSR     shiftSourceEA
000016F2                           682      
000016F2  43F9 00001CEE            683      LEA     outputComma,A1
000016F8  103C 000E                684      MOVE.B  #14,D0
000016FC  4E4F                     685      TRAP    #15
000016FE                           686      
000016FE  4EB9 00001790            687      JSR     shiftDestEA
00001704                           688      
00001704  6000 0512                689      BRA     DONE
00001708                           690      
00001708                           691  leftRight
00001708  2604                     692      MOVE.L  D4,D3
0000170A  E15B                     693      ROL.W   #8,D3
0000170C  C6BC 00000001            694      AND.L   #$00000001,D3
00001712                           695  
00001712  B63C 0000                696      CMP.B   #0,D3
00001716  6700 0010                697      BEQ     rightRight
0000171A                           698      
0000171A  43F9 00001CBD            699      LEA     outputLeft,A1
00001720  103C 000E                700      MOVE.B  #14,D0
00001724  4E4F                     701      TRAP    #15
00001726                           702      
00001726  4E75                     703      RTS
00001728                           704      
00001728                           705  rightRight
00001728  43F9 00001CBF            706      LEA     outputRight,A1
0000172E  103C 000E                707      MOVE.B  #14,D0
00001732  4E4F                     708      TRAP    #15
00001734                           709      
00001734  4E75                     710      RTS
00001736                           711      
00001736                           712  shiftSourceEA
00001736  2404                     713      MOVE.L  D4,D2
00001738  EA5A                     714      ROR.W   #5,D2
0000173A  C4BC 00000001            715      AND.L   #$00000001,D2
00001740                           716  
00001740  2604                     717      MOVE.L  D4,D3
00001742  EF5B                     718      ROL.W   #7,D3
00001744  C6BC 00000007            719      AND.L   #$00000007,D3
0000174A                           720      
0000174A  B43C 0000                721      CMP.B   #0,D2
0000174E  6700 0018                722      BEQ     shiftImmediateEA
00001752                           723      
00001752  43F9 00001CE8            724      LEA     outputDn,A1
00001758  103C 000E                725      MOVE.B  #14,D0
0000175C  4E4F                     726      TRAP    #15
0000175E                           727      
0000175E  2203                     728      MOVE.L  D3,D1
00001760  103C 0003                729      MOVE.B  #3,D0
00001764  4E4F                     730      TRAP    #15
00001766                           731      
00001766  4E75                     732      RTS
00001768                           733      
00001768                           734  shiftImmediateEA
00001768  43F9 00001CEA            735      LEA     outputPound,A1
0000176E  103C 000E                736      MOVE.B  #14,D0
00001772  4E4F                     737      TRAP    #15
00001774                           738      
00001774  B63C 0000                739      CMP.B   #0,D3
00001778  6700 000C                740      BEQ     shiftImmediateEight
0000177C                           741      
0000177C  2203                     742      MOVE.L  D3,D1
0000177E  103C 0003                743      MOVE.B  #3,D0
00001782  4E4F                     744      TRAP    #15
00001784                           745      
00001784  4E75                     746      RTS
00001786                           747      
00001786                           748  shiftImmediateEight
00001786  7208                     749      MOVE.L  #8,D1
00001788  103C 0003                750      MOVE.B  #3,D0
0000178C  4E4F                     751      TRAP    #15
0000178E                           752      
0000178E  4E75                     753      RTS
00001790                           754      
00001790                           755  shiftDestEA
00001790  2604                     756      MOVE.L  D4,D3
00001792  C6BC 00000007            757      AND.L   #$00000007,D3
00001798                           758      
00001798  43F9 00001CE8            759      LEA     outputDn,A1
0000179E  103C 000E                760      MOVE.B  #14,D0
000017A2  4E4F                     761      TRAP    #15
000017A4                           762      
000017A4  2203                     763      MOVE.L  D3,D1
000017A6  103C 0003                764      MOVE.B  #3,D0
000017AA  4E4F                     765      TRAP    #15
000017AC                           766      
000017AC  4E75                     767      RTS
000017AE                           768      
000017AE                           769  mulsWOpCode
000017AE  BA3C 000C                770      CMP.B   #12,D5
000017B2  6600 002A                771      BNE     negOpCode    
000017B6                           772  
000017B6                           773  mulsWMethod
000017B6  43F9 00001C6C            774      LEA     outputMULSW,A1
000017BC  103C 000E                775      MOVE.B  #14,D0
000017C0  4E4F                     776      TRAP    #15
000017C2                           777      
000017C2  4EB9 00001AEA            778      JSR     sourceEA
000017C8                           779      
000017C8  43F9 00001CEE            780      LEA     outputComma,A1
000017CE  103C 000E                781      MOVE.B  #14,D0
000017D2  4E4F                     782      TRAP    #15
000017D4                           783      
000017D4  4EB9 00001B9A            784      JSR     addDestinationEA
000017DA                           785      
000017DA  6000 043C                786      BRA     DONE
000017DE                           787      
000017DE                           788  negOpCode
000017DE  3604                     789      MOVE.W  D4,D3
000017E0  E15B                     790      ROL.W   #8,D3
000017E2  B63C 0044                791      CMP.B   #$44,D3
000017E6  6600 002E                792      BNE     braOpCode
000017EA                           793      
000017EA                           794  negMethod
000017EA  43F9 00001C91            795      LEA     outputNEG,A1        *output NEG to the console
000017F0  103C 000E                796      MOVE.B  #14,D0
000017F4  4E4F                     797      TRAP    #15
000017F6                           798      
000017F6  4283                     799      CLR.L   D3
000017F8  3604                     800      MOVE.W  D4,D3               *move original word from D4
000017FA  123C 000A                801      MOVE.B  #10,D1              *hacks
000017FE  E37B                     802      ROL.W   D1,D3               *ROL by 10
00001800  C6BC 00000003            803      AND.L   #00000003,D3        *Mask 
00001806  4EB9 00001AAE            804      JSR     byteOpMode          *check if B,W,L
0000180C                           805          
0000180C  4EB9 00001AEA            806      JSR     sourceEA
00001812                           807      
00001812  6000 0404                808      BRA     DONE
00001816                           809  
00001816                           810  braOpCode
00001816  3604                     811      MOVE.W  D4,D3               *move the opcode word into D3
00001818  E15B                     812      ROL.W   #8,D3               *isolate the last byte
0000181A  B63C 0060                813      CMP.B   #$60,D3             *is it a BRA?
0000181E  6600 0158                814      BNE     bccOpCode           *its data then
00001822                           815      
00001822                           816  braMethod
00001822  43F9 00001C95            817      LEA     outputBRA,A1        
00001828  103C 000E                818      MOVE.B  #14,D0
0000182C  4E4F                     819      TRAP    #15
0000182E                           820  
0000182E                           821  
0000182E                           822  bccDisplacement    
0000182E  1604                     823      MOVE.B  D4,D3
00001830  C67C 00FF                824      AND.W   #$00FF,D3
00001834  B63C 0000                825      CMP.B   #$00,D3
00001838  6700 0048                826      BEQ     bitDisplacement16
0000183C  B63C 00FF                827      CMP.B   #$FF,D3
00001840  6700 00B8                828      BEQ     bitDisplacement32
00001844  E11B                     829      ROL.B   #8,D3
00001846  0A43 00FF                830      EOR.W   #$FF,D3
0000184A  5243                     831      ADD.W   #1,D3
0000184C                           832      
0000184C  43F9 00001CFB            833      LEA     outputNegSign,A1
00001852  103C 000E                834      MOVE.B  #14,D0
00001856  4E4F                     835      TRAP    #15
00001858                           836      
00001858  3203                     837      MOVE.W  D3,D1
0000185A  103C 0003                838      MOVE.B  #3,D0
0000185E  4E4F                     839      TRAP    #15
00001860                           840      
00001860  43F9 00001CF6            841      LEA     outputSpace,A1
00001866  103C 000E                842      MOVE.B  #14,D0
0000186A  4E4F                     843      TRAP    #15
0000186C                           844      
0000186C  304D                     845      MOVE.W  A5,A0
0000186E  90C3                     846      SUBA.W  D3,A0
00001870  3208                     847      MOVE.W  A0,D1
00001872  103C 000F                848      MOVE.B  #15,D0
00001876  143C 0010                849      MOVE.B  #16,D2
0000187A  4E4F                     850      TRAP    #15
0000187C                           851      
0000187C  304C                     852      MOVE.W  A4,A0
0000187E                           853      
0000187E                           854      
0000187E  6000 0398                855      BRA     DONE
00001882                           856     
00001882                           857  bitDisplacement16
00001882                           858      
00001882  381D                     859      MOVE.W  (A5)+,D4
00001884  3604                     860      MOVE.W  D4,D3
00001886  E95B                     861      ROL.W   #4,D3
00001888  C67C 000F                862      AND.W   #$000F,D3
0000188C  B67C 0008                863      CMP.W   #8,D3
00001890  6C00 002C                864      BGE     negBit16
00001894                           865      
00001894  3204                     866      MOVE.W  D4,D1
00001896  103C 0003                867      MOVE.B  #3,D0
0000189A  4E4F                     868      TRAP    #15
0000189C                           869      
0000189C  43F9 00001CF6            870      LEA     outputSpace,A1
000018A2  103C 000E                871      MOVE.B  #14,D0
000018A6  4E4F                     872      TRAP    #15
000018A8                           873      
000018A8  304D                     874      MOVE.W  A5,A0
000018AA  D0C4                     875      ADDA.W  D4,A0
000018AC  3208                     876      MOVE.W  A0,D1
000018AE  103C 000F                877      MOVE.B  #15,D0
000018B2  143C 0010                878      MOVE.B  #16,D2
000018B6  4E4F                     879      TRAP    #15
000018B8                           880      
000018B8  304C                     881      MOVE.W  A4,A0
000018BA                           882      
000018BA  6000 035C                883      BRA DONE
000018BE                           884      
000018BE                           885  negBit16
000018BE                           886  
000018BE  0A44 FFFF                887      EOR.W   #$FFFF,D4
000018C2  5244                     888      ADD.W   #1,D4
000018C4                           889      
000018C4  43F9 00001CFB            890      LEA     outputNegSign,A1
000018CA  103C 000E                891      MOVE.B  #14,D0
000018CE  4E4F                     892      TRAP    #15
000018D0                           893      
000018D0  3204                     894      MOVE.W  D4,D1
000018D2  103C 0003                895      MOVE.B  #3,D0
000018D6  4E4F                     896      TRAP    #15
000018D8                           897      
000018D8  43F9 00001CF6            898      LEA     outputSpace,A1
000018DE  103C 000E                899      MOVE.B  #14,D0
000018E2  4E4F                     900      TRAP    #15
000018E4                           901      
000018E4  304D                     902      MOVE.W  A5,A0
000018E6  90C4                     903      SUBA.W  D4,A0
000018E8  3208                     904      MOVE.W  A0,D1
000018EA  103C 000F                905      MOVE.B  #15,D0
000018EE  143C 0010                906      MOVE.B  #16,D2
000018F2  4E4F                     907      TRAP    #15
000018F4                           908      
000018F4  304C                     909      MOVE.W  A4,A0
000018F6                           910      
000018F6  6000 0320                911      BRA     DONE
000018FA                           912      
000018FA                           913  bitDisplacement32
000018FA                           914  
000018FA  281D                     915      MOVE.L  (A5)+,D4
000018FC  2604                     916      MOVE.L  D4,D3
000018FE  E95B                     917      ROL.W   #4,D3
00001900  C6BC 0000000F            918      AND.L   #$0000000F,D3
00001906  B6BC 00000008            919      CMP.L   #8,D3
0000190C  6C00 002C                920      BGE     negBit32
00001910                           921      
00001910  2204                     922      MOVE.L  D4,D1
00001912  103C 0003                923      MOVE.B  #3,D0
00001916  4E4F                     924      TRAP    #15
00001918                           925      
00001918  43F9 00001CF6            926      LEA     outputSpace,A1
0000191E  103C 000E                927      MOVE.B  #14,D0
00001922  4E4F                     928      TRAP    #15
00001924                           929      
00001924  204D                     930      MOVE.L  A5,A0
00001926  D1C4                     931      ADDA.L  D4,A0
00001928  2208                     932      MOVE.L  A0,D1
0000192A  103C 000F                933      MOVE.B  #15,D0
0000192E  143C 0010                934      MOVE.B  #16,D2
00001932  4E4F                     935      TRAP    #15
00001934                           936      
00001934  204C                     937      MOVE.L  A4,A0
00001936                           938      
00001936  6000 02E0                939      BRA DONE
0000193A                           940  
0000193A                           941  negBit32
0000193A                           942  
0000193A  0A84 FFFFFFFF            943      EOR.L   #$FFFFFFFF,D4
00001940  5284                     944      ADD.L   #1,D4
00001942                           945      
00001942  43F9 00001CFB            946      LEA     outputNegSign,A1
00001948  103C 000E                947      MOVE.B  #14,D0
0000194C  4E4F                     948      TRAP    #15
0000194E                           949      
0000194E  2204                     950      MOVE.L  D4,D1
00001950  103C 0003                951      MOVE.B  #3,D0
00001954  4E4F                     952      TRAP    #15
00001956                           953      
00001956  43F9 00001CF6            954      LEA     outputSpace,A1
0000195C  103C 000E                955      MOVE.B  #14,D0
00001960  4E4F                     956      TRAP    #15
00001962                           957      
00001962  204D                     958      MOVE.L  A5,A0
00001964  91C4                     959      SUBA.L  D4,A0
00001966  2208                     960      MOVE.L  A0,D1
00001968  103C 000F                961      MOVE.B  #15,D0
0000196C  143C 0010                962      MOVE.B  #16,D2
00001970  4E4F                     963      TRAP    #15
00001972                           964      
00001972  204C                     965      MOVE.L  A4,A0
00001974                           966      
00001974  6000 02A2                967      BRA     DONE
00001978                           968      
00001978                           969  bccOpCode
00001978  BA3C 0006                970      CMP.B   #6,D5               *is it Bcc?
0000197C  6600 0066                971      BNE     dataOpCode          *its data then
00001980                           972      
00001980                           973  bccMethod
00001980  3604                     974      MOVE.W  D4,D3
00001982  E15B                     975      ROL.W   #8,D3
00001984  C67C 000F                976      AND.W   #$000F,D3
00001988  B63C 0005                977      CMP.B   #5,D3
0000198C  6700 0016                978      BEQ     bcs
00001990  B63C 000C                979      CMP.B   #$C,D3
00001994  6700 001E                980      BEQ     bge
00001998  B63C 000D                981      CMP.B   #$D,D3
0000199C  6700 0026                982      BEQ     bct
000019A0  6000 0032                983      BRA     bvc
000019A4                           984      
000019A4                           985  bcs
000019A4  43F9 00001CC1            986      LEA     outputBCS,A1
000019AA  103C 000E                987      MOVE.B  #14,D0
000019AE  4E4F                     988      TRAP    #15
000019B0                           989      
000019B0  6000 FE7C                990      BRA     bccDisplacement
000019B4                           991      
000019B4                           992  bge
000019B4  43F9 00001CC6            993      LEA     outputBGE,A1
000019BA  103C 000E                994      MOVE.B  #14,D0
000019BE  4E4F                     995      TRAP    #15
000019C0                           996      
000019C0  6000 FE6C                997      BRA     bccDisplacement
000019C4                           998  
000019C4                           999  bct
000019C4  43F9 00001CCB           1000      LEA     outputBCT,A1
000019CA  103C 000E               1001      MOVE.B  #14,D0
000019CE  4E4F                    1002      TRAP    #15
000019D0                          1003      
000019D0  6000 FE5C               1004      BRA     bccDisplacement
000019D4                          1005      
000019D4                          1006  bvc
000019D4  43F9 00001CD0           1007      LEA     outputBVC,A1
000019DA  103C 000E               1008      MOVE.B  #14,D0
000019DE  4E4F                    1009      TRAP    #15
000019E0                          1010      
000019E0  6000 FE4C               1011      BRA     bccDisplacement
000019E4                          1012             
000019E4                          1013  dataOpCode
000019E4  4283                    1014      CLR.L   D3
000019E6  43F9 00001C8B           1015      LEA     outputData,A1
000019EC  103C 000E               1016      MOVE.B  #14,D0
000019F0  4E4F                    1017      TRAP    #15
000019F2                          1018      
000019F2  3215                    1019      MOVE.W  (A5),D1
000019F4  103C 000F               1020      MOVE.B  #15,D0
000019F8  143C 0010               1021      MOVE.B  #16,D2
000019FC  4E4F                    1022      TRAP    #15
000019FE                          1023      
000019FE  6000 0218               1024      BRA     DONE
00001A02                          1025  
00001A02                          1026  
00001A02                          1027  altOrder                            *outputs the Dn as the source for ADD
00001A02  4EB9 00001B9A           1028      JSR     addDestinationEA
00001A08                          1029      
00001A08  43F9 00001CEE           1030      LEA     outputComma,A1
00001A0E  103C 000E               1031      MOVE.B  #14,D0
00001A12  4E4F                    1032      TRAP    #15
00001A14                          1033      
00001A14  4EB9 00001AEA           1034      JSR     sourceEA
00001A1A  6000 01FC               1035      BRA     DONE
00001A1E                          1036      
00001A1E                          1037  addaOrder                           *ADDA method
00001A1E  4EB9 00001AEA           1038      JSR     sourceEA                *output source first
00001A24                          1039      
00001A24  43F9 00001CEE           1040      LEA     outputComma,A1          *Comma
00001A2A  103C 000E               1041      MOVE.B  #14,D0
00001A2E  4E4F                    1042      TRAP    #15
00001A30                          1043      
00001A30  4EB9 00001BE2           1044      JSR     addaDestEA              *Have to set destination mode in addaDestEA
00001A36  6000 01E0               1045      BRA     DONE
00001A3A                          1046  
00001A3A                          1047  
00001A3A                          1048  dotOpMode                           *Checks if it's a Byte,Word, or Long for ADD and SUB
00001A3A  3604                    1049      MOVE.W  D4,D3                   *Gets the original code from D4                 
00001A3C  143C 000A               1050      MOVE.B  #10,D2                  *yay hacks
00001A40                          1051      
00001A40  E57B                    1052      ROL.W   D2,D3                   *Rotates the original left by 10 bits
00001A42  C6BC 00000007           1053      AND.L   #$00000007,D3           *mask it up
00001A48                          1054      
00001A48  B63C 0003               1055      CMP.B   #3,D3                   
00001A4C  6C00 0006               1056      BGE     altOpMode               *if value is > 3, Dn is the source
00001A50                          1057      
00001A50  6000 005C               1058      BRA     byteOpMode    
00001A54                          1059  
00001A54                          1060  altOpMode                           *But wait, there's more!
00001A54  B63C 0003               1061      CMP.B   #3,D3                   *If it's 3, it's an ADDA.W
00001A58  6700 0016               1062      BEQ     addaWOpMode
00001A5C                          1063      
00001A5C  B63C 0007               1064      CMP.B   #7,D3                   *If it's a 7, it's an ADDA.L
00001A60  6700 002C               1065      BEQ     addaLOpMode             *Otherwise, it's just ADD with Dn in source
00001A64                          1066      
00001A64  1C3C 0001               1067      MOVE.B  #1,D6                   *D6 is 1 if Dn is the source
00001A68  C63C 0003               1068      AND.B   #$3,D3                  *Mask it so it can continue with the output
00001A6C  6000 0040               1069      BRA     byteOpMode              *without the meddling 2^2 bit
00001A70                          1070  
00001A70                          1071  addaWOpMode                         *It's an ADDA.W
00001A70  3C3C 0002               1072      MOVE.W  #2,D6
00001A74                          1073      
00001A74  43F9 00001C56           1074      LEA     outputADDA,A1
00001A7A  103C 000E               1075      MOVE.B  #14,D0
00001A7E  4E4F                    1076      TRAP    #15
00001A80                          1077      
00001A80  43F9 00001CD9           1078      LEA     outputWord,A1
00001A86  103C 000E               1079      MOVE.B  #14,D0
00001A8A  4E4F                    1080      TRAP    #15
00001A8C                          1081      
00001A8C  4E75                    1082      RTS
00001A8E                          1083      
00001A8E                          1084  addaLOpMode                         *It's an ADDA.L
00001A8E  3C3C 0002               1085      MOVE.W  #2,D6
00001A92                          1086      
00001A92  5207                    1087      ADD.B   #1,D7
00001A94                          1088      
00001A94  43F9 00001C56           1089      LEA     outputADDA,A1
00001A9A  103C 000E               1090      MOVE.B  #14,D0
00001A9E  4E4F                    1091      TRAP    #15
00001AA0                          1092      
00001AA0  43F9 00001CDD           1093      LEA     outputLong,A1
00001AA6  103C 000E               1094      MOVE.B  #14,D0
00001AAA  4E4F                    1095      TRAP    #15
00001AAC                          1096      
00001AAC  4E75                    1097      RTS
00001AAE                          1098      
00001AAE                          1099      
00001AAE                          1100  byteOpMode                          *It's a byte?
00001AAE  B63C 0000               1101      CMP.B   #0,D3
00001AB2  6600 0010               1102      BNE     wordOpMode
00001AB6                          1103      
00001AB6  43F9 00001CD5           1104      LEA     outputByte,A1           *Output ".B" !
00001ABC  103C 000E               1105      MOVE.B  #14,D0
00001AC0  4E4F                    1106      TRAP    #15
00001AC2  4E75                    1107      RTS                             *Time to return back in time
00001AC4                          1108      
00001AC4                          1109  wordOpMode                          *It's a word?
00001AC4  B63C 0001               1110      CMP.B   #1,D3
00001AC8  6600 0010               1111      BNE     longOpMode
00001ACC                          1112      
00001ACC  43F9 00001CD9           1113      LEA     outputWord,A1           *Output ".W" onto console
00001AD2  103C 000E               1114      MOVE.B  #14,D0
00001AD6  4E4F                    1115      TRAP    #15
00001AD8  4E75                    1116      RTS                             *Time warp~
00001ADA                          1117      
00001ADA                          1118  longOpMode                          *It better be a long then
00001ADA  43F9 00001CDD           1119      LEA     outputLong,A1           *outputs ".L" onto console
00001AE0  103C 000E               1120      MOVE.B  #14,D0
00001AE4  4E4F                    1121      TRAP    #15
00001AE6                          1122      
00001AE6  5207                    1123      ADD.B   #1,D7
00001AE8                          1124     
00001AE8  4E75                    1125      RTS                             *whoosh~
00001AEA                          1126   
00001AEA                          1127      
00001AEA                          1128  sourceEA                            *output the Source EA
00001AEA  3604                    1129      MOVE.W  D4,D3                   *Put the original opcode into D3
00001AEC  3403                    1130      MOVE.W  D3,D2                   *Copy that into D2
00001AEE                          1131      
00001AEE  E65A                    1132      ROR.W   #3,D2                   *Whoo~ Rotating~
00001AF0  C4BC 00000007           1133      AND.L   #$00000007,D2           *D2 has Mode
00001AF6                          1134      
00001AF6                          1135  
00001AF6  C6BC 00000007           1136      AND.L   #$00000007,D3           *D3 has Register
00001AFC                          1137  
00001AFC                          1138   
00001AFC                          1139  DnMode                          *Is the Mode a Data Register?
00001AFC  4281                    1140      CLR.L   D1
00001AFE                          1141      
00001AFE  B43C 0000               1142      CMP.B   #0,D2
00001B02  6600 0018               1143      BNE     AnMode
00001B06                          1144      
00001B06  43F9 00001CE8           1145      LEA     outputDn,A1         *outputs "D" onto console
00001B0C  103C 000E               1146      MOVE.B  #14,D0
00001B10  4E4F                    1147      TRAP    #15
00001B12                          1148  
00001B12  1203                    1149      MOVE.B  D3,D1               *outputs the register, whatever the numeric value is
00001B14  103C 0003               1150      MOVE.B  #3,D0
00001B18  4E4F                    1151      TRAP    #15
00001B1A                          1152      
00001B1A  4E75                    1153      RTS                         *wooo~
00001B1C                          1154    
00001B1C                          1155  AnMode                          *Mode is an Address Register?
00001B1C  B43C 0001               1156      CMP.B   #1,D2
00001B20  6600 0018               1157      BNE     deRefAnMode
00001B24                          1158      
00001B24  43F9 00001CE6           1159      LEA     outputAn,A1         *Outputs "A" onto console
00001B2A  103C 000E               1160      MOVE.B  #14,D0
00001B2E  4E4F                    1161      TRAP    #15
00001B30                          1162      
00001B30  1203                    1163      MOVE.B  D3,D1               *Outputs the register value
00001B32  103C 0003               1164      MOVE.B  #3,D0
00001B36  4E4F                    1165      TRAP    #15
00001B38                          1166      
00001B38  4E75                    1167      RTS                         *psssh
00001B3A                          1168      
00001B3A                          1169  deRefAnMode                     *Mode is a (A0)?
00001B3A  B43C 0002               1170      CMP.B   #2,D2               
00001B3E  6600 0024               1171      BNE     immediateData
00001B42                          1172      
00001B42  43F9 00001CE1           1173      LEA     outputdeRefAn1,A1   *Outputs "(A" onto console
00001B48  103C 000E               1174      MOVE.B  #14,D0
00001B4C  4E4F                    1175      TRAP    #15
00001B4E                          1176      
00001B4E  1203                    1177      MOVE.B  D3,D1               *outputs register value
00001B50  103C 0003               1178      MOVE.B  #3,D0
00001B54  4E4F                    1179      TRAP    #15
00001B56                          1180      
00001B56  43F9 00001CE4           1181      LEA     outputdeRefAn2,A1   *makes it pretty by outputting ")"
00001B5C  103C 000E               1182      MOVE.B  #14,D0
00001B60  4E4F                    1183      TRAP    #15
00001B62                          1184      
00001B62  4E75                    1185      RTS                         *=-=
00001B64                          1186      
00001B64                          1187  immediateData                   *Mode is an #<data>
00001B64  B43C 0007               1188      CMP.B   #7,D2               *Mode for #<data> is 111
00001B68  6600 00AE               1189      BNE     DONE                
00001B6C                          1190      
00001B6C  B63C 0004               1191      CMP.B   #4,D3               *Register for #<data> is 100
00001B70  6600 00A6               1192      BNE     DONE
00001B74                          1193                                 
00001B74  43F9 00001CEA           1194      LEA     outputPound,A1      *Outputs "#"
00001B7A  103C 000E               1195      MOVE.B  #14,D0
00001B7E  4E4F                    1196      TRAP    #15   
00001B80                          1197      
00001B80  BE3C 0001               1198      CMP.B   #1,D7
00001B84  6700 0008               1199      BEQ     immeDataLong
00001B88                          1200      
00001B88  361D                    1201      MOVE.W  (A5)+,D3
00001B8A                          1202      
00001B8A  6000 0004               1203      BRA     immediateDatapt2
00001B8E                          1204  
00001B8E                          1205  immeDataLong
00001B8E  261D                    1206      MOVE.L  (A5)+,D3    
00001B90                          1207      
00001B90                          1208      
00001B90                          1209  immediateDatapt2               *Outputs register value
00001B90  2203                    1210      MOVE.L  D3,D1
00001B92  103C 0003               1211      MOVE.B  #3,D0
00001B96  4E4F                    1212      TRAP    #15
00001B98                          1213  
00001B98  4E75                    1214      RTS                         *~owo~
00001B9A                          1215      
00001B9A                          1216  
00001B9A                          1217  addDestinationEA                *Since ADD only has data register in dest area
00001B9A  3604                    1218      MOVE.W  D4,D3
00001B9C                          1219      
00001B9C  3403                    1220      MOVE.W  D3,D2
00001B9E                          1221      
00001B9E  720A                    1222      MOVE.L  #10,D1
00001BA0  E37A                    1223      ROL.W   D1,D2
00001BA2  C4BC 00000007           1224      AND.L   #$00000007,D2       *D2 has mode
00001BA8                          1225      
00001BA8                          1226      
00001BA8  EF5B                    1227      ROL.W   #7,D3
00001BAA  C6BC 00000007           1228      AND.L   #$00000007,D3       *D3 has register
00001BB0                          1229      
00001BB0                          1230  DnRegister                      *For ADD only, since it only has Dn 
00001BB0  43F9 00001CE8           1231      LEA     outputDn,A1         *outputs "D"
00001BB6  103C 000E               1232      MOVE.B  #14,D0
00001BBA  4E4F                    1233      TRAP    #15
00001BBC                          1234      
00001BBC  1203                    1235      MOVE.B  D3,D1               *Outputs register value
00001BBE  103C 0003               1236      MOVE.B  #3,D0
00001BC2  4E4F                    1237      TRAP    #15
00001BC4                          1238      
00001BC4  4E75                    1239      RTS
00001BC6                          1240  
00001BC6                          1241  moveDestinationEA               *Destination output for MOVE
00001BC6  3604                    1242      MOVE.W  D4,D3
00001BC8  3403                    1243      MOVE.W  D3,D2
00001BCA                          1244      
00001BCA  EF5B                    1245      ROL.W   #7,D3
00001BCC  C6BC 00000007           1246      AND.L   #$00000007,D3       *D3 has Register
00001BD2                          1247      
00001BD2  323C 000A               1248      MOVE.W  #10,D1      
00001BD6  E37A                    1249      ROL.W   D1,D2               *D2 has Mode
00001BD8  C4BC 00000007           1250      AND.L   #$00000007,D2
00001BDE                          1251      
00001BDE  6000 FF1C               1252      BRA     DnMode              *output what it is, bra
00001BE2                          1253      
00001BE2                          1254  addaDestEA                      *Sets up the dest mode to be proper
00001BE2  3604                    1255      MOVE.W  D4,D3               *Get the original code again
00001BE4  3403                    1256      MOVE.W  D3,D2
00001BE6                          1257      
00001BE6  EF5B                    1258      ROL.W   #7,D3               
00001BE8  C6BC 00000007           1259      AND.L   #$00000007,D3       *D3 has register
00001BEE                          1260      
00001BEE  323C 000A               1261      MOVE.W  #10,D1
00001BF2  E37A                    1262      ROL.W   D1,D2               *Have to AND it by 1, since the mode for ADDA
00001BF4  C4BC 00000001           1263      AND.L   #$00000001,D2       *is always an Address
00001BFA                          1264      
00001BFA  6000 FF00               1265      BRA     DnMode
00001BFE                          1266      
00001BFE                          1267  pageContinue
00001BFE  43F9 00001D2A           1268      LEA     outputContinue,A1
00001C04  103C 000E               1269      MOVE.B  #14,D0
00001C08  4E4F                    1270      TRAP    #15
00001C0A  103C 0005               1271      MOVE.B  #5,D0
00001C0E  4E4F                    1272      TRAP    #15
00001C10  16BC 001E               1273      MOVE.B  #line_count,(A3)
00001C14  4EF8 1186               1274      JMP     getOpCode
00001C18                          1275      
00001C18                          1276  DONE
00001C18  BCCD                    1277      CMP.W   A5,A6
00001C1A  6D00 0012               1278      BLT     END   
00001C1E  43F9 00001CF2           1279      LEA     outputNextLine,A1
00001C24  103C 000E               1280      MOVE.B  #14,D0
00001C28  4E4F                    1281      TRAP    #15 
00001C2A  4EF8 1186               1282      JMP     getOpCode
00001C2E                          1283      
00001C2E                          1284  END
00001C2E  43F9 00001CF2           1285      LEA     outputNextLine,A1
00001C34  103C 000E               1286      MOVE.B  #14,D0
00001C38  4E4F                    1287      TRAP    #15
00001C3A                          1288  
00001C3A  43F9 00001D15           1289      LEA     outputEnd,A1
00001C40  103C 000E               1290      MOVE.B  #14,D0
00001C44  4E4F                    1291      TRAP    #15
00001C46  FFFF FFFF               1292      SIMHALT             ; halt simulator
00001C4A                          1293  
00001C4A                          1294  * Put variables and constants here
00001C4A                          1295  
00001C4A= 43D2                    1296  code        DC.W    $43D2
00001C4C                          1297  
00001C4C                          1298  
00001C4C= D640                    1299  addCode     DC.W    $D640
00001C4E                          1300  
00001C4E= 303C                    1301  moveCode1   DC.W    $303C
00001C50= 0011                    1302  moveCode2   DC.W    $0011
00001C52                          1303  
00001C52= 41 44 44 00             1304  outputADD   DC.B    'ADD',0
00001C56= 41 00                   1305  outputADDA  DC.B    'A',0
00001C58= 53 55 42 00             1306  outputSUB   DC.B    'SUB',0
00001C5C= 53 55 42 51 00          1307  outputSUBQ  DC.B    'SUBQ',0
00001C61= 4D 4F 56 45 00          1308  outputMOVE  DC.B    'MOVE',0
00001C66= 4D 4F 56 45 41 00       1309  outputMOVEA DC.B    'MOVEA',0
00001C6C= 4D 55 4C 53 2E 57 ...   1310  outputMULSW DC.B    'MULS.W ',0
00001C74= 44 49 56 53 2E 57 ...   1311  outputDIVSW DC.B    'DIVS.W ',0
00001C7C= 4E 4F 50 20 00          1312  outputNOP   DC.B    'NOP ',0
00001C81= 52 54 53 20 00          1313  outputRTS   DC.B    'RTS ',0
00001C86= 4C 45 41 20 00          1314  outputLEA   DC.B    'LEA ',0
00001C8B= 44 41 54 41 20 00       1315  outputData  DC.B    'DATA ',0
00001C91= 4E 45 47 00             1316  outputNEG   DC.B    'NEG',0
00001C95= 42 52 41 20 00          1317  outputBRA   DC.B    'BRA ',0
00001C9A= 4F 52 49 00             1318  outputORI   DC.B    'ORI',0
00001C9E= 4F 52 00                1319  outputOR    DC.B    'OR',0
00001CA1= 45 4F 52 00             1320  outputEOR   DC.B    'EOR',0
00001CA5= 43 4D 50 49 00          1321  outputCMPI  DC.B    'CMPI',0
00001CAA= 43 4D 50 00             1322  outputCMP   DC.B    'CMP',0
00001CAE= 42 43 4C 52 20 00       1323  outputBCLR  DC.B    'BCLR ',0
00001CB4= 4C 53 00                1324  outputLS    DC.B    'LS',0
00001CB7= 41 53 00                1325  outputAS    DC.B    'AS',0
00001CBA= 52 4F 00                1326  outputRO    DC.B    'RO',0
00001CBD= 4C 00                   1327  outputLeft  DC.B    'L',0
00001CBF= 52 00                   1328  outputRight DC.B    'R',0
00001CC1                          1329  
00001CC1= 42 43 53 20 00          1330  outputBCS   DC.B    'BCS ',0
00001CC6= 42 47 45 20 00          1331  outputBGE   DC.B    'BGE ',0
00001CCB= 42 43 54 20 00          1332  outputBCT   DC.B    'BCT ',0
00001CD0= 42 56 43 20 00          1333  outputBVC   DC.B    'BVC ',0
00001CD5                          1334  
00001CD5= 2E 42 20 00             1335  outputByte  DC.B    '.B ',0
00001CD9= 2E 57 20 00             1336  outputWord  DC.B    '.W ',0
00001CDD= 2E 4C 20 00             1337  outputLong  DC.B    '.L ',0
00001CE1                          1338  
00001CE1= 28 41 00                1339  outputdeRefAn1   DC.B    '(A',0
00001CE4= 29 00                   1340  outputdeRefAn2   DC.B    ')',0
00001CE6                          1341  
00001CE6= 41 00                   1342  outputAn    DC.B    'A',0
00001CE8= 44 00                   1343  outputDn    DC.B    'D',0
00001CEA= 23 00                   1344  outputPound DC.B    '#',0
00001CEC= 0000                    1345  outputCurrentAddr   DC.W    $0000
00001CEE                          1346  
00001CEE= 2C 00                   1347  outputComma     DC.B    ',',0
00001CF0= 2E 00                   1348  outputDot       DC.B    '.',0
00001CF2= 20 0D 0A 00             1349  outputNextLine  DC.B    ' ',CR,LF,0
00001CF6= 20 00                   1350  outputSpace     DC.B    ' ',0
00001CF8= 3A 20 00                1351  outputColon     DC.B    ': ',0
00001CFB= 2D 00                   1352  outputNegSign   DC.B    '-',0
00001CFD= 44 69 73 61 73 73 ...   1353  outputStart     DC.B    'Disassembling Initiated',0
00001D15= 50 72 6F 67 72 61 ...   1354  outputEnd       DC.B    'Program Disassembled',0
00001D2A= 50 72 65 73 73 20 ...   1355  outputContinue  DC.B    'Press ENTER key to continue disassembling',CR,LF,0
00001D56                          1356      END    $1000        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADDADESTEA          1BE2
ADDALOPMODE         1A8E
ADDAORDER           1A1E
ADDAWOPMODE         1A70
ADDCODE             1C4C
ADDDESTINATIONEA    1B9A
ADDMETHOD           1428
ADDOPCODE           1420
ADDR_VAL_TEMP       1180
ALTOPMODE           1A54
ALTORDER            1A02
ANMODE              1B1C
ASCII_MASK          FF
ASCII_VAL_END       117E
ASCII_VAL_START     117C
ASDOPCODE           1690
BCCDISPLACEMENT     182E
BCCMETHOD           1980
BCCOPCODE           1978
BCLRIMMEDIATE       1302
BCLROPCODE          12BA
BCS                 19A4
BCT                 19C4
BGE                 19B4
BITDISPLACEMENT16   1882
BITDISPLACEMENT32   18FA
BRAMETHOD           1822
BRAOPCODE           1816
BVC                 19D4
BYTEOPMODE          1AAE
CMPIMETHOD          1288
CMPIOPCODE          1280
CMPOPCODE           160C
CODE                1C4A
COUNTER             0
CR                  D
DATAOPCODE          19E4
DEREFANMODE         1B3A
DISPLAY8FORSUBQ     151A
DIVSWCHECK          1586
DIVSWOPCODE         1586
DNMODE              1AFC
DNREGISTER          1BB0
DONE                1C18
DOTOPMODE           1A3A
END                 1C2E
END_ADDR_MSG        114B
END_VAL             1184
EORMETHOD           15D6
EOROPCODE           15C4
GETOPCODE           1186
GET_ADDR            10AA
IMMEDATALONG        1B8E
IMMEDIATEDATA       1B64
IMMEDIATEDATAPT2    1B90
LEAOPCODE           11F4
LEFTRIGHT           1708
LF                  A
LINE_COUNT          1E
LONGOPMODE          1ADA
LSDMETHOD           165C
LSDOPCODE           1654
MASK                F
MOVEALONGMETHOD     13E6
MOVEAWORDMETHOD     1386
MOVEBYTEMETHOD      132A
MOVEBYTEOPCODE      1322
MOVECODE1           1C4E
MOVECODE2           1C50
MOVEDESTINATIONEA   1BC6
MOVELONGMETHODPT2   13F6
MOVELONGOPCODE      13BE
MOVELONGOPCODEMETHOD  13C6
MOVEWORDMETHOD      1366
MOVEWORDMETHODPT2   1396
MOVEWORDOPCODE      135E
MULSWMETHOD         17B6
MULSWOPCODE         17AE
NEGBIT16            18BE
NEGBIT32            193A
NEGMETHOD           17EA
NEGOPCODE           17DE
NOPOPCODE           11C8
ORIMETHOD           1246
ORIOPCODE           1232
ORMETHOD            1550
OROPCODE            1534
OUTPUTADD           1C52
OUTPUTADDA          1C56
OUTPUTAN            1CE6
OUTPUTAS            1CB7
OUTPUTBCLR          1CAE
OUTPUTBCS           1CC1
OUTPUTBCT           1CCB
OUTPUTBGE           1CC6
OUTPUTBRA           1C95
OUTPUTBVC           1CD0
OUTPUTBYTE          1CD5
OUTPUTCMP           1CAA
OUTPUTCMPI          1CA5
OUTPUTCOLON         1CF8
OUTPUTCOMMA         1CEE
OUTPUTCONTINUE      1D2A
OUTPUTCURRENTADDR   1CEC
OUTPUTDATA          1C8B
OUTPUTDEREFAN1      1CE1
OUTPUTDEREFAN2      1CE4
OUTPUTDIVSW         1C74
OUTPUTDN            1CE8
OUTPUTDOT           1CF0
OUTPUTEND           1D15
OUTPUTEOR           1CA1
OUTPUTLEA           1C86
OUTPUTLEFT          1CBD
OUTPUTLONG          1CDD
OUTPUTLS            1CB4
OUTPUTMOVE          1C61
OUTPUTMOVEA         1C66
OUTPUTMULSW         1C6C
OUTPUTNEG           1C91
OUTPUTNEGSIGN       1CFB
OUTPUTNEXTLINE      1CF2
OUTPUTNOP           1C7C
OUTPUTOR            1C9E
OUTPUTORI           1C9A
OUTPUTPOUND         1CEA
OUTPUTRIGHT         1CBF
OUTPUTRO            1CBA
OUTPUTRTS           1C81
OUTPUTSPACE         1CF6
OUTPUTSTART         1CFD
OUTPUTSUB           1C58
OUTPUTSUBQ          1C5C
OUTPUTWORD          1CD9
PAGECONTINUE        1BFE
RET_SA              111E
RIGHTRIGHT          1728
RODOPCODE           16CC
RTSOPCODE           11E0
SHIFTDESTEA         1790
SHIFTIMMEDIATEEA    1768
SHIFTIMMEDIATEEIGHT  1786
SHIFTSOPCODE        1642
SHIFTSOURCEEA       1736
SOURCEEA            1AEA
STACK               B000
START_ADDR_MSG      1120
STRIP_ASCII         10FA
ST_VAL              1182
SUB30               111A
SUB37               1112
SUBMETHOD           146E
SUBOPCODE           1466
SUBQDATA            14E8
SUBQMETHOD          14AC
SUBQOPCODE          14A4
WORDOPMODE          1AC4
