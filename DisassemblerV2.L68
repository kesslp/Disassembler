00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.02
Created On: 6/5/2015 2:41:04 AM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      :  Disassembler
00000000                             3  * Written by :  Paul Kessler and Joscelyn Kim
00000000                             4  * Date       :  199X
00000000                             5  * Description:  This program takes assembled code and disassembles it into 
00000000                             6  *               assembly language readable by humans.  The program will be 
00000000                             7  *               disassembed in a user defined address range
00000000                             8  *-----------------------------------------------------------
00000000  =0000000D                  9  CR          EQU $0D
00000000  =0000000A                 10  LF          EQU $0A
00000000                            11  
00000000  =0000000F                 12  mask        EQU $0000000F
00000000  =000000FF                 13  ascii_mask  EQU $00FF
00000000  =00000000                 14  counter     EQU 0
00000000  =0000B000                 15  stack       EQU $B000
00000000  =0000001E                 16  line_count  EQU 30
00000000                            17  
00000000                            18  *---- User input address range -----
00000000                            19  
00001000                            20                  ORG         $1000                       * start of the program
00001000  4FF9 0000B000             21                  LEA         stack,SP                    * initialize the stack
00001006  4200                      22                  CLR.B       D0                          * clear D0
00001008  43F9 000010F4             23                  LEA         start_addr_msg, A1          * ask for starting address
0000100E  103C 000E                 24                  MOVE.B      #14, D0
00001012  4E4F                      25                  TRAP        #15                         
00001014  103C 0002                 26                  MOVE.B      #2, D0                      * take in user input as string
00001018  4E4F                      27                  TRAP        #15
0000101A  48A7 FFFE                 28                  MOVEM.W     A0-A6/D0-D7,-(SP)           * push registers on the stack
0000101E  4EB9 0000108C             29                  JSR         get_addr                    * strip ascii characters to hex
00001024  4C9F 7FFF                 30                  MOVEM.W     (SP)+, A0-A6/D0-D7          * restore registers
00001028  23F9 00001150 00001154    31                  MOVE.L      addr_val_temp,st_val
00001032                            32                  
00001032  43F9 0000111F             33                  LEA         end_addr_msg, A1            * ask for ending address
00001038  103C 000E                 34                  MOVE.B      #14, D0
0000103C  4E4F                      35                  TRAP        #15
0000103E  224C                      36                  MOVEA.L     A4,A1                       * reset address at A1 to get user input
00001040  103C 0002                 37                  MOVE.B      #2, D0                      * take address as a string
00001044  4E4F                      38                  TRAP        #15
00001046  48A7 FFFE                 39                  MOVEM.W     A0-A6/D0-D7,-(SP)           * push registers on the stack
0000104A  4EB9 0000108C             40                  JSR         get_addr                    * strip ascii address into hex
00001050  4C9F 7FFF                 41                  MOVEM.W     (SP)+, A0-A6/D0-D7          * restore the registers
00001054  23F9 00001150 00001158    42                  MOVE.L      addr_val_temp, end_val      * store address in end_val
0000105E  2A79 00001154             43                  MOVEA.L     st_val,A5                   * store start val in A5
00001064  2C79 00001158             44                  MOVEA.L     end_val,A6                  * store end val in A6
0000106A                            45                  
0000106A  43F9 00001DED             46                  LEA         outputStart,A1              *ouput starting messaage
00001070  103C 000E                 47                  MOVE.B      #14,D0          
00001074  4E4F                      48                  TRAP        #15
00001076                            49                  
00001076  43F9 00001DE2             50                  LEA         outputNextLine,A1           *output nextline
0000107C  103C 000E                 51                  MOVE.B      #14,D0
00001080  4E4F                      52                  TRAP        #15
00001082                            53                  
00001082  16BC 001E                 54                  MOVE.B      #line_count,(A3)
00001086  5513                      55                  SUBQ.B      #2,(A3)
00001088  6000 00D2                 56                  BRA         getOpCode                   * Jump to getOpCode sub routine
0000108C                            57  
0000108C                            58                  
0000108C                            59  
0000108C                            60  get_addr 
0000108C  5301                      61                  SUBQ.B      #1,D1
0000108E  4287                      62                  CLR.L       D7                          * we need D7 to be 0
00001090  1019                      63                  MOVE.B      (A1)+,D0                    * store first byte in D0
00001092  0280 000000FF             64                  ANDI.L      #ascii_mask,D0              * mask the first byte
00001098  4EB9 000010CE             65                  JSR         strip_ascii                 * strip ascii char into hex
0000109E  C3FC 0004                 66                  MULS.W      #4,D1
000010A2  E3A0                      67                  ASL.L       D1,D0                       * shift left 8
000010A4  8E80                      68                  OR.L        D0,D7
000010A6  1019                      69                  MOVE.B      (A1)+,D0                    * move next byte into D0
000010A8  5901                      70  loop            SUBQ.B      #4,D1
000010AA  0280 000000FF             71                  ANDI.L      #ascii_mask,D0              * mask the second byte
000010B0  4EB9 000010CE             72                  JSR         strip_ascii                 * strip ascii to hex
000010B6  E3A0                      73                  ASL.L       D1,D0                       * shift left 8
000010B8  8E80                      74                  OR.L        D0,D7
000010BA  B23C 0000                 75                  CMP.B       #0,D1
000010BE  6700 0006                 76                  BEQ         rts_strtAddr
000010C2  1019                      77                  MOVE.B      (A1)+,D0
000010C4  60E2                      78                  BRA         loop
000010C6                            79                  
000010C6                            80  rts_strtAddr
000010C6  23C7 00001150             81                  MOVE.L      D7,addr_val_temp
000010CC  4E75                      82                  RTS     
000010CE                            83                  
000010CE  B03C 0039                 84  strip_ascii     CMP.B       #$39,D0                     *Is it in range of 0-9?
000010D2  6F00 001A                 85                  BLE         sub30                       *It's a number
000010D6  B03C 0046                 86                  CMP.B       #$46,D0                     *Is it A...F?
000010DA  6F00 000A                 87                  BLE         sub37                       *It's A...F
000010DE  0400 0057                 88                  SUB.B       #$57,D0                     *It's a...f
000010E2  6000 000E                 89                  BRA         ret_sa                      *Go back
000010E6  0400 0037                 90  sub37           SUB.B       #$37,D0                     *Strip 37
000010EA  6000 0006                 91                  BRA         ret_sa                      *Go back
000010EE  0400 0030                 92  sub30           SUB.B       #$30,D0                     *Strip 30
000010F2  4E75                      93  ret_sa          RTS                                     *Go back
000010F4                            94  
000010F4                            95                  
000010F4                            96  *---- Data ----
000010F4                            97  
000010F4= 45 6E 74 65 72 20 ...     98  start_addr_msg  DC.B    'Enter a starting address to disassemble: $', 0
0000111F= 45 6E 74 65 72 20 ...     99  end_addr_msg    DC.B    'Enter a ending address to stop disassembling: $', 0
00001150= 00000000                 100  addr_val_temp   DC.L    $00000000
00001154= 00000000                 101  st_val          DC.L    $00000000
00001158= 00000000                 102  end_val         DC.L    $00000000
0000115C                           103  
0000115C                           104  *--- Data end ----
0000115C                           105  
0000115C                           106  
0000115C                           107  * Disassembler Start
0000115C                           108  getOpCode                        *Gets opcode
0000115C                           109      *LEA     code,A0             *Loads "code" which is the op code
0000115C                           110      
0000115C  4287                     111      CLR.L   D7
0000115E  4286                     112      CLR.L   D6
00001160  4283                     113      CLR.L   D3
00001162  4281                     114      CLR.L   D1
00001164  4280                     115      CLR.L   D0
00001166  4285                     116      CLR.L   D5
00001168  4284                     117      CLR.L   D4
0000116A                           118      
0000116A  5313                     119      SUBQ.B  #1,(A3)
0000116C  0C13 0000                120      CMP.B   #0,(A3)
00001170  6700 0B68                121      BEQ     pageContinue
00001174                           122      
00001174  320D                     123      MOVE.W  A5,D1               *move starting addr into D1
00001176  103C 000F                124      MOVE.B  #15,D0              *convert number into hex and output to console
0000117A  143C 0010                125      MOVE.B  #16,D2
0000117E  4E4F                     126      TRAP    #15    
00001180  381D                     127      MOVE.W  (A5)+,D4            *move data at starting addr to D4
00001182                           128      
00001182  4281                     129      CLR.L   D1
00001184                           130      
00001184  43F9 00001DE8            131      LEA     outputColon,A1      *output the colon and a space to the console
0000118A  103C 000E                132      MOVE.B  #14,D0
0000118E  4E4F                     133      TRAP    #15
00001190                           134      
00001190  2248                     135      MOVEA.L A0,A1               *used to clear A0
00001192  3404                     136      MOVE.W  D4,D2               *gets put into D4 and D2
00001194                           137      
00001194  E95A                     138      ROL.W   #4,D2               *rotate the first 4 significant bits to lower 4 bits
00001196                           139      
00001196  C4BC 0000000F            140      AND.L   #mask,D2            *mask it to get only the first byte
0000119C                           141      
0000119C  1A02                     142      MOVE.B  D2,D5               *put that value into D5
0000119E                           143  
0000119E                           144  nopOpCode
0000119E  B87C 4E71                145      CMP.W   #$4E71,D4
000011A2  6600 0012                146      BNE     rtsOpCode
000011A6                           147      
000011A6  43F9 00001D66            148      LEA     outputNOP,A1
000011AC  103C 000E                149      MOVE.B  #14,D0
000011B0  4E4F                     150      TRAP    #15
000011B2  6000 0B40                151      BRA     DONE
000011B6                           152      
000011B6                           153  rtsOpCode
000011B6  B87C 4E75                154      CMP.W   #$4E75,D4
000011BA  6600 0012                155      BNE     jsrOpCode
000011BE                           156      
000011BE  43F9 00001D70            157      LEA     outputRTS,A1
000011C4  103C 000E                158      MOVE.B  #14,D0
000011C8  4E4F                     159      TRAP    #15
000011CA                           160      
000011CA  6000 0B28                161      BRA     DONE
000011CE                           162      
000011CE                           163  jsrOpCode
000011CE  3604                     164      MOVE.W  D4,D3
000011D0  E15B                     165      ROL.W   #8,D3
000011D2  C67C 00FF                166      AND.W   #$00FF,D3
000011D6  B63C 004E                167      CMP.B   #$4E,D3
000011DA  6600 0046                168      BNE     movemOpCode
000011DE                           169      
000011DE                           170  jsrMethod
000011DE  3604                     171      MOVE.W  D4,D3
000011E0  E75B                     172      ROL.W   #3,D3
000011E2  C63C 0007                173      AND.B   #7,D3
000011E6  B63C 0002                174      CMP.B   #2,D3
000011EA  6700 000E                175      BEQ     jsrOutputDeref
000011EE                           176      
000011EE  B63C 0007                177      CMP.B   #7,D3
000011F2  6700 001C                178      BEQ     jsrOutputLabel
000011F6                           179      
000011F6  6000 0B82                180      BRA     outputData
000011FA                           181          
000011FA                           182  jsrOutputDeref
000011FA  43F9 00001D6B            183      LEA     outputJSR,A1
00001200  103C 000E                184      MOVE.B  #14,D0
00001204  4E4F                     185      TRAP    #15
00001206                           186      
00001206  4EB9 00001BC6            187      JSR     sourceEA
0000120C                           188      
0000120C  6000 0AE6                189      BRA     DONE
00001210                           190      
00001210                           191  jsrOutputLabel
00001210  B63C 0001                192      CMP.B   #1,D3
00001214  6E00 08AA                193      BGT     dataOpCode
00001218  4EB9 00001BC6            194      JSR     sourceEA
0000121E                           195      
0000121E  6000 0AD4                196      BRA     DONE
00001222                           197      
00001222                           198  movemOpCode
00001222  3604                     199      MOVE.W  D4,D3
00001224  EC43                     200      ASR.W   #6,D3
00001226  B67C 0122                201      CMP.W   #$0122,D3
0000122A  6700 001E                202      BEQ     movemWMethodRegToMem
0000122E  B67C 0132                203      CMP.W   #$0132,D3
00001232  6700 0026                204      BEQ     movemWMEthodMemToReg
00001236  B67C 0123                205      CMP.W   #$0123,D3
0000123A  6700 002E                206      BEQ     movemLMethodRegToMem
0000123E  B67C 0133                207      CMP.W   #$0133,D3
00001242  6700 0036                208      BEQ     movemLMethodMemToReg
00001246  6000 0042                209      BRA     leaOpCode
0000124A                           210      
0000124A                           211  movemWMethodRegToMem
0000124A  43F9 00001D48            212      LEA     outputMOVEMW,A1
00001250  103C 000E                213      MOVE.B  #14,D0
00001254  4E4F                     214      TRAP    #15
00001256  6000 0A9C                215      BRA     DONE
0000125A                           216      
0000125A                           217  movemWMethodMemToReg
0000125A  43F9 00001D48            218      LEA     outputMOVEMW,A1
00001260  103C 000E                219      MOVE.B  #14,D0
00001264  4E4F                     220      TRAP    #15
00001266  6000 0A8C                221      BRA     DONE
0000126A                           222      
0000126A                           223  movemLMethodRegToMem
0000126A  43F9 00001D50            224      LEA     outputMOVEML,A1
00001270  103C 000E                225      MOVE.B  #14,D0
00001274  4E4F                     226      TRAP    #15
00001276  6000 0A7C                227      BRA     DONE
0000127A                           228  
0000127A                           229  movemLMethodMemToReg
0000127A  43F9 00001D50            230      LEA     outputMOVEML,A1
00001280  103C 000E                231      MOVE.B  #14,D0
00001284  4E4F                     232      TRAP    #15
00001286  6000 0A6C                233      BRA     DONE
0000128A                           234      
0000128A                           235  leaOpCode
0000128A  BA3C 0004                236      CMP.B   #4,D5
0000128E  6600 0062                237      BNE     oriOpCode
00001292  3604                     238      MOVE.W  D4,D3
00001294  E15B                     239      ROL.W   #8,D3
00001296  B63C 0044                240      CMP.B   #$44,D3
0000129A  6700 062E                241      BEQ     negMethod
0000129E  E05B                     242      ROR.W   #8,D3
000012A0  EE5B                     243      ROR.W   #7,D3
000012A2  C63C 0007                244      AND.B   #7,D3
000012A6  B63C 0007                245      CMP.B   #7,D3
000012AA  6600 0814                246      BNE     dataOpCode
000012AE                           247      
000012AE  3604                     248      MOVE.W  D4,D3
000012B0  E65B                     249      ROR.W   #3,D3
000012B2  C63C 0007                250      AND.B   #7,D3
000012B6  B63C 0002                251      CMP.B   #2,D3
000012BA  6700 000E                252      BEQ     leaOutput
000012BE                           253      
000012BE  B63C 0007                254      CMP.B   #7,D3
000012C2  6700 0006                255      BEQ     leaOutput
000012C6                           256      
000012C6  6000 07F8                257      BRA     dataOpCode
000012CA                           258      
000012CA                           259  leaOutput    
000012CA  43F9 00001D75            260      LEA     outputLEA,A1
000012D0  103C 000E                261      MOVE.B  #14,D0
000012D4  4E4F                     262      TRAP    #15
000012D6                           263      
000012D6  4EB9 00001BC6            264      JSR     sourceEA
000012DC                           265      
000012DC  43F9 00001DDE            266      LEA     outputComma,A1
000012E2  103C 000E                267      MOVE.B  #14,D0
000012E6  4E4F                     268      TRAP    #15
000012E8                           269      
000012E8  4EB9 00001CBE            270      JSR     addaDestEA
000012EE                           271      
000012EE  6000 0A04                272      BRA     DONE
000012F2                           273      
000012F2                           274  oriOpCode                       *OR opcode
000012F2  BA3C 0000                275      CMP.B   #0,D5               
000012F6  6600 00EA                276      BNE     moveByteOpCode      *if not, go to next opcode
000012FA                           277  
000012FA                           278  *-------------------------------------------------Change this when merging         
000012FA  3404                     279      MOVE.W  D4,D2
000012FC  E15A                     280      ROL.W   #8,D2
000012FE  C4BC 0000000F            281      AND.L   #$0000000F,D2
00001304                           282      
00001304  2A02                     283      MOVE.L  D2,D5
00001306                           284      
00001306                           285  oriMethod
00001306  BA3C 0000                286      CMP.B   #0,D5
0000130A  6600 0034                287      BNE     cmpiOpCode
0000130E                           288      
0000130E  43F9 00001D89            289      LEA     outputORI,A1
00001314  103C 000E                290      MOVE.B  #14,D0
00001318  4E4F                     291      TRAP    #15
0000131A                           292      
0000131A  4EB9 00001B16            293      JSR     dotOpMode
00001320                           294          
00001320  7407                     295      MOVE.L  #7,D2
00001322  7604                     296      MOVE.L  #4,D3
00001324  4EB9 00001C40            297      JSR     immediateData
0000132A                           298      
0000132A  43F9 00001DDE            299      LEA     outputComma,A1
00001330  103C 000E                300      MOVE.B  #14,D0
00001334  4E4F                     301      TRAP    #15
00001336                           302      
00001336  4EB9 00001BC6            303      JSR     sourceEA
0000133C  6000 09B6                304      BRA     DONE
00001340                           305  
00001340                           306  cmpiOpCode
00001340  BA3C 000C                307      CMP.B   #12,D5
00001344  6600 0034                308      BNE     bclrOpCode
00001348                           309      
00001348                           310  cmpiMethod
00001348  43F9 00001D94            311      LEA     outputCMPI,A1
0000134E  103C 000E                312      MOVE.B  #14,D0
00001352  4E4F                     313      TRAP    #15
00001354                           314      
00001354  4EB9 00001B16            315      JSR     dotOpMode
0000135A                           316      
0000135A  7407                     317      MOVE.L  #7,D2
0000135C  7604                     318      MOVE.L  #4,D3
0000135E  4EB9 00001C40            319      JSR     immediateData
00001364                           320      
00001364  43F9 00001DDE            321      LEA     outputComma,A1
0000136A  103C 000E                322      MOVE.B  #14,D0
0000136E  4E4F                     323      TRAP    #15
00001370                           324      
00001370  4EB9 00001BC6            325      JSR     sourceEA
00001376  6000 097C                326      BRA     DONE
0000137A                           327      
0000137A                           328  bclrOpCode
0000137A  43F9 00001D9D            329      LEA     outputBCLR,A1
00001380  103C 000E                330      MOVE.B  #14,D0
00001384  4E4F                     331      TRAP    #15
00001386                           332      
00001386  720A                     333      MOVE.L  #10,D1
00001388  2A04                     334      MOVE.L  D4,D5
0000138A  E37D                     335      ROL.W   D1,D5
0000138C  CABC 00000007            336      AND.L   #$00000007,D5
00001392                           337      
00001392  BA3C 0002                338      CMP.B   #2,D5
00001396  6700 002A                339      BEQ     bclrImmediate
0000139A                           340      
0000139A  7400                     341      MOVE.L  #0,D2
0000139C  2604                     342      MOVE.L  D4,D3
0000139E  EF5B                     343      ROL.W   #7,D3
000013A0  C6BC 00000007            344      AND.L   #$00000007,D3
000013A6                           345      
000013A6  4EB9 00001BD8            346      JSR     DnMode
000013AC                           347      
000013AC  43F9 00001DDE            348      LEA     outputComma,A1
000013B2  103C 000E                349      MOVE.B  #14,D0
000013B6  4E4F                     350      TRAP    #15
000013B8                           351      
000013B8  4EB9 00001BC6            352      JSR     sourceEA
000013BE                           353      
000013BE  6000 0934                354      BRA     DONE
000013C2                           355          
000013C2                           356  bclrImmediate
000013C2                           357      
000013C2  7407                     358      MOVE.L  #7,D2
000013C4  7604                     359      MOVE.L  #4,D3
000013C6                           360      
000013C6  4EB9 00001C40            361      JSR     immediateData
000013CC                           362      
000013CC  43F9 00001DDE            363      LEA     outputComma,A1
000013D2  103C 000E                364      MOVE.B  #14,D0
000013D6  4E4F                     365      TRAP    #15
000013D8                           366      
000013D8  4EB9 00001BC6            367      JSR     sourceEA
000013DE                           368      
000013DE  6000 0914                369      BRA     DONE    
000013E2                           370      
000013E2                           371  moveByteOpCode                  *MOVE.B opcode
000013E2  BA3C 0001                372      CMP.B   #1,D5
000013E6  6600 0036                373      BNE     moveWordOpCode 
000013EA                           374  
000013EA                           375  moveByteMethod                  *MOVE.B output
000013EA  43F9 00001D3D            376      LEA     outputMOVE,A1       *Outputs "MOVE" onto console
000013F0  103C 000E                377      MOVE.B  #14,D0
000013F4  4E4F                     378      TRAP    #15
000013F6                           379      
000013F6  43F9 00001DC4            380      LEA     outputByte,A1       *Outputs ".B" onto console
000013FC  103C 000E                381      MOVE.B  #14,D0
00001400  4E4F                     382      TRAP    #15
00001402                           383      
00001402  4EB9 00001BC6            384      JSR     sourceEA            *Jump to subroutine sourceEA
00001408                           385      
00001408  43F9 00001DDE            386      LEA     outputComma,A1      *Outputs a comma onto console
0000140E  103C 000E                387      MOVE.B  #14,D0
00001412  4E4F                     388      TRAP    #15
00001414                           389      
00001414  4EB9 00001CA2            390      JSR     moveDestinationEA   *Jump to subroutine moveDestinationEA
0000141A                           391      
0000141A  6000 08D8                392      BRA     DONE                *Yay done
0000141E                           393      
0000141E                           394  
0000141E                           395  moveWordOpCode                  *MOVE.W opcode
0000141E  BA3C 0003                396      CMP.B   #3,D5
00001422  6600 005A                397      BNE     moveLongOpCode
00001426                           398     
00001426                           399  moveWordMethod                  *MOVE.W output
00001426  3404                     400      MOVE.W  D4,D2               *D4 has the original word
00001428  323C 000A                401      MOVE.W  #10,D1              *Move the value 10 into D1 since ROL has issues with
0000142C  E37A                     402      ROL.W   D1,D2               *   immediate values > 8
0000142E                           403      
0000142E  B47C 0001                404      CMP.W   #1,D2               *If the rotated value is a 1, it's a MOVEA.W
00001432  6700 0012                405      BEQ     moveAWordMethod    
00001436                           406      
00001436  43F9 00001D3D            407      LEA     outputMOVE,A1       *Outputs "MOVE." onto console
0000143C  103C 000E                408      MOVE.B  #14,D0
00001440  4E4F                     409      TRAP    #15
00001442  6000 0012                410      BRA     moveWordMethodpt2   *Go to the rest of the method~
00001446                           411      
00001446                           412  moveAWordMethod                 *MOVEA.W opcode
00001446  43F9 00001D42            413      LEA     outputMOVEA,A1      *Outputs "MOVEA" onto console
0000144C  103C 000E                414      MOVE.B  #14,D0
00001450  4E4F                     415      TRAP    #15
00001452  6000 0002                416      BRA     moveWordMethodpt2   *Go to the rest of the method~
00001456                           417      
00001456                           418  moveWordMethodpt2               *Part 2 of the MOVE/MOVEA.W series
00001456  43F9 00001DC8            419      LEA     outputWord,A1       *Outputs ".W" onto console
0000145C  103C 000E                420      MOVE.B  #14,D0
00001460  4E4F                     421      TRAP    #15
00001462                           422      
00001462  4EB9 00001BC6            423      JSR     sourceEA            *Yay subroutines
00001468                           424      
00001468  43F9 00001DDE            425      LEA     outputComma,A1      *outputs a comma onto console
0000146E  103C 000E                426      MOVE.B  #14,D0
00001472  4E4F                     427      TRAP    #15
00001474                           428      
00001474  4EB9 00001CA2            429      JSR     moveDestinationEA   *Gotta check the destination~
0000147A                           430  
0000147A  6000 0878                431      BRA     DONE                *I'm done, bra
0000147E                           432  
0000147E                           433  moveLongOpCode                  *MOVE.L opcode
0000147E  BA3C 0002                434      CMP.B   #2,D5
00001482  6600 005C                435      BNE     addOpCode
00001486                           436      
00001486                           437  moveLongOpCodeMethod            *MOVE.L output
00001486  340A                     438      MOVE.W  A2,D2               *Gotta check if it's actually a MOVEA
00001488  323C 000A                439      MOVE.W  #10,D1
0000148C  E37A                     440      ROL.W   D1,D2
0000148E                           441      
0000148E  B47C 0001                442      CMP.W   #1,D2
00001492  6700 0012                443      BEQ     moveALongMethod   
00001496                           444  
00001496  43F9 00001D3D            445      LEA     outputMOVE,A1       *outputs "MOVE" onto console
0000149C  103C 000E                446      MOVE.B  #14,D0
000014A0  4E4F                     447      TRAP    #15
000014A2                           448      
000014A2  6000 0012                449      BRA     moveLongMethodpt2   *Go to Part 2 of the MOVE series~
000014A6                           450      
000014A6                           451  moveALongMethod                 *MOVEA.L output
000014A6  43F9 00001D42            452      LEA     outputMOVEA,A1      *Outputs "MOVEA" onto console
000014AC  103C 000E                453      MOVE.B  #14,D0
000014B0  4E4F                     454      TRAP    #15
000014B2  6000 0002                455      BRA     moveLongMethodpt2   *Go to part 2~
000014B6                           456      
000014B6                           457  moveLongMethodpt2               *Part 2, the sequel(SQL?)
000014B6                           458      
000014B6  43F9 00001DCC            459      LEA     outputLong,A1       *Outputs ".L" onto console
000014BC  103C 000E                460      MOVE.B  #14,D0
000014C0  4E4F                     461      TRAP    #15
000014C2                           462      
000014C2  5207                     463      ADD.B   #1,D7
000014C4                           464      
000014C4  4EB9 00001BC6            465      JSR     sourceEA            *Go output source
000014CA                           466      
000014CA  43F9 00001DDE            467      LEA     outputComma,A1      *Yay commas
000014D0  103C 000E                468      MOVE.B  #14,D0
000014D4  4E4F                     469      TRAP    #15
000014D6                           470      
000014D6  4EB9 00001CA2            471      JSR     moveDestinationEA    *Output destination
000014DC  6000 0816                472      BRA     DONE
000014E0                           473  
000014E0                           474  addOpCode                        *ADD opcode
000014E0  BA3C 000D                475      CMP.B   #13,D5
000014E4  6600 0040                476      BNE     subOpCode    
000014E8                           477      
000014E8                           478  addMethod                        *ADD output
000014E8  43F9 00001D2E            479      LEA     outputADD,A1         *Outputs "ADD" onto console
000014EE  103C 000E                480      MOVE.B  #14,D0
000014F2  4E4F                     481      TRAP    #15
000014F4                           482      
000014F4  4EB9 00001B16            483      JSR     dotOpMode           *Checks if it's a byte,word, or long
000014FA                           484      
000014FA  BC3C 0001                485      CMP.B   #1,D6               *If D6 == 1, the data register is the source
000014FE  6700 05DE                486      BEQ     altOrder            *   D6 was decided in dotOpMode(?)
00001502                           487      
00001502  BC3C 0002                488      CMP.B   #2,D6
00001506  6700 05F2                489      BEQ     addaOrder           *go do ADDA stuff
0000150A                           490      
0000150A  4EB9 00001BC6            491      JSR     sourceEA            *outputs what the source is
00001510                           492      
00001510  43F9 00001DDE            493      LEA     outputComma,A1      *Commas~~~
00001516  103C 000E                494      MOVE.B  #14,D0
0000151A  4E4F                     495      TRAP    #15
0000151C                           496      
0000151C  4EB9 00001C76            497      JSR     addDestinationEA       *outputs what the destination is
00001522                           498      
00001522  6000 07D0                499      BRA     DONE
00001526                           500      
00001526                           501  subOpCode
00001526  BA3C 0009                502      CMP.B   #9,D5               *is it SUB?
0000152A  6600 0038                503      BNE     subQOpCode          *not SUB, check if SUBQ
0000152E                           504  
0000152E                           505  subMethod
0000152E  43F9 00001D34            506      LEA     outputSUB,A1        *output SUB to the console
00001534  103C 000E                507      MOVE.B  #14,D0  
00001538  4E4F                     508      TRAP    #15
0000153A                           509  
0000153A  4EB9 00001B16            510      JSR     dotOpMode           *check if its a B,W, or L
00001540                           511  
00001540  BC3C 0001                512      CMP.B   #1,D6               *if D6 == 1, the data register is the source
00001544  6700 0598                513      BEQ     altOrder
00001548                           514  
00001548  4EB9 00001BC6            515      JSR     sourceEA            *outputs what the source is
0000154E                           516  
0000154E  43F9 00001DDE            517      LEA     outputComma,A1      *commas
00001554  103C 000E                518      MOVE.B  #14,D0
00001558  4E4F                     519      TRAP    #15
0000155A                           520  
0000155A  4EB9 00001C76            521      JSR     addDestinationEA    *outputs what ths destination is
00001560                           522  
00001560  6000 0792                523      BRA     DONE                
00001564                           524  
00001564                           525  subQOpCode
00001564  BA3C 0005                526      CMP.B   #5,D5               *is it SUBQ?
00001568  6600 008A                527      BNE     orOpCode            *check if its DIVS.W
0000156C                           528      
0000156C                           529  subQMethod
0000156C  43F9 00001D38            530      LEA     outputSUBQ,A1       *output SUBQ
00001572  103C 000E                531      MOVE.B  #14,D0
00001576  4E4F                     532      TRAP    #15
00001578                           533      
00001578  3604                     534      MOVE.W  D4,D3               *move original word from D4
0000157A  123C 000A                535      MOVE.B  #10,D1              *hacks
0000157E  E37B                     536      ROL.W   D1,D3               *ROL by 10
00001580  C6BC 00000003            537      AND.L   #00000003,D3        *Mask 
00001586  4EB9 00001B8A            538      JSR     byteOpMode          *check if B,W,L
0000158C                           539      
0000158C  4EB9 000015A8            540      JSR     subQData            *outputs #1-#8
00001592                           541      
00001592  43F9 00001DDE            542      LEA     outputComma,A1      *commas
00001598  103C 000E                543      MOVE.B  #14,D0
0000159C  4E4F                     544      TRAP    #15
0000159E                           545      
0000159E  4EB9 00001BC6            546      JSR     sourceEA            *get the source
000015A4                           547      
000015A4  6000 074E                548      BRA     DONE
000015A8                           549      
000015A8                           550      
000015A8                           551  subQData
000015A8  3604                     552      MOVE.W  D4,D3               *move original word from D4
000015AA  EF5B                     553      ROL.W   #7,D3               *ROL 7
000015AC  C6BC 00000007            554      AND.L   #$00000007,D3       *mask the bits
000015B2                           555      
000015B2  B63C 0000                556      CMP.B   #0,D3               *if its 0 display 8
000015B6  6700 0022                557      BEQ     display8ForSubQ
000015BA                           558      
000015BA  B63C 0008                559      CMP.B   #8,D3
000015BE  6C00 0500                560      BGE     dataOpCode
000015C2                           561      
000015C2  43F9 00001DD9            562      LEA     outputPound,A1      *output #
000015C8  103C 000E                563      MOVE.B  #14,D0
000015CC  4E4F                     564      TRAP    #15
000015CE                           565      
000015CE  4281                     566      CLR.L   D1
000015D0  1203                     567      MOVE.B  D3,D1               *output 1-7
000015D2  103C 0003                568      MOVE.B  #3,D0
000015D6  4E4F                     569      TRAP    #15
000015D8                           570      
000015D8  4E75                     571      RTS                         *return to subQmethod
000015DA                           572      
000015DA                           573  display8ForSubQ
000015DA                           574  
000015DA  43F9 00001DD9            575      LEA     outputPound,A1      *output #
000015E0  103C 000E                576      MOVE.B  #14,D0
000015E4  4E4F                     577      TRAP    #15
000015E6  4281                     578      CLR.L   D1
000015E8  123C 0008                579      MOVE.B  #8,D1               *output 8
000015EC  103C 0003                580      MOVE.B  #3,D0
000015F0  4E4F                     581      TRAP    #15
000015F2                           582      
000015F2  4E75                     583      RTS                         *return to subQMethod
000015F4                           584  
000015F4                           585  orOpCode
000015F4  BA3C 0008                586      CMP.B   #8,D5   
000015F8  6600 008A                587      BNE     eorOpCode
000015FC                           588      
000015FC  2A04                     589      MOVE.L  D4,D5
000015FE  720A                     590      MOVE.L  #10,D1
00001600  E37D                     591      ROL.W   D1,D5
00001602                           592      
00001602  CABC 00000007            593      AND.L   #$00000007,D5
00001608                           594      
00001608  BA3C 0007                595      CMP.B   #7,D5
0000160C  6700 0038                596      BEQ     divsWOpCode
00001610                           597      
00001610                           598  orMethod
00001610  43F9 00001D8D            599      LEA     outputOR,A1
00001616  103C 000E                600      MOVE.B  #14,D0
0000161A  4E4F                     601      TRAP    #15
0000161C                           602      
0000161C  4EB9 00001B16            603      JSR     dotOpMode
00001622                           604      
00001622  BC3C 0001                605      CMP.B   #1,D6
00001626  6700 04B6                606      BEQ     altOrder
0000162A                           607      
0000162A  4EB9 00001BC6            608      JSR     sourceEA
00001630                           609      
00001630  43F9 00001DDE            610      LEA     outputComma,A1
00001636  103C 000E                611      MOVE.B  #14,D0
0000163A  4E4F                     612      TRAP    #15
0000163C                           613      
0000163C  4EB9 00001C76            614      JSR     addDestinationEA
00001642                           615      
00001642  6000 06B0                616      BRA     DONE
00001646                           617      
00001646                           618  divsWOpCode
00001646                           619  *    CMP.B   #8,D5
00001646                           620  *    BEQ     divsWCheck          *bits 8,7,6 need to make 7 to be DIVSW
00001646                           621  *    BRA     eorOpCode
00001646                           622  *    
00001646                           623  divsWCheck
00001646  3604                     624      MOVE.W  D4,D3
00001648  143C 000A                625      MOVE.B  #10,D2
0000164C  E57B                     626      ROL.W   D2,D3
0000164E  C6BC 00000007            627      AND.L   #$00000007,D3
00001654  B63C 0007                628      CMP.B   #7,D3
00001658  6600 069A                629      BNE     DONE
0000165C                           630      
0000165C  43F9 00001D5E            631      LEA     outputDIVSW,A1
00001662  103C 000E                632      MOVE.B  #14,D0
00001666  4E4F                     633      TRAP    #15
00001668                           634      
00001668  4EB9 00001BC6            635      JSR     sourceEA 
0000166E                           636      
0000166E  43F9 00001DDE            637      LEA     outputComma,A1
00001674  103C 000E                638      MOVE.B  #14,D0
00001678  4E4F                     639      TRAP    #15
0000167A                           640      
0000167A  4EB9 00001C76            641      JSR     addDestinationEA
00001680                           642      
00001680  6000 0672                643      BRA     DONE
00001684                           644      
00001684                           645  eorOpCode
00001684  BA3C 000B                646      CMP.B   #11,D5
00001688  6600 0078                647      BNE     shiftsOpCode
0000168C                           648      
0000168C  2A04                     649      MOVE.L  D4,D5
0000168E  E19D                     650      ROL.L   #8,D5
00001690  CABC 00000001            651      AND.L   #$00000001,D5
00001696                           652      
00001696                           653      
00001696                           654  eorMethod
00001696  BA3C 0001                655      CMP.B   #1,D5
0000169A  6600 0030                656      BNE     cmpOpCode
0000169E                           657      
0000169E  43F9 00001D90            658      LEA     outputEOR,A1
000016A4  103C 000E                659      MOVE.B  #14,D0
000016A8  4E4F                     660      TRAP    #15
000016AA                           661      
000016AA  4EB9 00001B16            662      JSR     dotOpMode
000016B0                           663      
000016B0  4EB9 00001C76            664      JSR     addDestinationEA
000016B6                           665      
000016B6  43F9 00001DDE            666      LEA     outputComma,A1
000016BC  103C 000E                667      MOVE.B  #14,D0
000016C0  4E4F                     668      TRAP    #15
000016C2                           669      
000016C2  4EB9 00001BC6            670      JSR     sourceEA
000016C8                           671      
000016C8  6000 062A                672      BRA     DONE    
000016CC                           673  
000016CC                           674  cmpOpCode
000016CC  BA3C 0000                675      CMP.B   #0,D5
000016D0  6600 0622                676      BNE     DONE
000016D4                           677      
000016D4  43F9 00001D99            678      LEA     outputCMP,A1
000016DA  103C 000E                679      MOVE.B  #14,D0
000016DE  4E4F                     680      TRAP    #15
000016E0                           681      
000016E0  4EB9 00001B16            682      JSR     dotOpMode
000016E6                           683      
000016E6  4EB9 00001BC6            684      JSR     sourceEA
000016EC                           685      
000016EC  43F9 00001DDE            686      LEA     outputComma,A1
000016F2  103C 000E                687      MOVE.B  #14,D0
000016F6  4E4F                     688      TRAP    #15
000016F8                           689      
000016F8  4EB9 00001C76            690      JSR     addDestinationEA
000016FE                           691      
000016FE  6000 05F4                692      BRA     DONE
00001702                           693     
00001702                           694  shiftsOpCode
00001702  BA3C 000E                695      CMP.B   #14,D5
00001706  6600 0166                696      BNE     mulsWOpCode
0000170A                           697      
0000170A  2A04                     698      MOVE.L  D4,D5
0000170C  E65D                     699      ROR.W   #3,D5
0000170E  CABC 00000003            700      AND.L   #$00000003,D5
00001714                           701      
00001714                           702  lsdOpCode
00001714  BA3C 0001                703      CMP.B   #1,D5
00001718  6600 0036                704      BNE     asdOpCode
0000171C                           705      
0000171C                           706  lsdMethod
0000171C  43F9 00001DA3            707      LEA     outputLS,A1
00001722  103C 000E                708      MOVE.B  #14,D0
00001726  4E4F                     709      TRAP    #15
00001728                           710      
00001728  4EB9 000017C8            711      JSR     leftRight
0000172E                           712      
0000172E  4EB9 00001B16            713      JSR     dotOpMode
00001734                           714      
00001734  4EB9 000017F6            715      JSR     shiftSourceEA
0000173A                           716      
0000173A  43F9 00001DDE            717      LEA     outputComma,A1
00001740  103C 000E                718      MOVE.B  #14,D0
00001744  4E4F                     719      TRAP    #15
00001746                           720      
00001746  4EB9 00001850            721      JSR     shiftDestEA
0000174C                           722      
0000174C  6000 05A6                723      BRA     DONE
00001750                           724   
00001750                           725  asdOpCode
00001750  BA3C 0000                726      CMP.B   #0,D5
00001754  6600 0036                727      BNE     rodOpCode
00001758                           728      
00001758  43F9 00001DA6            729      LEA     outputAS,A1
0000175E  103C 000E                730      MOVE.B  #14,D0
00001762  4E4F                     731      TRAP    #15
00001764                           732      
00001764  4EB9 000017C8            733      JSR     leftRight
0000176A                           734      
0000176A  4EB9 00001B16            735      JSR     dotOpMode
00001770                           736      
00001770  4EB9 000017F6            737      JSR     shiftSourceEA
00001776                           738      
00001776  43F9 00001DDE            739      LEA     outputComma,A1
0000177C  103C 000E                740      MOVE.B  #14,D0
00001780  4E4F                     741      TRAP    #15
00001782                           742      
00001782  4EB9 00001850            743      JSR     shiftDestEA    
00001788                           744      
00001788  6000 056A                745      BRA     DONE
0000178C                           746      
0000178C                           747  rodOpCode
0000178C  BA3C 0003                748      CMP.B   #3,D5
00001790  6600 0562                749      BNE     DONE
00001794                           750      
00001794  43F9 00001DA9            751      LEA     outputRO,A1
0000179A  103C 000E                752      MOVE.B  #14,D0
0000179E  4E4F                     753      TRAP    #15
000017A0                           754      
000017A0  4EB9 000017C8            755      JSR     leftRight
000017A6                           756      
000017A6  4EB9 00001B16            757      JSR     dotOpMode
000017AC                           758      
000017AC  4EB9 000017F6            759      JSR     shiftSourceEA
000017B2                           760      
000017B2  43F9 00001DDE            761      LEA     outputComma,A1
000017B8  103C 000E                762      MOVE.B  #14,D0
000017BC  4E4F                     763      TRAP    #15
000017BE                           764      
000017BE  4EB9 00001850            765      JSR     shiftDestEA
000017C4                           766      
000017C4  6000 052E                767      BRA     DONE
000017C8                           768      
000017C8                           769  leftRight
000017C8  2604                     770      MOVE.L  D4,D3
000017CA  E15B                     771      ROL.W   #8,D3
000017CC  C6BC 00000001            772      AND.L   #$00000001,D3
000017D2                           773  
000017D2  B63C 0000                774      CMP.B   #0,D3
000017D6  6700 0010                775      BEQ     rightRight
000017DA                           776      
000017DA  43F9 00001DAC            777      LEA     outputLeft,A1
000017E0  103C 000E                778      MOVE.B  #14,D0
000017E4  4E4F                     779      TRAP    #15
000017E6                           780      
000017E6  4E75                     781      RTS
000017E8                           782      
000017E8                           783  rightRight
000017E8  43F9 00001DAE            784      LEA     outputRight,A1
000017EE  103C 000E                785      MOVE.B  #14,D0
000017F2  4E4F                     786      TRAP    #15
000017F4                           787      
000017F4  4E75                     788      RTS
000017F6                           789      
000017F6                           790  shiftSourceEA
000017F6  2404                     791      MOVE.L  D4,D2
000017F8  EA5A                     792      ROR.W   #5,D2
000017FA  C4BC 00000001            793      AND.L   #$00000001,D2
00001800                           794  
00001800  2604                     795      MOVE.L  D4,D3
00001802  EF5B                     796      ROL.W   #7,D3
00001804  C6BC 00000007            797      AND.L   #$00000007,D3
0000180A                           798      
0000180A  B43C 0000                799      CMP.B   #0,D2
0000180E  6700 0018                800      BEQ     shiftImmediateEA
00001812                           801      
00001812  43F9 00001DD7            802      LEA     outputDn,A1
00001818  103C 000E                803      MOVE.B  #14,D0
0000181C  4E4F                     804      TRAP    #15
0000181E                           805      
0000181E  2203                     806      MOVE.L  D3,D1
00001820  103C 0003                807      MOVE.B  #3,D0
00001824  4E4F                     808      TRAP    #15
00001826                           809      
00001826  4E75                     810      RTS
00001828                           811      
00001828                           812  shiftImmediateEA
00001828  43F9 00001DD9            813      LEA     outputPound,A1
0000182E  103C 000E                814      MOVE.B  #14,D0
00001832  4E4F                     815      TRAP    #15
00001834                           816      
00001834  B63C 0000                817      CMP.B   #0,D3
00001838  6700 000C                818      BEQ     shiftImmediateEight
0000183C                           819      
0000183C  2203                     820      MOVE.L  D3,D1
0000183E  103C 0003                821      MOVE.B  #3,D0
00001842  4E4F                     822      TRAP    #15
00001844                           823      
00001844  4E75                     824      RTS
00001846                           825      
00001846                           826  shiftImmediateEight
00001846  7208                     827      MOVE.L  #8,D1
00001848  103C 0003                828      MOVE.B  #3,D0
0000184C  4E4F                     829      TRAP    #15
0000184E                           830      
0000184E  4E75                     831      RTS
00001850                           832      
00001850                           833  shiftDestEA
00001850  2604                     834      MOVE.L  D4,D3
00001852  C6BC 00000007            835      AND.L   #$00000007,D3
00001858                           836      
00001858  43F9 00001DD7            837      LEA     outputDn,A1
0000185E  103C 000E                838      MOVE.B  #14,D0
00001862  4E4F                     839      TRAP    #15
00001864                           840      
00001864  2203                     841      MOVE.L  D3,D1
00001866  103C 0003                842      MOVE.B  #3,D0
0000186A  4E4F                     843      TRAP    #15
0000186C                           844      
0000186C  4E75                     845      RTS
0000186E                           846      
0000186E                           847  mulsWOpCode
0000186E  BA3C 000C                848      CMP.B   #12,D5
00001872  6600 004A                849      BNE     mulsLOpCode
00001876  3604                     850      MOVE.W  D4,D3
00001878  EC5B                     851      ROR.W   #6,D3
0000187A  C63C 0007                852      AND.B   #7,D3
0000187E  B63C 0007                853      CMP.B   #7,D3
00001882  6600 023C                854      BNE     dataOpCode   
00001886                           855  
00001886                           856  mulsWMethod
00001886  3604                     857      MOVE.W  D4,D3
00001888  E61B                     858      ROR.B   #3,D3
0000188A  C63C 0007                859      AND.B   #7,D3
0000188E  B63C 0001                860      CMP.B   #1,D3
00001892  6700 022C                861      BEQ     dataOpCode
00001896                           862      
00001896                           863  mulsOutput    
00001896  43F9 00001D58            864      LEA     outputMULS,A1
0000189C  103C 000E                865      MOVE.B  #14,D0
000018A0  4E4F                     866      TRAP    #15
000018A2                           867      
000018A2  4EB9 00001BC6            868      JSR     sourceEA
000018A8                           869      
000018A8  43F9 00001DDE            870      LEA     outputComma,A1
000018AE  103C 000E                871      MOVE.B  #14,D0
000018B2  4E4F                     872      TRAP    #15
000018B4                           873      
000018B4  4EB9 00001C76            874      JSR     addDestinationEA
000018BA                           875      
000018BA  6000 0438                876      BRA     DONE
000018BE                           877      
000018BE                           878  mulsLOpCode *--------Do we need to do MULSL?
000018BE                           879  *    MOVE.W  D4,D3
000018BE                           880  *    MOVE.B  #10,D2
000018BE                           881  *    ROL.W   D2,D3
000018BE                           882  *    AND.W   #$01FF,D3
000018BE                           883  *    CMP.W   #304,D3
000018BE                           884  *    BNE     negOpCode
000018BE                           885      
000018BE                           886  mulsLMethod
000018BE                           887          
000018BE                           888      
000018BE                           889  negOpCode
000018BE  3604                     890      MOVE.W  D4,D3
000018C0  E15B                     891      ROL.W   #8,D3
000018C2  B63C 0044                892      CMP.B   #$44,D3
000018C6  6600 002E                893      BNE     braOpCode
000018CA                           894      
000018CA                           895  negMethod
000018CA  43F9 00001D80            896      LEA     outputNEG,A1        *output NEG to the console
000018D0  103C 000E                897      MOVE.B  #14,D0
000018D4  4E4F                     898      TRAP    #15
000018D6                           899      
000018D6  4283                     900      CLR.L   D3
000018D8  3604                     901      MOVE.W  D4,D3               *move original word from D4
000018DA  123C 000A                902      MOVE.B  #10,D1              *hacks
000018DE  E37B                     903      ROL.W   D1,D3               *ROL by 10
000018E0  C6BC 00000003            904      AND.L   #00000003,D3        *Mask 
000018E6  4EB9 00001B8A            905      JSR     byteOpMode          *check if B,W,L
000018EC                           906          
000018EC  4EB9 00001BC6            907      JSR     sourceEA
000018F2                           908      
000018F2  6000 0400                909      BRA     DONE
000018F6                           910  
000018F6                           911  braOpCode
000018F6  3604                     912      MOVE.W  D4,D3               *move the opcode word into D3
000018F8  E15B                     913      ROL.W   #8,D3               *isolate the last byte
000018FA  B63C 0060                914      CMP.B   #$60,D3             *is it a BRA?
000018FE  6600 0154                915      BNE     bccOpCode           *its data then
00001902                           916      
00001902                           917  braMethod
00001902  43F9 00001D84            918      LEA     outputBRA,A1        
00001908  103C 000E                919      MOVE.B  #14,D0
0000190C  4E4F                     920      TRAP    #15
0000190E                           921  
0000190E                           922  
0000190E                           923  bccDisplacement    
0000190E  1604                     924      MOVE.B  D4,D3
00001910  C67C 00FF                925      AND.W   #$00FF,D3
00001914  B63C 0000                926      CMP.B   #$00,D3
00001918  6700 0048                927      BEQ     bitDisplacement16
0000191C  B63C 00FF                928      CMP.B   #$FF,D3
00001920  6700 00B6                929      BEQ     bitDisplacement32
00001924  E11B                     930      ROL.B   #8,D3
00001926  0A43 00FF                931      EOR.W   #$FF,D3
0000192A  5243                     932      ADD.W   #1,D3
0000192C                           933      
0000192C  43F9 00001DEB            934      LEA     outputNegSign,A1
00001932  103C 000E                935      MOVE.B  #14,D0
00001936  4E4F                     936      TRAP    #15
00001938                           937      
00001938  3203                     938      MOVE.W  D3,D1
0000193A  103C 0003                939      MOVE.B  #3,D0
0000193E  4E4F                     940      TRAP    #15
00001940                           941      
00001940  43F9 00001DE6            942      LEA     outputSpace,A1
00001946  103C 000E                943      MOVE.B  #14,D0
0000194A  4E4F                     944      TRAP    #15
0000194C                           945      
0000194C  304D                     946      MOVE.W  A5,A0
0000194E  90C3                     947      SUBA.W  D3,A0
00001950  3208                     948      MOVE.W  A0,D1
00001952  103C 000F                949      MOVE.B  #15,D0
00001956  143C 0010                950      MOVE.B  #16,D2
0000195A  4E4F                     951      TRAP    #15
0000195C                           952      
0000195C  304C                     953      MOVE.W  A4,A0
0000195E                           954      
0000195E                           955      
0000195E  6000 0394                956      BRA     DONE
00001962                           957     
00001962                           958  bitDisplacement16
00001962                           959      
00001962  304D                     960      MOVE.W  A5,A0
00001964  381D                     961      MOVE.W  (A5)+,D4
00001966  3604                     962      MOVE.W  D4,D3
00001968  E95B                     963      ROL.W   #4,D3
0000196A  C67C 000F                964      AND.W   #$000F,D3
0000196E  B67C 0008                965      CMP.W   #8,D3
00001972  6C00 002A                966      BGE     negBit16
00001976                           967      
00001976  3204                     968      MOVE.W  D4,D1
00001978  103C 0003                969      MOVE.B  #3,D0
0000197C  4E4F                     970      TRAP    #15
0000197E                           971      
0000197E  43F9 00001DE6            972      LEA     outputSpace,A1
00001984  103C 000E                973      MOVE.B  #14,D0
00001988  4E4F                     974      TRAP    #15
0000198A                           975      
0000198A  D0C4                     976      ADDA.W  D4,A0
0000198C  3208                     977      MOVE.W  A0,D1
0000198E  103C 000F                978      MOVE.B  #15,D0
00001992  143C 0010                979      MOVE.B  #16,D2
00001996  4E4F                     980      TRAP    #15
00001998                           981      
00001998  304C                     982      MOVE.W  A4,A0
0000199A                           983      
0000199A  6000 0358                984      BRA DONE
0000199E                           985      
0000199E                           986  negBit16
0000199E                           987  
0000199E  0A44 FFFF                988      EOR.W   #$FFFF,D4
000019A2  5244                     989      ADD.W   #1,D4
000019A4                           990      
000019A4  43F9 00001DEB            991      LEA     outputNegSign,A1
000019AA  103C 000E                992      MOVE.B  #14,D0
000019AE  4E4F                     993      TRAP    #15
000019B0                           994      
000019B0  3204                     995      MOVE.W  D4,D1
000019B2  103C 0003                996      MOVE.B  #3,D0
000019B6  4E4F                     997      TRAP    #15
000019B8                           998      
000019B8  43F9 00001DE6            999      LEA     outputSpace,A1
000019BE  103C 000E               1000      MOVE.B  #14,D0
000019C2  4E4F                    1001      TRAP    #15
000019C4                          1002      
000019C4  90C4                    1003      SUBA.W  D4,A0
000019C6  3208                    1004      MOVE.W  A0,D1
000019C8  103C 000F               1005      MOVE.B  #15,D0
000019CC  143C 0010               1006      MOVE.B  #16,D2
000019D0  4E4F                    1007      TRAP    #15
000019D2                          1008      
000019D2  304C                    1009      MOVE.W  A4,A0
000019D4                          1010      
000019D4  6000 031E               1011      BRA     DONE
000019D8                          1012      
000019D8                          1013  bitDisplacement32
000019D8                          1014  
000019D8  204D                    1015      MOVE.L  A5,A0
000019DA  281D                    1016      MOVE.L  (A5)+,D4
000019DC  2604                    1017      MOVE.L  D4,D3
000019DE  E95B                    1018      ROL.W   #4,D3
000019E0  C6BC 0000000F           1019      AND.L   #$0000000F,D3
000019E6  B6BC 00000008           1020      CMP.L   #8,D3
000019EC  6C00 002A               1021      BGE     negBit32
000019F0                          1022      
000019F0  2204                    1023      MOVE.L  D4,D1
000019F2  103C 0003               1024      MOVE.B  #3,D0
000019F6  4E4F                    1025      TRAP    #15
000019F8                          1026      
000019F8  43F9 00001DE6           1027      LEA     outputSpace,A1
000019FE  103C 000E               1028      MOVE.B  #14,D0
00001A02  4E4F                    1029      TRAP    #15
00001A04                          1030      
00001A04  D1C4                    1031      ADDA.L  D4,A0
00001A06  2208                    1032      MOVE.L  A0,D1
00001A08  103C 000F               1033      MOVE.B  #15,D0
00001A0C  143C 0010               1034      MOVE.B  #16,D2
00001A10  4E4F                    1035      TRAP    #15
00001A12                          1036      
00001A12  204C                    1037      MOVE.L  A4,A0
00001A14                          1038      
00001A14  6000 02DE               1039      BRA DONE
00001A18                          1040  
00001A18                          1041  negBit32
00001A18                          1042  
00001A18  0A84 FFFFFFFF           1043      EOR.L   #$FFFFFFFF,D4
00001A1E  5284                    1044      ADD.L   #1,D4
00001A20                          1045      
00001A20  43F9 00001DEB           1046      LEA     outputNegSign,A1
00001A26  103C 000E               1047      MOVE.B  #14,D0
00001A2A  4E4F                    1048      TRAP    #15
00001A2C                          1049      
00001A2C  2204                    1050      MOVE.L  D4,D1
00001A2E  103C 0003               1051      MOVE.B  #3,D0
00001A32  4E4F                    1052      TRAP    #15
00001A34                          1053      
00001A34  43F9 00001DE6           1054      LEA     outputSpace,A1
00001A3A  103C 000E               1055      MOVE.B  #14,D0
00001A3E  4E4F                    1056      TRAP    #15
00001A40                          1057      
00001A40  91C4                    1058      SUBA.L  D4,A0
00001A42  2208                    1059      MOVE.L  A0,D1
00001A44  103C 000F               1060      MOVE.B  #15,D0
00001A48  143C 0010               1061      MOVE.B  #16,D2
00001A4C  4E4F                    1062      TRAP    #15
00001A4E                          1063      
00001A4E  204C                    1064      MOVE.L  A4,A0
00001A50                          1065      
00001A50  6000 02A2               1066      BRA     DONE
00001A54                          1067      
00001A54                          1068  bccOpCode
00001A54  BA3C 0006               1069      CMP.B   #6,D5               *is it Bcc?
00001A58  6600 0066               1070      BNE     dataOpCode          *its data then
00001A5C                          1071      
00001A5C                          1072  bccMethod
00001A5C  3604                    1073      MOVE.W  D4,D3
00001A5E  E15B                    1074      ROL.W   #8,D3
00001A60  C67C 000F               1075      AND.W   #$000F,D3
00001A64  B63C 0005               1076      CMP.B   #5,D3
00001A68  6700 0016               1077      BEQ     bcs
00001A6C  B63C 000C               1078      CMP.B   #$C,D3
00001A70  6700 001E               1079      BEQ     bge
00001A74  B63C 000D               1080      CMP.B   #$D,D3
00001A78  6700 0026               1081      BEQ     bct
00001A7C  6000 0032               1082      BRA     bvc
00001A80                          1083      
00001A80                          1084  bcs
00001A80  43F9 00001DB0           1085      LEA     outputBCS,A1
00001A86  103C 000E               1086      MOVE.B  #14,D0
00001A8A  4E4F                    1087      TRAP    #15
00001A8C                          1088      
00001A8C  6000 FE80               1089      BRA     bccDisplacement
00001A90                          1090      
00001A90                          1091  bge
00001A90  43F9 00001DB5           1092      LEA     outputBGE,A1
00001A96  103C 000E               1093      MOVE.B  #14,D0
00001A9A  4E4F                    1094      TRAP    #15
00001A9C                          1095      
00001A9C  6000 FE70               1096      BRA     bccDisplacement
00001AA0                          1097  
00001AA0                          1098  bct
00001AA0  43F9 00001DBA           1099      LEA     outputBCT,A1
00001AA6  103C 000E               1100      MOVE.B  #14,D0
00001AAA  4E4F                    1101      TRAP    #15
00001AAC                          1102      
00001AAC  6000 FE60               1103      BRA     bccDisplacement
00001AB0                          1104      
00001AB0                          1105  bvc
00001AB0  43F9 00001DBF           1106      LEA     outputBVC,A1
00001AB6  103C 000E               1107      MOVE.B  #14,D0
00001ABA  4E4F                    1108      TRAP    #15
00001ABC                          1109      
00001ABC  6000 FE50               1110      BRA     bccDisplacement
00001AC0                          1111      
00001AC0                          1112  
00001AC0                          1113             
00001AC0                          1114  dataOpCode
00001AC0  4283                    1115      CLR.L   D3
00001AC2  43F9 00001D7A           1116      LEA     outputData,A1
00001AC8  103C 000E               1117      MOVE.B  #14,D0
00001ACC  4E4F                    1118      TRAP    #15
00001ACE                          1119      
00001ACE  3215                    1120      MOVE.W  (A5),D1
00001AD0  103C 000F               1121      MOVE.B  #15,D0
00001AD4  143C 0010               1122      MOVE.B  #16,D2
00001AD8  4E4F                    1123      TRAP    #15
00001ADA                          1124      
00001ADA  6000 0218               1125      BRA     DONE
00001ADE                          1126  
00001ADE                          1127  
00001ADE                          1128  altOrder                            *outputs the Dn as the source for ADD
00001ADE  4EB9 00001C76           1129      JSR     addDestinationEA
00001AE4                          1130      
00001AE4  43F9 00001DDE           1131      LEA     outputComma,A1
00001AEA  103C 000E               1132      MOVE.B  #14,D0
00001AEE  4E4F                    1133      TRAP    #15
00001AF0                          1134      
00001AF0  4EB9 00001BC6           1135      JSR     sourceEA
00001AF6  6000 01FC               1136      BRA     DONE
00001AFA                          1137      
00001AFA                          1138  addaOrder                           *ADDA method
00001AFA  4EB9 00001BC6           1139      JSR     sourceEA                *output source first
00001B00                          1140      
00001B00  43F9 00001DDE           1141      LEA     outputComma,A1          *Comma
00001B06  103C 000E               1142      MOVE.B  #14,D0
00001B0A  4E4F                    1143      TRAP    #15
00001B0C                          1144      
00001B0C  4EB9 00001CBE           1145      JSR     addaDestEA              *Have to set destination mode in addaDestEA
00001B12  6000 01E0               1146      BRA     DONE
00001B16                          1147  
00001B16                          1148  
00001B16                          1149  dotOpMode                           *Checks if it's a Byte,Word, or Long for ADD and SUB
00001B16  3604                    1150      MOVE.W  D4,D3                   *Gets the original code from D4                 
00001B18  143C 000A               1151      MOVE.B  #10,D2                  *yay hacks
00001B1C                          1152      
00001B1C  E57B                    1153      ROL.W   D2,D3                   *Rotates the original left by 10 bits
00001B1E  C6BC 00000007           1154      AND.L   #$00000007,D3           *mask it up
00001B24                          1155      
00001B24  B63C 0003               1156      CMP.B   #3,D3                   
00001B28  6C00 0006               1157      BGE     altOpMode               *if value is > 3, Dn is the source
00001B2C                          1158      
00001B2C  6000 005C               1159      BRA     byteOpMode    
00001B30                          1160  
00001B30                          1161  altOpMode                           *But wait, there's more!
00001B30  B63C 0003               1162      CMP.B   #3,D3                   *If it's 3, it's an ADDA.W
00001B34  6700 0016               1163      BEQ     addaWOpMode
00001B38                          1164      
00001B38  B63C 0007               1165      CMP.B   #7,D3                   *If it's a 7, it's an ADDA.L
00001B3C  6700 002C               1166      BEQ     addaLOpMode             *Otherwise, it's just ADD with Dn in source
00001B40                          1167      
00001B40  1C3C 0001               1168      MOVE.B  #1,D6                   *D6 is 1 if Dn is the source
00001B44  C63C 0003               1169      AND.B   #$3,D3                  *Mask it so it can continue with the output
00001B48  6000 0040               1170      BRA     byteOpMode              *without the meddling 2^2 bit
00001B4C                          1171  
00001B4C                          1172  addaWOpMode                         *It's an ADDA.W
00001B4C  3C3C 0002               1173      MOVE.W  #2,D6
00001B50                          1174      
00001B50  43F9 00001D32           1175      LEA     outputADDA,A1
00001B56  103C 000E               1176      MOVE.B  #14,D0
00001B5A  4E4F                    1177      TRAP    #15
00001B5C                          1178      
00001B5C  43F9 00001DC8           1179      LEA     outputWord,A1
00001B62  103C 000E               1180      MOVE.B  #14,D0
00001B66  4E4F                    1181      TRAP    #15
00001B68                          1182      
00001B68  4E75                    1183      RTS
00001B6A                          1184      
00001B6A                          1185  addaLOpMode                         *It's an ADDA.L
00001B6A  3C3C 0002               1186      MOVE.W  #2,D6
00001B6E                          1187      
00001B6E  5207                    1188      ADD.B   #1,D7
00001B70                          1189      
00001B70  43F9 00001D32           1190      LEA     outputADDA,A1
00001B76  103C 000E               1191      MOVE.B  #14,D0
00001B7A  4E4F                    1192      TRAP    #15
00001B7C                          1193      
00001B7C  43F9 00001DCC           1194      LEA     outputLong,A1
00001B82  103C 000E               1195      MOVE.B  #14,D0
00001B86  4E4F                    1196      TRAP    #15
00001B88                          1197      
00001B88  4E75                    1198      RTS
00001B8A                          1199      
00001B8A                          1200      
00001B8A                          1201  byteOpMode                          *It's a byte?
00001B8A  B63C 0000               1202      CMP.B   #0,D3
00001B8E  6600 0010               1203      BNE     wordOpMode
00001B92                          1204      
00001B92  43F9 00001DC4           1205      LEA     outputByte,A1           *Output ".B" !
00001B98  103C 000E               1206      MOVE.B  #14,D0
00001B9C  4E4F                    1207      TRAP    #15
00001B9E  4E75                    1208      RTS                             *Time to return back in time
00001BA0                          1209      
00001BA0                          1210  wordOpMode                          *It's a word?
00001BA0  B63C 0001               1211      CMP.B   #1,D3
00001BA4  6600 0010               1212      BNE     longOpMode
00001BA8                          1213      
00001BA8  43F9 00001DC8           1214      LEA     outputWord,A1           *Output ".W" onto console
00001BAE  103C 000E               1215      MOVE.B  #14,D0
00001BB2  4E4F                    1216      TRAP    #15
00001BB4  4E75                    1217      RTS                             *Time warp~
00001BB6                          1218      
00001BB6                          1219  longOpMode                          *It better be a long then
00001BB6  43F9 00001DCC           1220      LEA     outputLong,A1           *outputs ".L" onto console
00001BBC  103C 000E               1221      MOVE.B  #14,D0
00001BC0  4E4F                    1222      TRAP    #15
00001BC2                          1223      
00001BC2  5207                    1224      ADD.B   #1,D7
00001BC4                          1225     
00001BC4  4E75                    1226      RTS                             *whoosh~
00001BC6                          1227   
00001BC6                          1228      
00001BC6                          1229  sourceEA                            *output the Source EA
00001BC6  3604                    1230      MOVE.W  D4,D3                   *Put the original opcode into D3
00001BC8  3403                    1231      MOVE.W  D3,D2                   *Copy that into D2
00001BCA                          1232      
00001BCA  E65A                    1233      ROR.W   #3,D2                   *Whoo~ Rotating~
00001BCC  C4BC 00000007           1234      AND.L   #$00000007,D2           *D2 has Mode
00001BD2                          1235      
00001BD2                          1236  
00001BD2  C6BC 00000007           1237      AND.L   #$00000007,D3           *D3 has Register
00001BD8                          1238  
00001BD8                          1239   
00001BD8                          1240  DnMode                          *Is the Mode a Data Register?
00001BD8  4281                    1241      CLR.L   D1
00001BDA                          1242      
00001BDA  B43C 0000               1243      CMP.B   #0,D2
00001BDE  6600 0018               1244      BNE     AnMode
00001BE2                          1245      
00001BE2  43F9 00001DD7           1246      LEA     outputDn,A1         *outputs "D" onto console
00001BE8  103C 000E               1247      MOVE.B  #14,D0
00001BEC  4E4F                    1248      TRAP    #15
00001BEE                          1249  
00001BEE  1203                    1250      MOVE.B  D3,D1               *outputs the register, whatever the numeric value is
00001BF0  103C 0003               1251      MOVE.B  #3,D0
00001BF4  4E4F                    1252      TRAP    #15
00001BF6                          1253      
00001BF6  4E75                    1254      RTS                         *wooo~
00001BF8                          1255    
00001BF8                          1256  AnMode                          *Mode is an Address Register?
00001BF8  B43C 0001               1257      CMP.B   #1,D2
00001BFC  6600 0018               1258      BNE     deRefAnMode
00001C00                          1259      
00001C00  43F9 00001DD5           1260      LEA     outputAn,A1         *Outputs "A" onto console
00001C06  103C 000E               1261      MOVE.B  #14,D0
00001C0A  4E4F                    1262      TRAP    #15
00001C0C                          1263      
00001C0C  1203                    1264      MOVE.B  D3,D1               *Outputs the register value
00001C0E  103C 0003               1265      MOVE.B  #3,D0
00001C12  4E4F                    1266      TRAP    #15
00001C14                          1267      
00001C14  4E75                    1268      RTS                         *psssh
00001C16                          1269      
00001C16                          1270  deRefAnMode                     *Mode is a (A0)?
00001C16  B43C 0002               1271      CMP.B   #2,D2               
00001C1A  6600 0024               1272      BNE     immediateData
00001C1E                          1273      
00001C1E  43F9 00001DD0           1274      LEA     outputdeRefAn1,A1   *Outputs "(A" onto console
00001C24  103C 000E               1275      MOVE.B  #14,D0
00001C28  4E4F                    1276      TRAP    #15
00001C2A                          1277      
00001C2A  1203                    1278      MOVE.B  D3,D1               *outputs register value
00001C2C  103C 0003               1279      MOVE.B  #3,D0
00001C30  4E4F                    1280      TRAP    #15
00001C32                          1281      
00001C32  43F9 00001DD3           1282      LEA     outputdeRefAn2,A1   *makes it pretty by outputting ")"
00001C38  103C 000E               1283      MOVE.B  #14,D0
00001C3C  4E4F                    1284      TRAP    #15
00001C3E                          1285      
00001C3E  4E75                    1286      RTS                         *=-=
00001C40                          1287      
00001C40                          1288  immediateData                   *Mode is an #<data>
00001C40  B43C 0007               1289      CMP.B   #7,D2               *Mode for #<data> is 111
00001C44  6600 00AE               1290      BNE     DONE                
00001C48                          1291      
00001C48  B63C 0004               1292      CMP.B   #4,D3               *Register for #<data> is 100
00001C4C  6600 00A6               1293      BNE     DONE
00001C50                          1294                                 
00001C50  43F9 00001DD9           1295      LEA     outputPound,A1      *Outputs "#"
00001C56  103C 000E               1296      MOVE.B  #14,D0
00001C5A  4E4F                    1297      TRAP    #15   
00001C5C                          1298      
00001C5C  BE3C 0001               1299      CMP.B   #1,D7
00001C60  6700 0008               1300      BEQ     immeDataLong
00001C64                          1301      
00001C64  361D                    1302      MOVE.W  (A5)+,D3
00001C66                          1303      
00001C66  6000 0004               1304      BRA     immediateDatapt2
00001C6A                          1305  
00001C6A                          1306  immeDataLong
00001C6A  261D                    1307      MOVE.L  (A5)+,D3    
00001C6C                          1308      
00001C6C                          1309      
00001C6C                          1310  immediateDatapt2               *Outputs register value
00001C6C  2203                    1311      MOVE.L  D3,D1
00001C6E  103C 0003               1312      MOVE.B  #3,D0
00001C72  4E4F                    1313      TRAP    #15
00001C74                          1314  
00001C74  4E75                    1315      RTS                         *~owo~
00001C76                          1316      
00001C76                          1317  
00001C76                          1318  addDestinationEA                *Since ADD only has data register in dest area
00001C76  3604                    1319      MOVE.W  D4,D3
00001C78                          1320      
00001C78  3403                    1321      MOVE.W  D3,D2
00001C7A                          1322      
00001C7A  720A                    1323      MOVE.L  #10,D1
00001C7C  E37A                    1324      ROL.W   D1,D2
00001C7E  C4BC 00000007           1325      AND.L   #$00000007,D2       *D2 has mode
00001C84                          1326      
00001C84                          1327      
00001C84  EF5B                    1328      ROL.W   #7,D3
00001C86  C6BC 00000007           1329      AND.L   #$00000007,D3       *D3 has register
00001C8C                          1330      
00001C8C                          1331  DnRegister                      *For ADD only, since it only has Dn 
00001C8C  43F9 00001DD7           1332      LEA     outputDn,A1         *outputs "D"
00001C92  103C 000E               1333      MOVE.B  #14,D0
00001C96  4E4F                    1334      TRAP    #15
00001C98                          1335      
00001C98  1203                    1336      MOVE.B  D3,D1               *Outputs register value
00001C9A  103C 0003               1337      MOVE.B  #3,D0
00001C9E  4E4F                    1338      TRAP    #15
00001CA0                          1339      
00001CA0  4E75                    1340      RTS
00001CA2                          1341  
00001CA2                          1342  moveDestinationEA               *Destination output for MOVE
00001CA2  3604                    1343      MOVE.W  D4,D3
00001CA4  3403                    1344      MOVE.W  D3,D2
00001CA6                          1345      
00001CA6  EF5B                    1346      ROL.W   #7,D3
00001CA8  C6BC 00000007           1347      AND.L   #$00000007,D3       *D3 has Register
00001CAE                          1348      
00001CAE  323C 000A               1349      MOVE.W  #10,D1      
00001CB2  E37A                    1350      ROL.W   D1,D2               *D2 has Mode
00001CB4  C4BC 00000007           1351      AND.L   #$00000007,D2
00001CBA                          1352      
00001CBA  6000 FF1C               1353      BRA     DnMode              *output what it is, bra
00001CBE                          1354      
00001CBE                          1355  addaDestEA                      *Sets up the dest mode to be proper
00001CBE  3604                    1356      MOVE.W  D4,D3               *Get the original code again
00001CC0  3403                    1357      MOVE.W  D3,D2
00001CC2                          1358      
00001CC2  EF5B                    1359      ROL.W   #7,D3               
00001CC4  C6BC 00000007           1360      AND.L   #$00000007,D3       *D3 has register
00001CCA                          1361      
00001CCA  323C 000A               1362      MOVE.W  #10,D1
00001CCE  E37A                    1363      ROL.W   D1,D2               *Have to AND it by 1, since the mode for ADDA
00001CD0  C4BC 00000001           1364      AND.L   #$00000001,D2       *is always an Address
00001CD6                          1365      
00001CD6  6000 FF00               1366      BRA     DnMode
00001CDA                          1367      
00001CDA                          1368  pageContinue
00001CDA  43F9 00001E1A           1369      LEA     outputContinue,A1
00001CE0  103C 000E               1370      MOVE.B  #14,D0
00001CE4  4E4F                    1371      TRAP    #15
00001CE6  103C 0005               1372      MOVE.B  #5,D0
00001CEA  4E4F                    1373      TRAP    #15
00001CEC  16BC 001E               1374      MOVE.B  #line_count,(A3)
00001CF0  4EF8 115C               1375      JMP     getOpCode
00001CF4                          1376      
00001CF4                          1377  DONE
00001CF4  BCCD                    1378      CMP.W   A5,A6
00001CF6  6D00 0012               1379      BLT     END   
00001CFA  43F9 00001DE2           1380      LEA     outputNextLine,A1
00001D00  103C 000E               1381      MOVE.B  #14,D0
00001D04  4E4F                    1382      TRAP    #15 
00001D06  4EF8 115C               1383      JMP     getOpCode
00001D0A                          1384      
00001D0A                          1385  END
00001D0A  43F9 00001DE2           1386      LEA     outputNextLine,A1
00001D10  103C 000E               1387      MOVE.B  #14,D0
00001D14  4E4F                    1388      TRAP    #15
00001D16                          1389  
00001D16  43F9 00001E05           1390      LEA     outputEnd,A1
00001D1C  103C 000E               1391      MOVE.B  #14,D0
00001D20  4E4F                    1392      TRAP    #15
00001D22  FFFF FFFF               1393      SIMHALT             ; halt simulator
00001D26                          1394  
00001D26                          1395  * Put variables and constants here
00001D26                          1396  
00001D26= 43D2                    1397  code        DC.W    $43D2
00001D28                          1398  
00001D28                          1399  
00001D28= D640                    1400  addCode     DC.W    $D640
00001D2A                          1401  
00001D2A= 303C                    1402  moveCode1   DC.W    $303C
00001D2C= 0011                    1403  moveCode2   DC.W    $0011
00001D2E                          1404  
00001D2E= 41 44 44 00             1405  outputADD   DC.B    'ADD',0
00001D32= 41 00                   1406  outputADDA  DC.B    'A',0
00001D34= 53 55 42 00             1407  outputSUB   DC.B    'SUB',0
00001D38= 53 55 42 51 00          1408  outputSUBQ  DC.B    'SUBQ',0
00001D3D= 4D 4F 56 45 00          1409  outputMOVE  DC.B    'MOVE',0
00001D42= 4D 4F 56 45 41 00       1410  outputMOVEA DC.B    'MOVEA',0
00001D48= 4D 4F 56 45 4D 2E ...   1411  outputMOVEMW DC.B   'MOVEM.W',0
00001D50= 4D 4F 56 45 4D 2E ...   1412  outputMOVEML DC.B   'MOVEM.L',0
00001D58= 4D 55 4C 53 20 00       1413  outputMULS DC.B     'MULS ',0
00001D5E= 44 49 56 53 2E 57 ...   1414  outputDIVSW DC.B    'DIVS.W ',0
00001D66= 4E 4F 50 20 00          1415  outputNOP   DC.B    'NOP ',0
00001D6B= 4A 53 52 20 00          1416  outputJSR   DC.B    'JSR ',0
00001D70= 52 54 53 20 00          1417  outputRTS   DC.B    'RTS ',0
00001D75= 4C 45 41 20 00          1418  outputLEA   DC.B    'LEA ',0
00001D7A= 44 41 54 41 20 00       1419  outputData  DC.B    'DATA ',0
00001D80= 4E 45 47 00             1420  outputNEG   DC.B    'NEG',0
00001D84= 42 52 41 20 00          1421  outputBRA   DC.B    'BRA ',0
00001D89= 4F 52 49 00             1422  outputORI   DC.B    'ORI',0
00001D8D= 4F 52 00                1423  outputOR    DC.B    'OR',0
00001D90= 45 4F 52 00             1424  outputEOR   DC.B    'EOR',0
00001D94= 43 4D 50 49 00          1425  outputCMPI  DC.B    'CMPI',0
00001D99= 43 4D 50 00             1426  outputCMP   DC.B    'CMP',0
00001D9D= 42 43 4C 52 20 00       1427  outputBCLR  DC.B    'BCLR ',0
00001DA3= 4C 53 00                1428  outputLS    DC.B    'LS',0
00001DA6= 41 53 00                1429  outputAS    DC.B    'AS',0
00001DA9= 52 4F 00                1430  outputRO    DC.B    'RO',0
00001DAC= 4C 00                   1431  outputLeft  DC.B    'L',0
00001DAE= 52 00                   1432  outputRight DC.B    'R',0
00001DB0                          1433  
00001DB0= 42 43 53 20 00          1434  outputBCS   DC.B    'BCS ',0
00001DB5= 42 47 45 20 00          1435  outputBGE   DC.B    'BGE ',0
00001DBA= 42 43 54 20 00          1436  outputBCT   DC.B    'BCT ',0
00001DBF= 42 56 43 20 00          1437  outputBVC   DC.B    'BVC ',0
00001DC4                          1438  
00001DC4= 2E 42 20 00             1439  outputByte  DC.B    '.B ',0
00001DC8= 2E 57 20 00             1440  outputWord  DC.B    '.W ',0
00001DCC= 2E 4C 20 00             1441  outputLong  DC.B    '.L ',0
00001DD0                          1442  
00001DD0= 28 41 00                1443  outputdeRefAn1   DC.B    '(A',0
00001DD3= 29 00                   1444  outputdeRefAn2   DC.B    ')',0
00001DD5                          1445  
00001DD5= 41 00                   1446  outputAn    DC.B    'A',0
00001DD7= 44 00                   1447  outputDn    DC.B    'D',0
00001DD9= 23 00                   1448  outputPound DC.B    '#',0
00001DDC= 0000                    1449  outputCurrentAddr   DC.W    $0000
00001DDE                          1450  
00001DDE= 2C 00                   1451  outputComma     DC.B    ',',0
00001DE0= 2E 00                   1452  outputDot       DC.B    '.',0
00001DE2= 20 0D 0A 00             1453  outputNextLine  DC.B    ' ',CR,LF,0
00001DE6= 20 00                   1454  outputSpace     DC.B    ' ',0
00001DE8= 3A 20 00                1455  outputColon     DC.B    ': ',0
00001DEB= 2D 00                   1456  outputNegSign   DC.B    '-',0
00001DED= 44 69 73 61 73 73 ...   1457  outputStart     DC.B    'Disassembling Initiated',0
00001E05= 50 72 6F 67 72 61 ...   1458  outputEnd       DC.B    'Program Disassembled',0
00001E1A= 50 72 65 73 73 20 ...   1459  outputContinue  DC.B    'Press ENTER key to continue disassembling',CR,LF,0
00001E46                          1460      END    $1000        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADDADESTEA          1CBE
ADDALOPMODE         1B6A
ADDAORDER           1AFA
ADDAWOPMODE         1B4C
ADDCODE             1D28
ADDDESTINATIONEA    1C76
ADDMETHOD           14E8
ADDOPCODE           14E0
ADDR_VAL_TEMP       1150
ALTOPMODE           1B30
ALTORDER            1ADE
ANMODE              1BF8
ASCII_MASK          FF
ASDOPCODE           1750
BCCDISPLACEMENT     190E
BCCMETHOD           1A5C
BCCOPCODE           1A54
BCLRIMMEDIATE       13C2
BCLROPCODE          137A
BCS                 1A80
BCT                 1AA0
BGE                 1A90
BITDISPLACEMENT16   1962
BITDISPLACEMENT32   19D8
BRAMETHOD           1902
BRAOPCODE           18F6
BVC                 1AB0
BYTEOPMODE          1B8A
CMPIMETHOD          1348
CMPIOPCODE          1340
CMPOPCODE           16CC
CODE                1D26
COUNTER             0
CR                  D
DATAOPCODE          1AC0
DEREFANMODE         1C16
DISPLAY8FORSUBQ     15DA
DIVSWCHECK          1646
DIVSWOPCODE         1646
DNMODE              1BD8
DNREGISTER          1C8C
DONE                1CF4
DOTOPMODE           1B16
END                 1D0A
END_ADDR_MSG        111F
END_VAL             1158
EORMETHOD           1696
EOROPCODE           1684
GETOPCODE           115C
GET_ADDR            108C
IMMEDATALONG        1C6A
IMMEDIATEDATA       1C40
IMMEDIATEDATAPT2    1C6C
JSRMETHOD           11DE
JSROPCODE           11CE
JSROUTPUTDEREF      11FA
JSROUTPUTLABEL      1210
LEAOPCODE           128A
LEAOUTPUT           12CA
LEFTRIGHT           17C8
LF                  A
LINE_COUNT          1E
LONGOPMODE          1BB6
LOOP                10A8
LSDMETHOD           171C
LSDOPCODE           1714
MASK                F
MOVEALONGMETHOD     14A6
MOVEAWORDMETHOD     1446
MOVEBYTEMETHOD      13EA
MOVEBYTEOPCODE      13E2
MOVECODE1           1D2A
MOVECODE2           1D2C
MOVEDESTINATIONEA   1CA2
MOVELONGMETHODPT2   14B6
MOVELONGOPCODE      147E
MOVELONGOPCODEMETHOD  1486
MOVEMLMETHODMEMTOREG  127A
MOVEMLMETHODREGTOMEM  126A
MOVEMOPCODE         1222
MOVEMWMETHODMEMTOREG  125A
MOVEMWMETHODREGTOMEM  124A
MOVEWORDMETHOD      1426
MOVEWORDMETHODPT2   1456
MOVEWORDOPCODE      141E
MULSLMETHOD         18BE
MULSLOPCODE         18BE
MULSOUTPUT          1896
MULSWMETHOD         1886
MULSWOPCODE         186E
NEGBIT16            199E
NEGBIT32            1A18
NEGMETHOD           18CA
NEGOPCODE           18BE
NOPOPCODE           119E
ORIMETHOD           1306
ORIOPCODE           12F2
ORMETHOD            1610
OROPCODE            15F4
OUTPUTADD           1D2E
OUTPUTADDA          1D32
OUTPUTAN            1DD5
OUTPUTAS            1DA6
OUTPUTBCLR          1D9D
OUTPUTBCS           1DB0
OUTPUTBCT           1DBA
OUTPUTBGE           1DB5
OUTPUTBRA           1D84
OUTPUTBVC           1DBF
OUTPUTBYTE          1DC4
OUTPUTCMP           1D99
OUTPUTCMPI          1D94
OUTPUTCOLON         1DE8
OUTPUTCOMMA         1DDE
OUTPUTCONTINUE      1E1A
OUTPUTCURRENTADDR   1DDC
OUTPUTDATA          1D7A
OUTPUTDEREFAN1      1DD0
OUTPUTDEREFAN2      1DD3
OUTPUTDIVSW         1D5E
OUTPUTDN            1DD7
OUTPUTDOT           1DE0
OUTPUTEND           1E05
OUTPUTEOR           1D90
OUTPUTJSR           1D6B
OUTPUTLEA           1D75
OUTPUTLEFT          1DAC
OUTPUTLONG          1DCC
OUTPUTLS            1DA3
OUTPUTMOVE          1D3D
OUTPUTMOVEA         1D42
OUTPUTMOVEML        1D50
OUTPUTMOVEMW        1D48
OUTPUTMULS          1D58
OUTPUTNEG           1D80
OUTPUTNEGSIGN       1DEB
OUTPUTNEXTLINE      1DE2
OUTPUTNOP           1D66
OUTPUTOR            1D8D
OUTPUTORI           1D89
OUTPUTPOUND         1DD9
OUTPUTRIGHT         1DAE
OUTPUTRO            1DA9
OUTPUTRTS           1D70
OUTPUTSPACE         1DE6
OUTPUTSTART         1DED
OUTPUTSUB           1D34
OUTPUTSUBQ          1D38
OUTPUTWORD          1DC8
PAGECONTINUE        1CDA
RET_SA              10F2
RIGHTRIGHT          17E8
RODOPCODE           178C
RTSOPCODE           11B6
RTS_STRTADDR        10C6
SHIFTDESTEA         1850
SHIFTIMMEDIATEEA    1828
SHIFTIMMEDIATEEIGHT  1846
SHIFTSOPCODE        1702
SHIFTSOURCEEA       17F6
SOURCEEA            1BC6
STACK               B000
START_ADDR_MSG      10F4
STRIP_ASCII         10CE
ST_VAL              1154
SUB30               10EE
SUB37               10E6
SUBMETHOD           152E
SUBOPCODE           1526
SUBQDATA            15A8
SUBQMETHOD          156C
SUBQOPCODE          1564
WORDOPMODE          1BA0
