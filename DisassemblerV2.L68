00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.02
Created On: 6/5/2015 1:39:29 AM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      :  Disassembler
00000000                             3  * Written by :  Paul Kessler and Joscelyn Kim
00000000                             4  * Date       :  199X
00000000                             5  * Description:  This program takes assembled code and disassembles it into 
00000000                             6  *               assembly language readable by humans.  The program will be 
00000000                             7  *               disassembed in a user defined address range
00000000                             8  *-----------------------------------------------------------
00000000  =0000000D                  9  CR          EQU $0D
00000000  =0000000A                 10  LF          EQU $0A
00000000                            11  
00000000  =0000000F                 12  mask        EQU $0000000F
00000000  =000000FF                 13  ascii_mask  EQU $00FF
00000000  =00000000                 14  counter     EQU 0
00000000  =0000B000                 15  stack       EQU $B000
00000000  =0000001E                 16  line_count  EQU 30
00000000                            17  
00000000                            18  *---- User input address range -----
00000000                            19  
00001000                            20                  ORG         $1000                       * start of the program
00001000  4FF9 0000B000             21                  LEA         stack,SP                    * initialize the stack
00001006  4200                      22                  CLR.B       D0                          * clear D0
00001008  43F9 000010F4             23                  LEA         start_addr_msg, A1          * ask for starting address
0000100E  103C 000E                 24                  MOVE.B      #14, D0
00001012  4E4F                      25                  TRAP        #15                         
00001014  103C 0002                 26                  MOVE.B      #2, D0                      * take in user input as string
00001018  4E4F                      27                  TRAP        #15
0000101A  48A7 FFFE                 28                  MOVEM.W     A0-A6/D0-D7,-(SP)           * push registers on the stack
0000101E  4EB9 0000108C             29                  JSR         get_addr                    * strip ascii characters to hex
00001024  4C9F 7FFF                 30                  MOVEM.W     (SP)+, A0-A6/D0-D7          * restore registers
00001028  23F9 00001150 00001154    31                  MOVE.L      addr_val_temp,st_val
00001032                            32                  
00001032  43F9 0000111F             33                  LEA         end_addr_msg, A1            * ask for ending address
00001038  103C 000E                 34                  MOVE.B      #14, D0
0000103C  4E4F                      35                  TRAP        #15
0000103E  224C                      36                  MOVEA.L     A4,A1                       * reset address at A1 to get user input
00001040  103C 0002                 37                  MOVE.B      #2, D0                      * take address as a string
00001044  4E4F                      38                  TRAP        #15
00001046  48A7 FFFE                 39                  MOVEM.W     A0-A6/D0-D7,-(SP)           * push registers on the stack
0000104A  4EB9 0000108C             40                  JSR         get_addr                    * strip ascii address into hex
00001050  4C9F 7FFF                 41                  MOVEM.W     (SP)+, A0-A6/D0-D7          * restore the registers
00001054  23F9 00001150 00001158    42                  MOVE.L      addr_val_temp, end_val      * store address in end_val
0000105E  2A79 00001154             43                  MOVEA.L     st_val,A5                   * store start val in A5
00001064  2C79 00001158             44                  MOVEA.L     end_val,A6                  * store end val in A6
0000106A                            45                  
0000106A  43F9 00001D89             46                  LEA         outputStart,A1              *ouput starting messaage
00001070  103C 000E                 47                  MOVE.B      #14,D0          
00001074  4E4F                      48                  TRAP        #15
00001076                            49                  
00001076  43F9 00001D7E             50                  LEA         outputNextLine,A1           *output nextline
0000107C  103C 000E                 51                  MOVE.B      #14,D0
00001080  4E4F                      52                  TRAP        #15
00001082                            53                  
00001082  16BC 001E                 54                  MOVE.B      #line_count,(A3)
00001086  5513                      55                  SUBQ.B      #2,(A3)
00001088  6000 00D2                 56                  BRA         getOpCode                   * Jump to getOpCode sub routine
0000108C                            57  
0000108C                            58                  
0000108C                            59  
0000108C                            60  get_addr 
0000108C  5301                      61                  SUBQ.B      #1,D1
0000108E  4287                      62                  CLR.L       D7                          * we need D7 to be 0
00001090  1019                      63                  MOVE.B      (A1)+,D0                    * store first byte in D0
00001092  0280 000000FF             64                  ANDI.L      #ascii_mask,D0              * mask the first byte
00001098  4EB9 000010CE             65                  JSR         strip_ascii                 * strip ascii char into hex
0000109E  C3FC 0004                 66                  MULS.W      #4,D1
000010A2  E3A0                      67                  ASL.L       D1,D0                       * shift left 8
000010A4  8E80                      68                  OR.L        D0,D7
000010A6  1019                      69                  MOVE.B      (A1)+,D0                    * move next byte into D0
000010A8  5901                      70  loop            SUBQ.B      #4,D1
000010AA  0280 000000FF             71                  ANDI.L      #ascii_mask,D0              * mask the second byte
000010B0  4EB9 000010CE             72                  JSR         strip_ascii                 * strip ascii to hex
000010B6  E3A0                      73                  ASL.L       D1,D0                       * shift left 8
000010B8  8E80                      74                  OR.L        D0,D7
000010BA  B23C 0000                 75                  CMP.B       #0,D1
000010BE  6700 0006                 76                  BEQ         rts_strtAddr
000010C2  1019                      77                  MOVE.B      (A1)+,D0
000010C4  60E2                      78                  BRA         loop
000010C6                            79                  
000010C6                            80  rts_strtAddr
000010C6  23C7 00001150             81                  MOVE.L      D7,addr_val_temp
000010CC  4E75                      82                  RTS     
000010CE                            83                  
000010CE  B03C 0039                 84  strip_ascii     CMP.B       #$39,D0                     *Is it in range of 0-9?
000010D2  6F00 001A                 85                  BLE         sub30                       *It's a number
000010D6  B03C 0046                 86                  CMP.B       #$46,D0                     *Is it A...F?
000010DA  6F00 000A                 87                  BLE         sub37                       *It's A...F
000010DE  0400 0057                 88                  SUB.B       #$57,D0                     *It's a...f
000010E2  6000 000E                 89                  BRA         ret_sa                      *Go back
000010E6  0400 0037                 90  sub37           SUB.B       #$37,D0                     *Strip 37
000010EA  6000 0006                 91                  BRA         ret_sa                      *Go back
000010EE  0400 0030                 92  sub30           SUB.B       #$30,D0                     *Strip 30
000010F2  4E75                      93  ret_sa          RTS                                     *Go back
000010F4                            94  
000010F4                            95                  
000010F4                            96  *---- Data ----
000010F4                            97  
000010F4= 45 6E 74 65 72 20 ...     98  start_addr_msg  DC.B    'Enter a starting address to disassemble: $', 0
0000111F= 45 6E 74 65 72 20 ...     99  end_addr_msg    DC.B    'Enter a ending address to stop disassembling: $', 0
00001150= 00000000                 100  addr_val_temp   DC.L    $00000000
00001154= 00000000                 101  st_val          DC.L    $00000000
00001158= 00000000                 102  end_val         DC.L    $00000000
0000115C                           103  
0000115C                           104  *--- Data end ----
0000115C                           105  
0000115C                           106  
0000115C                           107  * Disassembler Start
0000115C                           108  getOpCode                        *Gets opcode
0000115C                           109      *LEA     code,A0             *Loads "code" which is the op code
0000115C                           110      
0000115C  4287                     111      CLR.L   D7
0000115E  4286                     112      CLR.L   D6
00001160  4283                     113      CLR.L   D3
00001162  4281                     114      CLR.L   D1
00001164  4280                     115      CLR.L   D0
00001166  4285                     116      CLR.L   D5
00001168  4284                     117      CLR.L   D4
0000116A                           118      
0000116A  5313                     119      SUBQ.B  #1,(A3)
0000116C  0C13 0000                120      CMP.B   #0,(A3)
00001170  6700 0B14                121      BEQ     pageContinue
00001174                           122      
00001174  320D                     123      MOVE.W  A5,D1               *move starting addr into D1
00001176  103C 000F                124      MOVE.B  #15,D0              *convert number into hex and output to console
0000117A  143C 0010                125      MOVE.B  #16,D2
0000117E  4E4F                     126      TRAP    #15    
00001180  381D                     127      MOVE.W  (A5)+,D4            *move data at starting addr to D4
00001182                           128      
00001182  4281                     129      CLR.L   D1
00001184                           130      
00001184  43F9 00001D84            131      LEA     outputColon,A1      *output the colon and a space to the console
0000118A  103C 000E                132      MOVE.B  #14,D0
0000118E  4E4F                     133      TRAP    #15
00001190                           134      
00001190  2248                     135      MOVEA.L A0,A1               *used to clear A0
00001192  3404                     136      MOVE.W  D4,D2               *gets put into D4 and D2
00001194                           137      
00001194  E95A                     138      ROL.W   #4,D2               *rotate the first 4 significant bits to lower 4 bits
00001196                           139      
00001196  C4BC 0000000F            140      AND.L   #mask,D2            *mask it to get only the first byte
0000119C                           141      
0000119C  1A02                     142      MOVE.B  D2,D5               *put that value into D5
0000119E                           143  
0000119E                           144  nopOpCode
0000119E  B87C 4E71                145      CMP.W   #$4E71,D4
000011A2  6600 0012                146      BNE     rtsOpCode
000011A6                           147      
000011A6  43F9 00001D02            148      LEA     outputNOP,A1
000011AC  103C 000E                149      MOVE.B  #14,D0
000011B0  4E4F                     150      TRAP    #15
000011B2  6000 0AEC                151      BRA     DONE
000011B6                           152      
000011B6                           153  rtsOpCode
000011B6  B87C 4E75                154      CMP.W   #$4E75,D4
000011BA  6600 0012                155      BNE     jsrOpCode
000011BE                           156      
000011BE  43F9 00001D0C            157      LEA     outputRTS,A1
000011C4  103C 000E                158      MOVE.B  #14,D0
000011C8  4E4F                     159      TRAP    #15
000011CA                           160      
000011CA  6000 0AD4                161      BRA     DONE
000011CE                           162      
000011CE                           163  jsrOpCode
000011CE  3604                     164      MOVE.W  D4,D3
000011D0  E15B                     165      ROL.W   #8,D3
000011D2  C67C 00FF                166      AND.W   #$00FF,D3
000011D6  B63C 004E                167      CMP.B   #$4E,D3
000011DA  6600 0046                168      BNE     leaOpCode
000011DE                           169      
000011DE                           170  jsrMethod
000011DE  3604                     171      MOVE.W  D4,D3
000011E0  E75B                     172      ROL.W   #3,D3
000011E2  C63C 0007                173      AND.B   #7,D3
000011E6  B63C 0002                174      CMP.B   #2,D3
000011EA  6700 000E                175      BEQ     jsrOutputDeref
000011EE                           176      
000011EE  B63C 0007                177      CMP.B   #7,D3
000011F2  6700 001C                178      BEQ     jsrOutputLabel
000011F6                           179      
000011F6  6000 0B1E                180      BRA     outputData
000011FA                           181          
000011FA                           182  jsrOutputDeref
000011FA  43F9 00001D07            183      LEA     outputJSR,A1
00001200  103C 000E                184      MOVE.B  #14,D0
00001204  4E4F                     185      TRAP    #15
00001206                           186      
00001206  4EB9 00001B72            187      JSR     sourceEA
0000120C                           188      
0000120C  6000 0A92                189      BRA     DONE
00001210                           190      
00001210                           191  jsrOutputLabel
00001210                           192  
00001210  B63C 0001                193      CMP.B   #1,D3
00001214  6E00 0856                194      BGT     dataOpCode
00001218  4EB9 00001B72            195      JSR     sourceEA
0000121E                           196      
0000121E  6000 0A80                197      BRA     DONE
00001222                           198      
00001222                           199  leaOpCode
00001222  BA3C 0004                200      CMP.B   #4,D5
00001226  6600 0062                201      BNE     oriOpCode
0000122A  3604                     202      MOVE.W  D4,D3
0000122C  E15B                     203      ROL.W   #8,D3
0000122E  B63C 0044                204      CMP.B   #$44,D3
00001232  6700 0642                205      BEQ     negMethod
00001236  E05B                     206      ROR.W   #8,D3
00001238  EE5B                     207      ROR.W   #7,D3
0000123A  C63C 0007                208      AND.B   #7,D3
0000123E  B63C 0007                209      CMP.B   #7,D3
00001242  6600 0828                210      BNE     dataOpCode
00001246                           211      
00001246  3604                     212      MOVE.W  D4,D3
00001248  E65B                     213      ROR.W   #3,D3
0000124A  C63C 0007                214      AND.B   #7,D3
0000124E  B63C 0002                215      CMP.B   #2,D3
00001252  6700 000E                216      BEQ     leaOutput
00001256                           217      
00001256  B63C 0007                218      CMP.B   #7,D3
0000125A  6700 0006                219      BEQ     leaOutput
0000125E                           220      
0000125E  6000 080C                221      BRA     dataOpCode
00001262                           222      
00001262                           223  leaOutput    
00001262  43F9 00001D11            224      LEA     outputLEA,A1
00001268  103C 000E                225      MOVE.B  #14,D0
0000126C  4E4F                     226      TRAP    #15
0000126E                           227      
0000126E  4EB9 00001B72            228      JSR     sourceEA
00001274                           229      
00001274  43F9 00001D7A            230      LEA     outputComma,A1
0000127A  103C 000E                231      MOVE.B  #14,D0
0000127E  4E4F                     232      TRAP    #15
00001280                           233      
00001280  4EB9 00001C6A            234      JSR     addaDestEA
00001286                           235      
00001286  6000 0A18                236      BRA     DONE
0000128A                           237      
0000128A                           238  oriOpCode                       *OR opcode
0000128A  BA3C 0000                239      CMP.B   #0,D5               
0000128E  6600 00EA                240      BNE     moveByteOpCode      *if not, go to next opcode
00001292                           241  
00001292                           242  *-------------------------------------------------Change this when merging         
00001292  3404                     243      MOVE.W  D4,D2
00001294  E15A                     244      ROL.W   #8,D2
00001296  C4BC 0000000F            245      AND.L   #$0000000F,D2
0000129C                           246      
0000129C  2A02                     247      MOVE.L  D2,D5
0000129E                           248      
0000129E                           249  oriMethod
0000129E  BA3C 0000                250      CMP.B   #0,D5
000012A2  6600 0034                251      BNE     cmpiOpCode
000012A6                           252      
000012A6  43F9 00001D25            253      LEA     outputORI,A1
000012AC  103C 000E                254      MOVE.B  #14,D0
000012B0  4E4F                     255      TRAP    #15
000012B2                           256      
000012B2  4EB9 00001AC2            257      JSR     dotOpMode
000012B8                           258          
000012B8  7407                     259      MOVE.L  #7,D2
000012BA  7604                     260      MOVE.L  #4,D3
000012BC  4EB9 00001BEC            261      JSR     immediateData
000012C2                           262      
000012C2  43F9 00001D7A            263      LEA     outputComma,A1
000012C8  103C 000E                264      MOVE.B  #14,D0
000012CC  4E4F                     265      TRAP    #15
000012CE                           266      
000012CE  4EB9 00001B72            267      JSR     sourceEA
000012D4  6000 09CA                268      BRA     DONE
000012D8                           269  
000012D8                           270  cmpiOpCode
000012D8  BA3C 000C                271      CMP.B   #12,D5
000012DC  6600 0034                272      BNE     bclrOpCode
000012E0                           273      
000012E0                           274  cmpiMethod
000012E0  43F9 00001D30            275      LEA     outputCMPI,A1
000012E6  103C 000E                276      MOVE.B  #14,D0
000012EA  4E4F                     277      TRAP    #15
000012EC                           278      
000012EC  4EB9 00001AC2            279      JSR     dotOpMode
000012F2                           280      
000012F2  7407                     281      MOVE.L  #7,D2
000012F4  7604                     282      MOVE.L  #4,D3
000012F6  4EB9 00001BEC            283      JSR     immediateData
000012FC                           284      
000012FC  43F9 00001D7A            285      LEA     outputComma,A1
00001302  103C 000E                286      MOVE.B  #14,D0
00001306  4E4F                     287      TRAP    #15
00001308                           288      
00001308  4EB9 00001B72            289      JSR     sourceEA
0000130E  6000 0990                290      BRA     DONE
00001312                           291      
00001312                           292  bclrOpCode
00001312  43F9 00001D39            293      LEA     outputBCLR,A1
00001318  103C 000E                294      MOVE.B  #14,D0
0000131C  4E4F                     295      TRAP    #15
0000131E                           296      
0000131E  720A                     297      MOVE.L  #10,D1
00001320  2A04                     298      MOVE.L  D4,D5
00001322  E37D                     299      ROL.W   D1,D5
00001324  CABC 00000007            300      AND.L   #$00000007,D5
0000132A                           301      
0000132A  BA3C 0002                302      CMP.B   #2,D5
0000132E  6700 002A                303      BEQ     bclrImmediate
00001332                           304      
00001332  7400                     305      MOVE.L  #0,D2
00001334  2604                     306      MOVE.L  D4,D3
00001336  EF5B                     307      ROL.W   #7,D3
00001338  C6BC 00000007            308      AND.L   #$00000007,D3
0000133E                           309      
0000133E  4EB9 00001B84            310      JSR     DnMode
00001344                           311      
00001344  43F9 00001D7A            312      LEA     outputComma,A1
0000134A  103C 000E                313      MOVE.B  #14,D0
0000134E  4E4F                     314      TRAP    #15
00001350                           315      
00001350  4EB9 00001B72            316      JSR     sourceEA
00001356                           317      
00001356  6000 0948                318      BRA     DONE
0000135A                           319          
0000135A                           320  bclrImmediate
0000135A                           321      
0000135A  7407                     322      MOVE.L  #7,D2
0000135C  7604                     323      MOVE.L  #4,D3
0000135E                           324      
0000135E  4EB9 00001BEC            325      JSR     immediateData
00001364                           326      
00001364  43F9 00001D7A            327      LEA     outputComma,A1
0000136A  103C 000E                328      MOVE.B  #14,D0
0000136E  4E4F                     329      TRAP    #15
00001370                           330      
00001370  4EB9 00001B72            331      JSR     sourceEA
00001376                           332      
00001376  6000 0928                333      BRA     DONE    
0000137A                           334      
0000137A                           335  moveByteOpCode                  *MOVE.B opcode
0000137A  BA3C 0001                336      CMP.B   #1,D5
0000137E  6600 0036                337      BNE     moveWordOpCode 
00001382                           338  
00001382                           339  moveByteMethod                  *MOVE.B output
00001382  43F9 00001CE9            340      LEA     outputMOVE,A1       *Outputs "MOVE" onto console
00001388  103C 000E                341      MOVE.B  #14,D0
0000138C  4E4F                     342      TRAP    #15
0000138E                           343      
0000138E  43F9 00001D60            344      LEA     outputByte,A1       *Outputs ".B" onto console
00001394  103C 000E                345      MOVE.B  #14,D0
00001398  4E4F                     346      TRAP    #15
0000139A                           347      
0000139A  4EB9 00001B72            348      JSR     sourceEA            *Jump to subroutine sourceEA
000013A0                           349      
000013A0  43F9 00001D7A            350      LEA     outputComma,A1      *Outputs a comma onto console
000013A6  103C 000E                351      MOVE.B  #14,D0
000013AA  4E4F                     352      TRAP    #15
000013AC                           353      
000013AC  4EB9 00001C4E            354      JSR     moveDestinationEA   *Jump to subroutine moveDestinationEA
000013B2                           355      
000013B2  6000 08EC                356      BRA     DONE                *Yay done
000013B6                           357      
000013B6                           358  
000013B6                           359  moveWordOpCode                  *MOVE.W opcode
000013B6  BA3C 0003                360      CMP.B   #3,D5
000013BA  6600 005A                361      BNE     moveLongOpCode
000013BE                           362     
000013BE                           363  moveWordMethod                  *MOVE.W output
000013BE  3404                     364      MOVE.W  D4,D2               *D4 has the original word
000013C0  323C 000A                365      MOVE.W  #10,D1              *Move the value 10 into D1 since ROL has issues with
000013C4  E37A                     366      ROL.W   D1,D2               *   immediate values > 8
000013C6                           367      
000013C6  B47C 0001                368      CMP.W   #1,D2               *If the rotated value is a 1, it's a MOVEA.W
000013CA  6700 0012                369      BEQ     moveAWordMethod    
000013CE                           370      
000013CE  43F9 00001CE9            371      LEA     outputMOVE,A1       *Outputs "MOVE." onto console
000013D4  103C 000E                372      MOVE.B  #14,D0
000013D8  4E4F                     373      TRAP    #15
000013DA  6000 0012                374      BRA     moveWordMethodpt2   *Go to the rest of the method~
000013DE                           375      
000013DE                           376  moveAWordMethod                 *MOVEA.W opcode
000013DE  43F9 00001CEE            377      LEA     outputMOVEA,A1      *Outputs "MOVEA" onto console
000013E4  103C 000E                378      MOVE.B  #14,D0
000013E8  4E4F                     379      TRAP    #15
000013EA  6000 0002                380      BRA     moveWordMethodpt2   *Go to the rest of the method~
000013EE                           381      
000013EE                           382  moveWordMethodpt2               *Part 2 of the MOVE/MOVEA.W series
000013EE  43F9 00001D64            383      LEA     outputWord,A1       *Outputs ".W" onto console
000013F4  103C 000E                384      MOVE.B  #14,D0
000013F8  4E4F                     385      TRAP    #15
000013FA                           386      
000013FA  4EB9 00001B72            387      JSR     sourceEA            *Yay subroutines
00001400                           388      
00001400  43F9 00001D7A            389      LEA     outputComma,A1      *outputs a comma onto console
00001406  103C 000E                390      MOVE.B  #14,D0
0000140A  4E4F                     391      TRAP    #15
0000140C                           392      
0000140C  4EB9 00001C4E            393      JSR     moveDestinationEA   *Gotta check the destination~
00001412                           394  
00001412  6000 088C                395      BRA     DONE                *I'm done, bra
00001416                           396  
00001416                           397  moveLongOpCode                  *MOVE.L opcode
00001416  BA3C 0002                398      CMP.B   #2,D5
0000141A  6600 005C                399      BNE     addOpCode
0000141E                           400      
0000141E                           401  moveLongOpCodeMethod            *MOVE.L output
0000141E  340A                     402      MOVE.W  A2,D2               *Gotta check if it's actually a MOVEA
00001420  323C 000A                403      MOVE.W  #10,D1
00001424  E37A                     404      ROL.W   D1,D2
00001426                           405      
00001426  B47C 0001                406      CMP.W   #1,D2
0000142A  6700 0012                407      BEQ     moveALongMethod   
0000142E                           408  
0000142E  43F9 00001CE9            409      LEA     outputMOVE,A1       *outputs "MOVE" onto console
00001434  103C 000E                410      MOVE.B  #14,D0
00001438  4E4F                     411      TRAP    #15
0000143A                           412      
0000143A  6000 0012                413      BRA     moveLongMethodpt2   *Go to Part 2 of the MOVE series~
0000143E                           414      
0000143E                           415  moveALongMethod                 *MOVEA.L output
0000143E  43F9 00001CEE            416      LEA     outputMOVEA,A1      *Outputs "MOVEA" onto console
00001444  103C 000E                417      MOVE.B  #14,D0
00001448  4E4F                     418      TRAP    #15
0000144A  6000 0002                419      BRA     moveLongMethodpt2   *Go to part 2~
0000144E                           420      
0000144E                           421  moveLongMethodpt2               *Part 2, the sequel(SQL?)
0000144E                           422      
0000144E  43F9 00001D68            423      LEA     outputLong,A1       *Outputs ".L" onto console
00001454  103C 000E                424      MOVE.B  #14,D0
00001458  4E4F                     425      TRAP    #15
0000145A                           426      
0000145A  5207                     427      ADD.B   #1,D7
0000145C                           428      
0000145C  4EB9 00001B72            429      JSR     sourceEA            *Go output source
00001462                           430      
00001462  43F9 00001D7A            431      LEA     outputComma,A1      *Yay commas
00001468  103C 000E                432      MOVE.B  #14,D0
0000146C  4E4F                     433      TRAP    #15
0000146E                           434      
0000146E  4EB9 00001C4E            435      JSR     moveDestinationEA    *Output destination
00001474  6000 082A                436      BRA     DONE
00001478                           437  
00001478                           438  addOpCode                        *ADD opcode
00001478  BA3C 000D                439      CMP.B   #13,D5
0000147C  6600 0040                440      BNE     subOpCode    
00001480                           441      
00001480                           442  addMethod                        *ADD output
00001480  43F9 00001CDA            443      LEA     outputADD,A1         *Outputs "ADD" onto console
00001486  103C 000E                444      MOVE.B  #14,D0
0000148A  4E4F                     445      TRAP    #15
0000148C                           446      
0000148C  4EB9 00001AC2            447      JSR     dotOpMode           *Checks if it's a byte,word, or long
00001492                           448      
00001492  BC3C 0001                449      CMP.B   #1,D6               *If D6 == 1, the data register is the source
00001496  6700 05F2                450      BEQ     altOrder            *   D6 was decided in dotOpMode(?)
0000149A                           451      
0000149A  BC3C 0002                452      CMP.B   #2,D6
0000149E  6700 0606                453      BEQ     addaOrder           *go do ADDA stuff
000014A2                           454      
000014A2  4EB9 00001B72            455      JSR     sourceEA            *outputs what the source is
000014A8                           456      
000014A8  43F9 00001D7A            457      LEA     outputComma,A1      *Commas~~~
000014AE  103C 000E                458      MOVE.B  #14,D0
000014B2  4E4F                     459      TRAP    #15
000014B4                           460      
000014B4  4EB9 00001C22            461      JSR     addDestinationEA       *outputs what the destination is
000014BA                           462      
000014BA  6000 07E4                463      BRA     DONE
000014BE                           464      
000014BE                           465  subOpCode
000014BE  BA3C 0009                466      CMP.B   #9,D5               *is it SUB?
000014C2  6600 0038                467      BNE     subQOpCode          *not SUB, check if SUBQ
000014C6                           468  
000014C6                           469  subMethod
000014C6  43F9 00001CE0            470      LEA     outputSUB,A1        *output SUB to the console
000014CC  103C 000E                471      MOVE.B  #14,D0  
000014D0  4E4F                     472      TRAP    #15
000014D2                           473  
000014D2  4EB9 00001AC2            474      JSR     dotOpMode           *check if its a B,W, or L
000014D8                           475  
000014D8  BC3C 0001                476      CMP.B   #1,D6               *if D6 == 1, the data register is the source
000014DC  6700 05AC                477      BEQ     altOrder
000014E0                           478  
000014E0  4EB9 00001B72            479      JSR     sourceEA            *outputs what the source is
000014E6                           480  
000014E6  43F9 00001D7A            481      LEA     outputComma,A1      *commas
000014EC  103C 000E                482      MOVE.B  #14,D0
000014F0  4E4F                     483      TRAP    #15
000014F2                           484  
000014F2  4EB9 00001C22            485      JSR     addDestinationEA    *outputs what ths destination is
000014F8                           486  
000014F8  6000 07A6                487      BRA     DONE                
000014FC                           488  
000014FC                           489  subQOpCode
000014FC  BA3C 0005                490      CMP.B   #5,D5               *is it SUBQ?
00001500  6600 008A                491      BNE     orOpCode            *check if its DIVS.W
00001504                           492      
00001504                           493  subQMethod
00001504  43F9 00001CE4            494      LEA     outputSUBQ,A1       *output SUBQ
0000150A  103C 000E                495      MOVE.B  #14,D0
0000150E  4E4F                     496      TRAP    #15
00001510                           497      
00001510  3604                     498      MOVE.W  D4,D3               *move original word from D4
00001512  123C 000A                499      MOVE.B  #10,D1              *hacks
00001516  E37B                     500      ROL.W   D1,D3               *ROL by 10
00001518  C6BC 00000003            501      AND.L   #00000003,D3        *Mask 
0000151E  4EB9 00001B36            502      JSR     byteOpMode          *check if B,W,L
00001524                           503      
00001524  4EB9 00001540            504      JSR     subQData            *outputs #1-#8
0000152A                           505      
0000152A  43F9 00001D7A            506      LEA     outputComma,A1      *commas
00001530  103C 000E                507      MOVE.B  #14,D0
00001534  4E4F                     508      TRAP    #15
00001536                           509      
00001536  4EB9 00001B72            510      JSR     sourceEA            *get the source
0000153C                           511      
0000153C  6000 0762                512      BRA     DONE
00001540                           513      
00001540                           514      
00001540                           515  subQData
00001540  3604                     516      MOVE.W  D4,D3               *move original word from D4
00001542  EF5B                     517      ROL.W   #7,D3               *ROL 7
00001544  C6BC 00000007            518      AND.L   #$00000007,D3       *mask the bits
0000154A                           519      
0000154A  B63C 0000                520      CMP.B   #0,D3               *if its 0 display 8
0000154E  6700 0022                521      BEQ     display8ForSubQ
00001552                           522      
00001552  B63C 0008                523      CMP.B   #8,D3
00001556  6C00 0514                524      BGE     dataOpCode
0000155A                           525      
0000155A  43F9 00001D75            526      LEA     outputPound,A1      *output #
00001560  103C 000E                527      MOVE.B  #14,D0
00001564  4E4F                     528      TRAP    #15
00001566                           529      
00001566  4281                     530      CLR.L   D1
00001568  1203                     531      MOVE.B  D3,D1               *output 1-7
0000156A  103C 0003                532      MOVE.B  #3,D0
0000156E  4E4F                     533      TRAP    #15
00001570                           534      
00001570  4E75                     535      RTS                         *return to subQmethod
00001572                           536      
00001572                           537  display8ForSubQ
00001572                           538  
00001572  43F9 00001D75            539      LEA     outputPound,A1      *output #
00001578  103C 000E                540      MOVE.B  #14,D0
0000157C  4E4F                     541      TRAP    #15
0000157E  4281                     542      CLR.L   D1
00001580  123C 0008                543      MOVE.B  #8,D1               *output 8
00001584  103C 0003                544      MOVE.B  #3,D0
00001588  4E4F                     545      TRAP    #15
0000158A                           546      
0000158A  4E75                     547      RTS                         *return to subQMethod
0000158C                           548  
0000158C                           549  orOpCode
0000158C  BA3C 0008                550      CMP.B   #8,D5   
00001590  6600 008A                551      BNE     eorOpCode
00001594                           552      
00001594  2A04                     553      MOVE.L  D4,D5
00001596  720A                     554      MOVE.L  #10,D1
00001598  E37D                     555      ROL.W   D1,D5
0000159A                           556      
0000159A  CABC 00000007            557      AND.L   #$00000007,D5
000015A0                           558      
000015A0  BA3C 0007                559      CMP.B   #7,D5
000015A4  6700 0038                560      BEQ     divsWOpCode
000015A8                           561      
000015A8                           562  orMethod
000015A8  43F9 00001D29            563      LEA     outputOR,A1
000015AE  103C 000E                564      MOVE.B  #14,D0
000015B2  4E4F                     565      TRAP    #15
000015B4                           566      
000015B4  4EB9 00001AC2            567      JSR     dotOpMode
000015BA                           568      
000015BA  BC3C 0001                569      CMP.B   #1,D6
000015BE  6700 04CA                570      BEQ     altOrder
000015C2                           571      
000015C2  4EB9 00001B72            572      JSR     sourceEA
000015C8                           573      
000015C8  43F9 00001D7A            574      LEA     outputComma,A1
000015CE  103C 000E                575      MOVE.B  #14,D0
000015D2  4E4F                     576      TRAP    #15
000015D4                           577      
000015D4  4EB9 00001C22            578      JSR     addDestinationEA
000015DA                           579      
000015DA  6000 06C4                580      BRA     DONE
000015DE                           581      
000015DE                           582  divsWOpCode
000015DE                           583  *    CMP.B   #8,D5
000015DE                           584  *    BEQ     divsWCheck          *bits 8,7,6 need to make 7 to be DIVSW
000015DE                           585  *    BRA     eorOpCode
000015DE                           586  *    
000015DE                           587  divsWCheck
000015DE  3604                     588      MOVE.W  D4,D3
000015E0  143C 000A                589      MOVE.B  #10,D2
000015E4  E57B                     590      ROL.W   D2,D3
000015E6  C6BC 00000007            591      AND.L   #$00000007,D3
000015EC  B63C 0007                592      CMP.B   #7,D3
000015F0  6600 06AE                593      BNE     DONE
000015F4                           594      
000015F4  43F9 00001CFA            595      LEA     outputDIVSW,A1
000015FA  103C 000E                596      MOVE.B  #14,D0
000015FE  4E4F                     597      TRAP    #15
00001600                           598      
00001600  4EB9 00001B72            599      JSR     sourceEA 
00001606                           600      
00001606  43F9 00001D7A            601      LEA     outputComma,A1
0000160C  103C 000E                602      MOVE.B  #14,D0
00001610  4E4F                     603      TRAP    #15
00001612                           604      
00001612  4EB9 00001C22            605      JSR     addDestinationEA
00001618                           606      
00001618  6000 0686                607      BRA     DONE
0000161C                           608      
0000161C                           609  eorOpCode
0000161C  BA3C 000B                610      CMP.B   #11,D5
00001620  6600 0078                611      BNE     shiftsOpCode
00001624                           612      
00001624  2A04                     613      MOVE.L  D4,D5
00001626  E19D                     614      ROL.L   #8,D5
00001628  CABC 00000001            615      AND.L   #$00000001,D5
0000162E                           616      
0000162E                           617      
0000162E                           618  eorMethod
0000162E  BA3C 0001                619      CMP.B   #1,D5
00001632  6600 0030                620      BNE     cmpOpCode
00001636                           621      
00001636  43F9 00001D2C            622      LEA     outputEOR,A1
0000163C  103C 000E                623      MOVE.B  #14,D0
00001640  4E4F                     624      TRAP    #15
00001642                           625      
00001642  4EB9 00001AC2            626      JSR     dotOpMode
00001648                           627      
00001648  4EB9 00001C22            628      JSR     addDestinationEA
0000164E                           629      
0000164E  43F9 00001D7A            630      LEA     outputComma,A1
00001654  103C 000E                631      MOVE.B  #14,D0
00001658  4E4F                     632      TRAP    #15
0000165A                           633      
0000165A  4EB9 00001B72            634      JSR     sourceEA
00001660                           635      
00001660  6000 063E                636      BRA     DONE    
00001664                           637  
00001664                           638  cmpOpCode
00001664  BA3C 0000                639      CMP.B   #0,D5
00001668  6600 0636                640      BNE     DONE
0000166C                           641      
0000166C  43F9 00001D35            642      LEA     outputCMP,A1
00001672  103C 000E                643      MOVE.B  #14,D0
00001676  4E4F                     644      TRAP    #15
00001678                           645      
00001678  4EB9 00001AC2            646      JSR     dotOpMode
0000167E                           647      
0000167E  4EB9 00001B72            648      JSR     sourceEA
00001684                           649      
00001684  43F9 00001D7A            650      LEA     outputComma,A1
0000168A  103C 000E                651      MOVE.B  #14,D0
0000168E  4E4F                     652      TRAP    #15
00001690                           653      
00001690  4EB9 00001C22            654      JSR     addDestinationEA
00001696                           655      
00001696  6000 0608                656      BRA     DONE
0000169A                           657     
0000169A                           658  shiftsOpCode
0000169A  BA3C 000E                659      CMP.B   #14,D5
0000169E  6600 0166                660      BNE     mulsWOpCode
000016A2                           661      
000016A2  2A04                     662      MOVE.L  D4,D5
000016A4  E65D                     663      ROR.W   #3,D5
000016A6  CABC 00000003            664      AND.L   #$00000003,D5
000016AC                           665      
000016AC                           666  lsdOpCode
000016AC  BA3C 0001                667      CMP.B   #1,D5
000016B0  6600 0036                668      BNE     asdOpCode
000016B4                           669      
000016B4                           670  lsdMethod
000016B4  43F9 00001D3F            671      LEA     outputLS,A1
000016BA  103C 000E                672      MOVE.B  #14,D0
000016BE  4E4F                     673      TRAP    #15
000016C0                           674      
000016C0  4EB9 00001760            675      JSR     leftRight
000016C6                           676      
000016C6  4EB9 00001AC2            677      JSR     dotOpMode
000016CC                           678      
000016CC  4EB9 0000178E            679      JSR     shiftSourceEA
000016D2                           680      
000016D2  43F9 00001D7A            681      LEA     outputComma,A1
000016D8  103C 000E                682      MOVE.B  #14,D0
000016DC  4E4F                     683      TRAP    #15
000016DE                           684      
000016DE  4EB9 000017E8            685      JSR     shiftDestEA
000016E4                           686      
000016E4  6000 05BA                687      BRA     DONE
000016E8                           688   
000016E8                           689  asdOpCode
000016E8  BA3C 0000                690      CMP.B   #0,D5
000016EC  6600 0036                691      BNE     rodOpCode
000016F0                           692      
000016F0  43F9 00001D42            693      LEA     outputAS,A1
000016F6  103C 000E                694      MOVE.B  #14,D0
000016FA  4E4F                     695      TRAP    #15
000016FC                           696      
000016FC  4EB9 00001760            697      JSR     leftRight
00001702                           698      
00001702  4EB9 00001AC2            699      JSR     dotOpMode
00001708                           700      
00001708  4EB9 0000178E            701      JSR     shiftSourceEA
0000170E                           702      
0000170E  43F9 00001D7A            703      LEA     outputComma,A1
00001714  103C 000E                704      MOVE.B  #14,D0
00001718  4E4F                     705      TRAP    #15
0000171A                           706      
0000171A  4EB9 000017E8            707      JSR     shiftDestEA    
00001720                           708      
00001720  6000 057E                709      BRA     DONE
00001724                           710      
00001724                           711  rodOpCode
00001724  BA3C 0003                712      CMP.B   #3,D5
00001728  6600 0576                713      BNE     DONE
0000172C                           714      
0000172C  43F9 00001D45            715      LEA     outputRO,A1
00001732  103C 000E                716      MOVE.B  #14,D0
00001736  4E4F                     717      TRAP    #15
00001738                           718      
00001738  4EB9 00001760            719      JSR     leftRight
0000173E                           720      
0000173E  4EB9 00001AC2            721      JSR     dotOpMode
00001744                           722      
00001744  4EB9 0000178E            723      JSR     shiftSourceEA
0000174A                           724      
0000174A  43F9 00001D7A            725      LEA     outputComma,A1
00001750  103C 000E                726      MOVE.B  #14,D0
00001754  4E4F                     727      TRAP    #15
00001756                           728      
00001756  4EB9 000017E8            729      JSR     shiftDestEA
0000175C                           730      
0000175C  6000 0542                731      BRA     DONE
00001760                           732      
00001760                           733  leftRight
00001760  2604                     734      MOVE.L  D4,D3
00001762  E15B                     735      ROL.W   #8,D3
00001764  C6BC 00000001            736      AND.L   #$00000001,D3
0000176A                           737  
0000176A  B63C 0000                738      CMP.B   #0,D3
0000176E  6700 0010                739      BEQ     rightRight
00001772                           740      
00001772  43F9 00001D48            741      LEA     outputLeft,A1
00001778  103C 000E                742      MOVE.B  #14,D0
0000177C  4E4F                     743      TRAP    #15
0000177E                           744      
0000177E  4E75                     745      RTS
00001780                           746      
00001780                           747  rightRight
00001780  43F9 00001D4A            748      LEA     outputRight,A1
00001786  103C 000E                749      MOVE.B  #14,D0
0000178A  4E4F                     750      TRAP    #15
0000178C                           751      
0000178C  4E75                     752      RTS
0000178E                           753      
0000178E                           754  shiftSourceEA
0000178E  2404                     755      MOVE.L  D4,D2
00001790  EA5A                     756      ROR.W   #5,D2
00001792  C4BC 00000001            757      AND.L   #$00000001,D2
00001798                           758  
00001798  2604                     759      MOVE.L  D4,D3
0000179A  EF5B                     760      ROL.W   #7,D3
0000179C  C6BC 00000007            761      AND.L   #$00000007,D3
000017A2                           762      
000017A2  B43C 0000                763      CMP.B   #0,D2
000017A6  6700 0018                764      BEQ     shiftImmediateEA
000017AA                           765      
000017AA  43F9 00001D73            766      LEA     outputDn,A1
000017B0  103C 000E                767      MOVE.B  #14,D0
000017B4  4E4F                     768      TRAP    #15
000017B6                           769      
000017B6  2203                     770      MOVE.L  D3,D1
000017B8  103C 0003                771      MOVE.B  #3,D0
000017BC  4E4F                     772      TRAP    #15
000017BE                           773      
000017BE  4E75                     774      RTS
000017C0                           775      
000017C0                           776  shiftImmediateEA
000017C0  43F9 00001D75            777      LEA     outputPound,A1
000017C6  103C 000E                778      MOVE.B  #14,D0
000017CA  4E4F                     779      TRAP    #15
000017CC                           780      
000017CC  B63C 0000                781      CMP.B   #0,D3
000017D0  6700 000C                782      BEQ     shiftImmediateEight
000017D4                           783      
000017D4  2203                     784      MOVE.L  D3,D1
000017D6  103C 0003                785      MOVE.B  #3,D0
000017DA  4E4F                     786      TRAP    #15
000017DC                           787      
000017DC  4E75                     788      RTS
000017DE                           789      
000017DE                           790  shiftImmediateEight
000017DE  7208                     791      MOVE.L  #8,D1
000017E0  103C 0003                792      MOVE.B  #3,D0
000017E4  4E4F                     793      TRAP    #15
000017E6                           794      
000017E6  4E75                     795      RTS
000017E8                           796      
000017E8                           797  shiftDestEA
000017E8  2604                     798      MOVE.L  D4,D3
000017EA  C6BC 00000007            799      AND.L   #$00000007,D3
000017F0                           800      
000017F0  43F9 00001D73            801      LEA     outputDn,A1
000017F6  103C 000E                802      MOVE.B  #14,D0
000017FA  4E4F                     803      TRAP    #15
000017FC                           804      
000017FC  2203                     805      MOVE.L  D3,D1
000017FE  103C 0003                806      MOVE.B  #3,D0
00001802  4E4F                     807      TRAP    #15
00001804                           808      
00001804  4E75                     809      RTS
00001806                           810      
00001806                           811  mulsWOpCode
00001806  BA3C 000C                812      CMP.B   #12,D5
0000180A  6600 004A                813      BNE     mulsLOpCode
0000180E  3604                     814      MOVE.W  D4,D3
00001810  EC5B                     815      ROR.W   #6,D3
00001812  C63C 0007                816      AND.B   #7,D3
00001816  B63C 0007                817      CMP.B   #7,D3
0000181A  6600 0250                818      BNE     dataOpCode   
0000181E                           819  
0000181E                           820  mulsWMethod
0000181E  3604                     821      MOVE.W  D4,D3
00001820  E61B                     822      ROR.B   #3,D3
00001822  C63C 0007                823      AND.B   #7,D3
00001826  B63C 0001                824      CMP.B   #1,D3
0000182A  6700 0240                825      BEQ     dataOpCode
0000182E                           826      
0000182E                           827  mulsOutput    
0000182E  43F9 00001CF4            828      LEA     outputMULS,A1
00001834  103C 000E                829      MOVE.B  #14,D0
00001838  4E4F                     830      TRAP    #15
0000183A                           831      
0000183A  4EB9 00001B72            832      JSR     sourceEA
00001840                           833      
00001840  43F9 00001D7A            834      LEA     outputComma,A1
00001846  103C 000E                835      MOVE.B  #14,D0
0000184A  4E4F                     836      TRAP    #15
0000184C                           837      
0000184C  4EB9 00001C22            838      JSR     addDestinationEA
00001852                           839      
00001852  6000 044C                840      BRA     DONE
00001856                           841      
00001856                           842  mulsLOpCode
00001856  3604                     843      MOVE.W  D4,D3
00001858  143C 000A                844      MOVE.B  #10,D2
0000185C  E57B                     845      ROL.W   D2,D3
0000185E  C67C 01FF                846      AND.W   #$01FF,D3
00001862  B67C 0130                847      CMP.W   #304,D3
00001866  6600 0002                848      BNE     negOpCode
0000186A                           849      
0000186A                           850  mulsLMethod
0000186A                           851          
0000186A                           852      
0000186A                           853  negOpCode
0000186A  3604                     854      MOVE.W  D4,D3
0000186C  E15B                     855      ROL.W   #8,D3
0000186E  B63C 0044                856      CMP.B   #$44,D3
00001872  6600 002E                857      BNE     braOpCode
00001876                           858      
00001876                           859  negMethod
00001876  43F9 00001D1C            860      LEA     outputNEG,A1        *output NEG to the console
0000187C  103C 000E                861      MOVE.B  #14,D0
00001880  4E4F                     862      TRAP    #15
00001882                           863      
00001882  4283                     864      CLR.L   D3
00001884  3604                     865      MOVE.W  D4,D3               *move original word from D4
00001886  123C 000A                866      MOVE.B  #10,D1              *hacks
0000188A  E37B                     867      ROL.W   D1,D3               *ROL by 10
0000188C  C6BC 00000003            868      AND.L   #00000003,D3        *Mask 
00001892  4EB9 00001B36            869      JSR     byteOpMode          *check if B,W,L
00001898                           870          
00001898  4EB9 00001B72            871      JSR     sourceEA
0000189E                           872      
0000189E  6000 0400                873      BRA     DONE
000018A2                           874  
000018A2                           875  braOpCode
000018A2  3604                     876      MOVE.W  D4,D3               *move the opcode word into D3
000018A4  E15B                     877      ROL.W   #8,D3               *isolate the last byte
000018A6  B63C 0060                878      CMP.B   #$60,D3             *is it a BRA?
000018AA  6600 0154                879      BNE     bccOpCode           *its data then
000018AE                           880      
000018AE                           881  braMethod
000018AE  43F9 00001D20            882      LEA     outputBRA,A1        
000018B4  103C 000E                883      MOVE.B  #14,D0
000018B8  4E4F                     884      TRAP    #15
000018BA                           885  
000018BA                           886  
000018BA                           887  bccDisplacement    
000018BA  1604                     888      MOVE.B  D4,D3
000018BC  C67C 00FF                889      AND.W   #$00FF,D3
000018C0  B63C 0000                890      CMP.B   #$00,D3
000018C4  6700 0048                891      BEQ     bitDisplacement16
000018C8  B63C 00FF                892      CMP.B   #$FF,D3
000018CC  6700 00B6                893      BEQ     bitDisplacement32
000018D0  E11B                     894      ROL.B   #8,D3
000018D2  0A43 00FF                895      EOR.W   #$FF,D3
000018D6  5243                     896      ADD.W   #1,D3
000018D8                           897      
000018D8  43F9 00001D87            898      LEA     outputNegSign,A1
000018DE  103C 000E                899      MOVE.B  #14,D0
000018E2  4E4F                     900      TRAP    #15
000018E4                           901      
000018E4  3203                     902      MOVE.W  D3,D1
000018E6  103C 0003                903      MOVE.B  #3,D0
000018EA  4E4F                     904      TRAP    #15
000018EC                           905      
000018EC  43F9 00001D82            906      LEA     outputSpace,A1
000018F2  103C 000E                907      MOVE.B  #14,D0
000018F6  4E4F                     908      TRAP    #15
000018F8                           909      
000018F8  304D                     910      MOVE.W  A5,A0
000018FA  90C3                     911      SUBA.W  D3,A0
000018FC  3208                     912      MOVE.W  A0,D1
000018FE  103C 000F                913      MOVE.B  #15,D0
00001902  143C 0010                914      MOVE.B  #16,D2
00001906  4E4F                     915      TRAP    #15
00001908                           916      
00001908  304C                     917      MOVE.W  A4,A0
0000190A                           918      
0000190A                           919      
0000190A  6000 0394                920      BRA     DONE
0000190E                           921     
0000190E                           922  bitDisplacement16
0000190E                           923      
0000190E  304D                     924      MOVE.W  A5,A0
00001910  381D                     925      MOVE.W  (A5)+,D4
00001912  3604                     926      MOVE.W  D4,D3
00001914  E95B                     927      ROL.W   #4,D3
00001916  C67C 000F                928      AND.W   #$000F,D3
0000191A  B67C 0008                929      CMP.W   #8,D3
0000191E  6C00 002A                930      BGE     negBit16
00001922                           931      
00001922  3204                     932      MOVE.W  D4,D1
00001924  103C 0003                933      MOVE.B  #3,D0
00001928  4E4F                     934      TRAP    #15
0000192A                           935      
0000192A  43F9 00001D82            936      LEA     outputSpace,A1
00001930  103C 000E                937      MOVE.B  #14,D0
00001934  4E4F                     938      TRAP    #15
00001936                           939      
00001936  D0C4                     940      ADDA.W  D4,A0
00001938  3208                     941      MOVE.W  A0,D1
0000193A  103C 000F                942      MOVE.B  #15,D0
0000193E  143C 0010                943      MOVE.B  #16,D2
00001942  4E4F                     944      TRAP    #15
00001944                           945      
00001944  304C                     946      MOVE.W  A4,A0
00001946                           947      
00001946  6000 0358                948      BRA DONE
0000194A                           949      
0000194A                           950  negBit16
0000194A                           951  
0000194A  0A44 FFFF                952      EOR.W   #$FFFF,D4
0000194E  5244                     953      ADD.W   #1,D4
00001950                           954      
00001950  43F9 00001D87            955      LEA     outputNegSign,A1
00001956  103C 000E                956      MOVE.B  #14,D0
0000195A  4E4F                     957      TRAP    #15
0000195C                           958      
0000195C  3204                     959      MOVE.W  D4,D1
0000195E  103C 0003                960      MOVE.B  #3,D0
00001962  4E4F                     961      TRAP    #15
00001964                           962      
00001964  43F9 00001D82            963      LEA     outputSpace,A1
0000196A  103C 000E                964      MOVE.B  #14,D0
0000196E  4E4F                     965      TRAP    #15
00001970                           966      
00001970  90C4                     967      SUBA.W  D4,A0
00001972  3208                     968      MOVE.W  A0,D1
00001974  103C 000F                969      MOVE.B  #15,D0
00001978  143C 0010                970      MOVE.B  #16,D2
0000197C  4E4F                     971      TRAP    #15
0000197E                           972      
0000197E  304C                     973      MOVE.W  A4,A0
00001980                           974      
00001980  6000 031E                975      BRA     DONE
00001984                           976      
00001984                           977  bitDisplacement32
00001984                           978  
00001984  204D                     979      MOVE.L  A5,A0
00001986  281D                     980      MOVE.L  (A5)+,D4
00001988  2604                     981      MOVE.L  D4,D3
0000198A  E95B                     982      ROL.W   #4,D3
0000198C  C6BC 0000000F            983      AND.L   #$0000000F,D3
00001992  B6BC 00000008            984      CMP.L   #8,D3
00001998  6C00 002A                985      BGE     negBit32
0000199C                           986      
0000199C  2204                     987      MOVE.L  D4,D1
0000199E  103C 0003                988      MOVE.B  #3,D0
000019A2  4E4F                     989      TRAP    #15
000019A4                           990      
000019A4  43F9 00001D82            991      LEA     outputSpace,A1
000019AA  103C 000E                992      MOVE.B  #14,D0
000019AE  4E4F                     993      TRAP    #15
000019B0                           994      
000019B0  D1C4                     995      ADDA.L  D4,A0
000019B2  2208                     996      MOVE.L  A0,D1
000019B4  103C 000F                997      MOVE.B  #15,D0
000019B8  143C 0010                998      MOVE.B  #16,D2
000019BC  4E4F                     999      TRAP    #15
000019BE                          1000      
000019BE  204C                    1001      MOVE.L  A4,A0
000019C0                          1002      
000019C0  6000 02DE               1003      BRA DONE
000019C4                          1004  
000019C4                          1005  negBit32
000019C4                          1006  
000019C4  0A84 FFFFFFFF           1007      EOR.L   #$FFFFFFFF,D4
000019CA  5284                    1008      ADD.L   #1,D4
000019CC                          1009      
000019CC  43F9 00001D87           1010      LEA     outputNegSign,A1
000019D2  103C 000E               1011      MOVE.B  #14,D0
000019D6  4E4F                    1012      TRAP    #15
000019D8                          1013      
000019D8  2204                    1014      MOVE.L  D4,D1
000019DA  103C 0003               1015      MOVE.B  #3,D0
000019DE  4E4F                    1016      TRAP    #15
000019E0                          1017      
000019E0  43F9 00001D82           1018      LEA     outputSpace,A1
000019E6  103C 000E               1019      MOVE.B  #14,D0
000019EA  4E4F                    1020      TRAP    #15
000019EC                          1021      
000019EC                          1022      *MOVE.L  A5,A0
000019EC  91C4                    1023      SUBA.L  D4,A0
000019EE  2208                    1024      MOVE.L  A0,D1
000019F0  103C 000F               1025      MOVE.B  #15,D0
000019F4  143C 0010               1026      MOVE.B  #16,D2
000019F8  4E4F                    1027      TRAP    #15
000019FA                          1028      
000019FA  204C                    1029      MOVE.L  A4,A0
000019FC                          1030      
000019FC  6000 02A2               1031      BRA     DONE
00001A00                          1032      
00001A00                          1033  bccOpCode
00001A00  BA3C 0006               1034      CMP.B   #6,D5               *is it Bcc?
00001A04  6600 0066               1035      BNE     dataOpCode          *its data then
00001A08                          1036      
00001A08                          1037  bccMethod
00001A08  3604                    1038      MOVE.W  D4,D3
00001A0A  E15B                    1039      ROL.W   #8,D3
00001A0C  C67C 000F               1040      AND.W   #$000F,D3
00001A10  B63C 0005               1041      CMP.B   #5,D3
00001A14  6700 0016               1042      BEQ     bcs
00001A18  B63C 000C               1043      CMP.B   #$C,D3
00001A1C  6700 001E               1044      BEQ     bge
00001A20  B63C 000D               1045      CMP.B   #$D,D3
00001A24  6700 0026               1046      BEQ     bct
00001A28  6000 0032               1047      BRA     bvc
00001A2C                          1048      
00001A2C                          1049  bcs
00001A2C  43F9 00001D4C           1050      LEA     outputBCS,A1
00001A32  103C 000E               1051      MOVE.B  #14,D0
00001A36  4E4F                    1052      TRAP    #15
00001A38                          1053      
00001A38  6000 FE80               1054      BRA     bccDisplacement
00001A3C                          1055      
00001A3C                          1056  bge
00001A3C  43F9 00001D51           1057      LEA     outputBGE,A1
00001A42  103C 000E               1058      MOVE.B  #14,D0
00001A46  4E4F                    1059      TRAP    #15
00001A48                          1060      
00001A48  6000 FE70               1061      BRA     bccDisplacement
00001A4C                          1062  
00001A4C                          1063  bct
00001A4C  43F9 00001D56           1064      LEA     outputBCT,A1
00001A52  103C 000E               1065      MOVE.B  #14,D0
00001A56  4E4F                    1066      TRAP    #15
00001A58                          1067      
00001A58  6000 FE60               1068      BRA     bccDisplacement
00001A5C                          1069      
00001A5C                          1070  bvc
00001A5C  43F9 00001D5B           1071      LEA     outputBVC,A1
00001A62  103C 000E               1072      MOVE.B  #14,D0
00001A66  4E4F                    1073      TRAP    #15
00001A68                          1074      
00001A68  6000 FE50               1075      BRA     bccDisplacement
00001A6C                          1076      
00001A6C                          1077  
00001A6C                          1078             
00001A6C                          1079  dataOpCode
00001A6C  4283                    1080      CLR.L   D3
00001A6E  43F9 00001D16           1081      LEA     outputData,A1
00001A74  103C 000E               1082      MOVE.B  #14,D0
00001A78  4E4F                    1083      TRAP    #15
00001A7A                          1084      
00001A7A  3215                    1085      MOVE.W  (A5),D1
00001A7C  103C 000F               1086      MOVE.B  #15,D0
00001A80  143C 0010               1087      MOVE.B  #16,D2
00001A84  4E4F                    1088      TRAP    #15
00001A86                          1089      
00001A86  6000 0218               1090      BRA     DONE
00001A8A                          1091  
00001A8A                          1092  
00001A8A                          1093  altOrder                            *outputs the Dn as the source for ADD
00001A8A  4EB9 00001C22           1094      JSR     addDestinationEA
00001A90                          1095      
00001A90  43F9 00001D7A           1096      LEA     outputComma,A1
00001A96  103C 000E               1097      MOVE.B  #14,D0
00001A9A  4E4F                    1098      TRAP    #15
00001A9C                          1099      
00001A9C  4EB9 00001B72           1100      JSR     sourceEA
00001AA2  6000 01FC               1101      BRA     DONE
00001AA6                          1102      
00001AA6                          1103  addaOrder                           *ADDA method
00001AA6  4EB9 00001B72           1104      JSR     sourceEA                *output source first
00001AAC                          1105      
00001AAC  43F9 00001D7A           1106      LEA     outputComma,A1          *Comma
00001AB2  103C 000E               1107      MOVE.B  #14,D0
00001AB6  4E4F                    1108      TRAP    #15
00001AB8                          1109      
00001AB8  4EB9 00001C6A           1110      JSR     addaDestEA              *Have to set destination mode in addaDestEA
00001ABE  6000 01E0               1111      BRA     DONE
00001AC2                          1112  
00001AC2                          1113  
00001AC2                          1114  dotOpMode                           *Checks if it's a Byte,Word, or Long for ADD and SUB
00001AC2  3604                    1115      MOVE.W  D4,D3                   *Gets the original code from D4                 
00001AC4  143C 000A               1116      MOVE.B  #10,D2                  *yay hacks
00001AC8                          1117      
00001AC8  E57B                    1118      ROL.W   D2,D3                   *Rotates the original left by 10 bits
00001ACA  C6BC 00000007           1119      AND.L   #$00000007,D3           *mask it up
00001AD0                          1120      
00001AD0  B63C 0003               1121      CMP.B   #3,D3                   
00001AD4  6C00 0006               1122      BGE     altOpMode               *if value is > 3, Dn is the source
00001AD8                          1123      
00001AD8  6000 005C               1124      BRA     byteOpMode    
00001ADC                          1125  
00001ADC                          1126  altOpMode                           *But wait, there's more!
00001ADC  B63C 0003               1127      CMP.B   #3,D3                   *If it's 3, it's an ADDA.W
00001AE0  6700 0016               1128      BEQ     addaWOpMode
00001AE4                          1129      
00001AE4  B63C 0007               1130      CMP.B   #7,D3                   *If it's a 7, it's an ADDA.L
00001AE8  6700 002C               1131      BEQ     addaLOpMode             *Otherwise, it's just ADD with Dn in source
00001AEC                          1132      
00001AEC  1C3C 0001               1133      MOVE.B  #1,D6                   *D6 is 1 if Dn is the source
00001AF0  C63C 0003               1134      AND.B   #$3,D3                  *Mask it so it can continue with the output
00001AF4  6000 0040               1135      BRA     byteOpMode              *without the meddling 2^2 bit
00001AF8                          1136  
00001AF8                          1137  addaWOpMode                         *It's an ADDA.W
00001AF8  3C3C 0002               1138      MOVE.W  #2,D6
00001AFC                          1139      
00001AFC  43F9 00001CDE           1140      LEA     outputADDA,A1
00001B02  103C 000E               1141      MOVE.B  #14,D0
00001B06  4E4F                    1142      TRAP    #15
00001B08                          1143      
00001B08  43F9 00001D64           1144      LEA     outputWord,A1
00001B0E  103C 000E               1145      MOVE.B  #14,D0
00001B12  4E4F                    1146      TRAP    #15
00001B14                          1147      
00001B14  4E75                    1148      RTS
00001B16                          1149      
00001B16                          1150  addaLOpMode                         *It's an ADDA.L
00001B16  3C3C 0002               1151      MOVE.W  #2,D6
00001B1A                          1152      
00001B1A  5207                    1153      ADD.B   #1,D7
00001B1C                          1154      
00001B1C  43F9 00001CDE           1155      LEA     outputADDA,A1
00001B22  103C 000E               1156      MOVE.B  #14,D0
00001B26  4E4F                    1157      TRAP    #15
00001B28                          1158      
00001B28  43F9 00001D68           1159      LEA     outputLong,A1
00001B2E  103C 000E               1160      MOVE.B  #14,D0
00001B32  4E4F                    1161      TRAP    #15
00001B34                          1162      
00001B34  4E75                    1163      RTS
00001B36                          1164      
00001B36                          1165      
00001B36                          1166  byteOpMode                          *It's a byte?
00001B36  B63C 0000               1167      CMP.B   #0,D3
00001B3A  6600 0010               1168      BNE     wordOpMode
00001B3E                          1169      
00001B3E  43F9 00001D60           1170      LEA     outputByte,A1           *Output ".B" !
00001B44  103C 000E               1171      MOVE.B  #14,D0
00001B48  4E4F                    1172      TRAP    #15
00001B4A  4E75                    1173      RTS                             *Time to return back in time
00001B4C                          1174      
00001B4C                          1175  wordOpMode                          *It's a word?
00001B4C  B63C 0001               1176      CMP.B   #1,D3
00001B50  6600 0010               1177      BNE     longOpMode
00001B54                          1178      
00001B54  43F9 00001D64           1179      LEA     outputWord,A1           *Output ".W" onto console
00001B5A  103C 000E               1180      MOVE.B  #14,D0
00001B5E  4E4F                    1181      TRAP    #15
00001B60  4E75                    1182      RTS                             *Time warp~
00001B62                          1183      
00001B62                          1184  longOpMode                          *It better be a long then
00001B62  43F9 00001D68           1185      LEA     outputLong,A1           *outputs ".L" onto console
00001B68  103C 000E               1186      MOVE.B  #14,D0
00001B6C  4E4F                    1187      TRAP    #15
00001B6E                          1188      
00001B6E  5207                    1189      ADD.B   #1,D7
00001B70                          1190     
00001B70  4E75                    1191      RTS                             *whoosh~
00001B72                          1192   
00001B72                          1193      
00001B72                          1194  sourceEA                            *output the Source EA
00001B72  3604                    1195      MOVE.W  D4,D3                   *Put the original opcode into D3
00001B74  3403                    1196      MOVE.W  D3,D2                   *Copy that into D2
00001B76                          1197      
00001B76  E65A                    1198      ROR.W   #3,D2                   *Whoo~ Rotating~
00001B78  C4BC 00000007           1199      AND.L   #$00000007,D2           *D2 has Mode
00001B7E                          1200      
00001B7E                          1201  
00001B7E  C6BC 00000007           1202      AND.L   #$00000007,D3           *D3 has Register
00001B84                          1203  
00001B84                          1204   
00001B84                          1205  DnMode                          *Is the Mode a Data Register?
00001B84  4281                    1206      CLR.L   D1
00001B86                          1207      
00001B86  B43C 0000               1208      CMP.B   #0,D2
00001B8A  6600 0018               1209      BNE     AnMode
00001B8E                          1210      
00001B8E  43F9 00001D73           1211      LEA     outputDn,A1         *outputs "D" onto console
00001B94  103C 000E               1212      MOVE.B  #14,D0
00001B98  4E4F                    1213      TRAP    #15
00001B9A                          1214  
00001B9A  1203                    1215      MOVE.B  D3,D1               *outputs the register, whatever the numeric value is
00001B9C  103C 0003               1216      MOVE.B  #3,D0
00001BA0  4E4F                    1217      TRAP    #15
00001BA2                          1218      
00001BA2  4E75                    1219      RTS                         *wooo~
00001BA4                          1220    
00001BA4                          1221  AnMode                          *Mode is an Address Register?
00001BA4  B43C 0001               1222      CMP.B   #1,D2
00001BA8  6600 0018               1223      BNE     deRefAnMode
00001BAC                          1224      
00001BAC  43F9 00001D71           1225      LEA     outputAn,A1         *Outputs "A" onto console
00001BB2  103C 000E               1226      MOVE.B  #14,D0
00001BB6  4E4F                    1227      TRAP    #15
00001BB8                          1228      
00001BB8  1203                    1229      MOVE.B  D3,D1               *Outputs the register value
00001BBA  103C 0003               1230      MOVE.B  #3,D0
00001BBE  4E4F                    1231      TRAP    #15
00001BC0                          1232      
00001BC0  4E75                    1233      RTS                         *psssh
00001BC2                          1234      
00001BC2                          1235  deRefAnMode                     *Mode is a (A0)?
00001BC2  B43C 0002               1236      CMP.B   #2,D2               
00001BC6  6600 0024               1237      BNE     immediateData
00001BCA                          1238      
00001BCA  43F9 00001D6C           1239      LEA     outputdeRefAn1,A1   *Outputs "(A" onto console
00001BD0  103C 000E               1240      MOVE.B  #14,D0
00001BD4  4E4F                    1241      TRAP    #15
00001BD6                          1242      
00001BD6  1203                    1243      MOVE.B  D3,D1               *outputs register value
00001BD8  103C 0003               1244      MOVE.B  #3,D0
00001BDC  4E4F                    1245      TRAP    #15
00001BDE                          1246      
00001BDE  43F9 00001D6F           1247      LEA     outputdeRefAn2,A1   *makes it pretty by outputting ")"
00001BE4  103C 000E               1248      MOVE.B  #14,D0
00001BE8  4E4F                    1249      TRAP    #15
00001BEA                          1250      
00001BEA  4E75                    1251      RTS                         *=-=
00001BEC                          1252      
00001BEC                          1253  immediateData                   *Mode is an #<data>
00001BEC  B43C 0007               1254      CMP.B   #7,D2               *Mode for #<data> is 111
00001BF0  6600 00AE               1255      BNE     DONE                
00001BF4                          1256      
00001BF4  B63C 0004               1257      CMP.B   #4,D3               *Register for #<data> is 100
00001BF8  6600 00A6               1258      BNE     DONE
00001BFC                          1259                                 
00001BFC  43F9 00001D75           1260      LEA     outputPound,A1      *Outputs "#"
00001C02  103C 000E               1261      MOVE.B  #14,D0
00001C06  4E4F                    1262      TRAP    #15   
00001C08                          1263      
00001C08  BE3C 0001               1264      CMP.B   #1,D7
00001C0C  6700 0008               1265      BEQ     immeDataLong
00001C10                          1266      
00001C10  361D                    1267      MOVE.W  (A5)+,D3
00001C12                          1268      
00001C12  6000 0004               1269      BRA     immediateDatapt2
00001C16                          1270  
00001C16                          1271  immeDataLong
00001C16  261D                    1272      MOVE.L  (A5)+,D3    
00001C18                          1273      
00001C18                          1274      
00001C18                          1275  immediateDatapt2               *Outputs register value
00001C18  2203                    1276      MOVE.L  D3,D1
00001C1A  103C 0003               1277      MOVE.B  #3,D0
00001C1E  4E4F                    1278      TRAP    #15
00001C20                          1279  
00001C20  4E75                    1280      RTS                         *~owo~
00001C22                          1281      
00001C22                          1282  
00001C22                          1283  addDestinationEA                *Since ADD only has data register in dest area
00001C22  3604                    1284      MOVE.W  D4,D3
00001C24                          1285      
00001C24  3403                    1286      MOVE.W  D3,D2
00001C26                          1287      
00001C26  720A                    1288      MOVE.L  #10,D1
00001C28  E37A                    1289      ROL.W   D1,D2
00001C2A  C4BC 00000007           1290      AND.L   #$00000007,D2       *D2 has mode
00001C30                          1291      
00001C30                          1292      
00001C30  EF5B                    1293      ROL.W   #7,D3
00001C32  C6BC 00000007           1294      AND.L   #$00000007,D3       *D3 has register
00001C38                          1295      
00001C38                          1296  DnRegister                      *For ADD only, since it only has Dn 
00001C38  43F9 00001D73           1297      LEA     outputDn,A1         *outputs "D"
00001C3E  103C 000E               1298      MOVE.B  #14,D0
00001C42  4E4F                    1299      TRAP    #15
00001C44                          1300      
00001C44  1203                    1301      MOVE.B  D3,D1               *Outputs register value
00001C46  103C 0003               1302      MOVE.B  #3,D0
00001C4A  4E4F                    1303      TRAP    #15
00001C4C                          1304      
00001C4C  4E75                    1305      RTS
00001C4E                          1306  
00001C4E                          1307  moveDestinationEA               *Destination output for MOVE
00001C4E  3604                    1308      MOVE.W  D4,D3
00001C50  3403                    1309      MOVE.W  D3,D2
00001C52                          1310      
00001C52  EF5B                    1311      ROL.W   #7,D3
00001C54  C6BC 00000007           1312      AND.L   #$00000007,D3       *D3 has Register
00001C5A                          1313      
00001C5A  323C 000A               1314      MOVE.W  #10,D1      
00001C5E  E37A                    1315      ROL.W   D1,D2               *D2 has Mode
00001C60  C4BC 00000007           1316      AND.L   #$00000007,D2
00001C66                          1317      
00001C66  6000 FF1C               1318      BRA     DnMode              *output what it is, bra
00001C6A                          1319      
00001C6A                          1320  addaDestEA                      *Sets up the dest mode to be proper
00001C6A  3604                    1321      MOVE.W  D4,D3               *Get the original code again
00001C6C  3403                    1322      MOVE.W  D3,D2
00001C6E                          1323      
00001C6E  EF5B                    1324      ROL.W   #7,D3               
00001C70  C6BC 00000007           1325      AND.L   #$00000007,D3       *D3 has register
00001C76                          1326      
00001C76  323C 000A               1327      MOVE.W  #10,D1
00001C7A  E37A                    1328      ROL.W   D1,D2               *Have to AND it by 1, since the mode for ADDA
00001C7C  C4BC 00000001           1329      AND.L   #$00000001,D2       *is always an Address
00001C82                          1330      
00001C82  6000 FF00               1331      BRA     DnMode
00001C86                          1332      
00001C86                          1333  pageContinue
00001C86  43F9 00001DB6           1334      LEA     outputContinue,A1
00001C8C  103C 000E               1335      MOVE.B  #14,D0
00001C90  4E4F                    1336      TRAP    #15
00001C92  103C 0005               1337      MOVE.B  #5,D0
00001C96  4E4F                    1338      TRAP    #15
00001C98  16BC 001E               1339      MOVE.B  #line_count,(A3)
00001C9C  4EF8 115C               1340      JMP     getOpCode
00001CA0                          1341      
00001CA0                          1342  DONE
00001CA0  BCCD                    1343      CMP.W   A5,A6
00001CA2  6D00 0012               1344      BLT     END   
00001CA6  43F9 00001D7E           1345      LEA     outputNextLine,A1
00001CAC  103C 000E               1346      MOVE.B  #14,D0
00001CB0  4E4F                    1347      TRAP    #15 
00001CB2  4EF8 115C               1348      JMP     getOpCode
00001CB6                          1349      
00001CB6                          1350  END
00001CB6  43F9 00001D7E           1351      LEA     outputNextLine,A1
00001CBC  103C 000E               1352      MOVE.B  #14,D0
00001CC0  4E4F                    1353      TRAP    #15
00001CC2                          1354  
00001CC2  43F9 00001DA1           1355      LEA     outputEnd,A1
00001CC8  103C 000E               1356      MOVE.B  #14,D0
00001CCC  4E4F                    1357      TRAP    #15
00001CCE  FFFF FFFF               1358      SIMHALT             ; halt simulator
00001CD2                          1359  
00001CD2                          1360  * Put variables and constants here
00001CD2                          1361  
00001CD2= 43D2                    1362  code        DC.W    $43D2
00001CD4                          1363  
00001CD4                          1364  
00001CD4= D640                    1365  addCode     DC.W    $D640
00001CD6                          1366  
00001CD6= 303C                    1367  moveCode1   DC.W    $303C
00001CD8= 0011                    1368  moveCode2   DC.W    $0011
00001CDA                          1369  
00001CDA= 41 44 44 00             1370  outputADD   DC.B    'ADD',0
00001CDE= 41 00                   1371  outputADDA  DC.B    'A',0
00001CE0= 53 55 42 00             1372  outputSUB   DC.B    'SUB',0
00001CE4= 53 55 42 51 00          1373  outputSUBQ  DC.B    'SUBQ',0
00001CE9= 4D 4F 56 45 00          1374  outputMOVE  DC.B    'MOVE',0
00001CEE= 4D 4F 56 45 41 00       1375  outputMOVEA DC.B    'MOVEA',0
00001CF4= 4D 55 4C 53 20 00       1376  outputMULS DC.B    'MULS ',0
00001CFA= 44 49 56 53 2E 57 ...   1377  outputDIVSW DC.B    'DIVS.W ',0
00001D02= 4E 4F 50 20 00          1378  outputNOP   DC.B    'NOP ',0
00001D07= 4A 53 52 20 00          1379  outputJSR   DC.B    'JSR ',0
00001D0C= 52 54 53 20 00          1380  outputRTS   DC.B    'RTS ',0
00001D11= 4C 45 41 20 00          1381  outputLEA   DC.B    'LEA ',0
00001D16= 44 41 54 41 20 00       1382  outputData  DC.B    'DATA ',0
00001D1C= 4E 45 47 00             1383  outputNEG   DC.B    'NEG',0
00001D20= 42 52 41 20 00          1384  outputBRA   DC.B    'BRA ',0
00001D25= 4F 52 49 00             1385  outputORI   DC.B    'ORI',0
00001D29= 4F 52 00                1386  outputOR    DC.B    'OR',0
00001D2C= 45 4F 52 00             1387  outputEOR   DC.B    'EOR',0
00001D30= 43 4D 50 49 00          1388  outputCMPI  DC.B    'CMPI',0
00001D35= 43 4D 50 00             1389  outputCMP   DC.B    'CMP',0
00001D39= 42 43 4C 52 20 00       1390  outputBCLR  DC.B    'BCLR ',0
00001D3F= 4C 53 00                1391  outputLS    DC.B    'LS',0
00001D42= 41 53 00                1392  outputAS    DC.B    'AS',0
00001D45= 52 4F 00                1393  outputRO    DC.B    'RO',0
00001D48= 4C 00                   1394  outputLeft  DC.B    'L',0
00001D4A= 52 00                   1395  outputRight DC.B    'R',0
00001D4C                          1396  
00001D4C= 42 43 53 20 00          1397  outputBCS   DC.B    'BCS ',0
00001D51= 42 47 45 20 00          1398  outputBGE   DC.B    'BGE ',0
00001D56= 42 43 54 20 00          1399  outputBCT   DC.B    'BCT ',0
00001D5B= 42 56 43 20 00          1400  outputBVC   DC.B    'BVC ',0
00001D60                          1401  
00001D60= 2E 42 20 00             1402  outputByte  DC.B    '.B ',0
00001D64= 2E 57 20 00             1403  outputWord  DC.B    '.W ',0
00001D68= 2E 4C 20 00             1404  outputLong  DC.B    '.L ',0
00001D6C                          1405  
00001D6C= 28 41 00                1406  outputdeRefAn1   DC.B    '(A',0
00001D6F= 29 00                   1407  outputdeRefAn2   DC.B    ')',0
00001D71                          1408  
00001D71= 41 00                   1409  outputAn    DC.B    'A',0
00001D73= 44 00                   1410  outputDn    DC.B    'D',0
00001D75= 23 00                   1411  outputPound DC.B    '#',0
00001D78= 0000                    1412  outputCurrentAddr   DC.W    $0000
00001D7A                          1413  
00001D7A= 2C 00                   1414  outputComma     DC.B    ',',0
00001D7C= 2E 00                   1415  outputDot       DC.B    '.',0
00001D7E= 20 0D 0A 00             1416  outputNextLine  DC.B    ' ',CR,LF,0
00001D82= 20 00                   1417  outputSpace     DC.B    ' ',0
00001D84= 3A 20 00                1418  outputColon     DC.B    ': ',0
00001D87= 2D 00                   1419  outputNegSign   DC.B    '-',0
00001D89= 44 69 73 61 73 73 ...   1420  outputStart     DC.B    'Disassembling Initiated',0
00001DA1= 50 72 6F 67 72 61 ...   1421  outputEnd       DC.B    'Program Disassembled',0
00001DB6= 50 72 65 73 73 20 ...   1422  outputContinue  DC.B    'Press ENTER key to continue disassembling',CR,LF,0
00001DE2                          1423      END    $1000        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADDADESTEA          1C6A
ADDALOPMODE         1B16
ADDAORDER           1AA6
ADDAWOPMODE         1AF8
ADDCODE             1CD4
ADDDESTINATIONEA    1C22
ADDMETHOD           1480
ADDOPCODE           1478
ADDR_VAL_TEMP       1150
ALTOPMODE           1ADC
ALTORDER            1A8A
ANMODE              1BA4
ASCII_MASK          FF
ASDOPCODE           16E8
BCCDISPLACEMENT     18BA
BCCMETHOD           1A08
BCCOPCODE           1A00
BCLRIMMEDIATE       135A
BCLROPCODE          1312
BCS                 1A2C
BCT                 1A4C
BGE                 1A3C
BITDISPLACEMENT16   190E
BITDISPLACEMENT32   1984
BRAMETHOD           18AE
BRAOPCODE           18A2
BVC                 1A5C
BYTEOPMODE          1B36
CMPIMETHOD          12E0
CMPIOPCODE          12D8
CMPOPCODE           1664
CODE                1CD2
COUNTER             0
CR                  D
DATAOPCODE          1A6C
DEREFANMODE         1BC2
DISPLAY8FORSUBQ     1572
DIVSWCHECK          15DE
DIVSWOPCODE         15DE
DNMODE              1B84
DNREGISTER          1C38
DONE                1CA0
DOTOPMODE           1AC2
END                 1CB6
END_ADDR_MSG        111F
END_VAL             1158
EORMETHOD           162E
EOROPCODE           161C
GETOPCODE           115C
GET_ADDR            108C
IMMEDATALONG        1C16
IMMEDIATEDATA       1BEC
IMMEDIATEDATAPT2    1C18
JSRMETHOD           11DE
JSROPCODE           11CE
JSROUTPUTDEREF      11FA
JSROUTPUTLABEL      1210
LEAOPCODE           1222
LEAOUTPUT           1262
LEFTRIGHT           1760
LF                  A
LINE_COUNT          1E
LONGOPMODE          1B62
LOOP                10A8
LSDMETHOD           16B4
LSDOPCODE           16AC
MASK                F
MOVEALONGMETHOD     143E
MOVEAWORDMETHOD     13DE
MOVEBYTEMETHOD      1382
MOVEBYTEOPCODE      137A
MOVECODE1           1CD6
MOVECODE2           1CD8
MOVEDESTINATIONEA   1C4E
MOVELONGMETHODPT2   144E
MOVELONGOPCODE      1416
MOVELONGOPCODEMETHOD  141E
MOVEWORDMETHOD      13BE
MOVEWORDMETHODPT2   13EE
MOVEWORDOPCODE      13B6
MULSLMETHOD         186A
MULSLOPCODE         1856
MULSOUTPUT          182E
MULSWMETHOD         181E
MULSWOPCODE         1806
NEGBIT16            194A
NEGBIT32            19C4
NEGMETHOD           1876
NEGOPCODE           186A
NOPOPCODE           119E
ORIMETHOD           129E
ORIOPCODE           128A
ORMETHOD            15A8
OROPCODE            158C
OUTPUTADD           1CDA
OUTPUTADDA          1CDE
OUTPUTAN            1D71
OUTPUTAS            1D42
OUTPUTBCLR          1D39
OUTPUTBCS           1D4C
OUTPUTBCT           1D56
OUTPUTBGE           1D51
OUTPUTBRA           1D20
OUTPUTBVC           1D5B
OUTPUTBYTE          1D60
OUTPUTCMP           1D35
OUTPUTCMPI          1D30
OUTPUTCOLON         1D84
OUTPUTCOMMA         1D7A
OUTPUTCONTINUE      1DB6
OUTPUTCURRENTADDR   1D78
OUTPUTDATA          1D16
OUTPUTDEREFAN1      1D6C
OUTPUTDEREFAN2      1D6F
OUTPUTDIVSW         1CFA
OUTPUTDN            1D73
OUTPUTDOT           1D7C
OUTPUTEND           1DA1
OUTPUTEOR           1D2C
OUTPUTJSR           1D07
OUTPUTLEA           1D11
OUTPUTLEFT          1D48
OUTPUTLONG          1D68
OUTPUTLS            1D3F
OUTPUTMOVE          1CE9
OUTPUTMOVEA         1CEE
OUTPUTMULS          1CF4
OUTPUTNEG           1D1C
OUTPUTNEGSIGN       1D87
OUTPUTNEXTLINE      1D7E
OUTPUTNOP           1D02
OUTPUTOR            1D29
OUTPUTORI           1D25
OUTPUTPOUND         1D75
OUTPUTRIGHT         1D4A
OUTPUTRO            1D45
OUTPUTRTS           1D0C
OUTPUTSPACE         1D82
OUTPUTSTART         1D89
OUTPUTSUB           1CE0
OUTPUTSUBQ          1CE4
OUTPUTWORD          1D64
PAGECONTINUE        1C86
RET_SA              10F2
RIGHTRIGHT          1780
RODOPCODE           1724
RTSOPCODE           11B6
RTS_STRTADDR        10C6
SHIFTDESTEA         17E8
SHIFTIMMEDIATEEA    17C0
SHIFTIMMEDIATEEIGHT  17DE
SHIFTSOPCODE        169A
SHIFTSOURCEEA       178E
SOURCEEA            1B72
STACK               B000
START_ADDR_MSG      10F4
STRIP_ASCII         10CE
ST_VAL              1154
SUB30               10EE
SUB37               10E6
SUBMETHOD           14C6
SUBOPCODE           14BE
SUBQDATA            1540
SUBQMETHOD          1504
SUBQOPCODE          14FC
WORDOPMODE          1B4C
