00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.02
Created On: 6/6/2015 4:24:02 AM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      :  Disassembler
00000000                             3  * Written by :  Paul Kessler and Joscelyn Kim
00000000                             4  * Date       :  199X
00000000                             5  * Description:  This program takes assembled code and disassembles it into 
00000000                             6  *               assembly language readable by humans.  The program will be 
00000000                             7  *               disassembed in a user defined address range
00000000                             8  *-----------------------------------------------------------
00000000  =0000000D                  9  CR          EQU $0D
00000000  =0000000A                 10  LF          EQU $0A
00000000                            11  
00000000  =0000000F                 12  mask        EQU $0000000F
00000000  =000000FF                 13  ascii_mask  EQU $00FF
00000000  =00000000                 14  counter     EQU 0
00000000  =0000B000                 15  stack       EQU $B000
00000000  =0000001E                 16  line_count  EQU 30
00000000                            17  
00000000                            18  *---- User input address range -----
00000000                            19  
00001000                            20                  ORG         $1000                       * start of the program
00001000  4FF9 0000B000             21                  LEA         stack,SP                    * initialize the stack
00001006  4200                      22                  CLR.B       D0                          * clear D0
00001008  43F9 000010F4             23                  LEA         start_addr_msg, A1          * ask for starting address
0000100E  103C 000E                 24                  MOVE.B      #14, D0
00001012  4E4F                      25                  TRAP        #15                         
00001014  103C 0002                 26                  MOVE.B      #2, D0                      * take in user input as string
00001018  4E4F                      27                  TRAP        #15
0000101A  48A7 FFFE                 28                  MOVEM.W     A0-A6/D0-D7,-(SP)           * push registers on the stack
0000101E  4EB9 0000108C             29                  JSR         get_addr                    * strip ascii characters to hex
00001024  4C9F 7FFF                 30                  MOVEM.W     (SP)+, A0-A6/D0-D7          * restore registers
00001028  23F9 00001150 00001154    31                  MOVE.L      addr_val_temp,st_val
00001032                            32                  
00001032  43F9 0000111F             33                  LEA         end_addr_msg, A1            * ask for ending address
00001038  103C 000E                 34                  MOVE.B      #14, D0
0000103C  4E4F                      35                  TRAP        #15
0000103E  224C                      36                  MOVEA.L     A4,A1                       * reset address at A1 to get user input
00001040  103C 0002                 37                  MOVE.B      #2, D0                      * take address as a string
00001044  4E4F                      38                  TRAP        #15
00001046  48A7 FFFE                 39                  MOVEM.W     A0-A6/D0-D7,-(SP)           * push registers on the stack
0000104A  4EB9 0000108C             40                  JSR         get_addr                    * strip ascii address into hex
00001050  4C9F 7FFF                 41                  MOVEM.W     (SP)+, A0-A6/D0-D7          * restore the registers
00001054  23F9 00001150 00001158    42                  MOVE.L      addr_val_temp, end_val      * store address in end_val
0000105E  2A79 00001154             43                  MOVEA.L     st_val,A5                   * store start val in A5
00001064  2C79 00001158             44                  MOVEA.L     end_val,A6                  * store end val in A6
0000106A                            45                  
0000106A  43F9 000021B9             46                  LEA         outputStart,A1              *ouput starting messaage
00001070  103C 000E                 47                  MOVE.B      #14,D0          
00001074  4E4F                      48                  TRAP        #15
00001076                            49                  
00001076  43F9 000021AE             50                  LEA         outputNextLine,A1           *output nextline
0000107C  103C 000E                 51                  MOVE.B      #14,D0
00001080  4E4F                      52                  TRAP        #15
00001082                            53                  
00001082  16BC 001E                 54                  MOVE.B      #line_count,(A3)
00001086  5513                      55                  SUBQ.B      #2,(A3)
00001088  6000 00D2                 56                  BRA         getOpCode                   * Jump to getOpCode sub routine
0000108C                            57  
0000108C                            58                  
0000108C                            59  
0000108C                            60  get_addr 
0000108C  5301                      61                  SUBQ.B      #1,D1
0000108E  4287                      62                  CLR.L       D7                          * we need D7 to be 0
00001090  1019                      63                  MOVE.B      (A1)+,D0                    * store first byte in D0
00001092  0280 000000FF             64                  ANDI.L      #ascii_mask,D0              * mask the first byte
00001098  4EB9 000010CE             65                  JSR         strip_ascii                 * strip ascii char into hex
0000109E  C3FC 0004                 66                  MULS.W      #4,D1
000010A2  E3A0                      67                  ASL.L       D1,D0                       * shift left 8
000010A4  8E80                      68                  OR.L        D0,D7
000010A6  1019                      69                  MOVE.B      (A1)+,D0                    * move next byte into D0
000010A8  5901                      70  loop            SUBQ.B      #4,D1
000010AA  0280 000000FF             71                  ANDI.L      #ascii_mask,D0              * mask the second byte
000010B0  4EB9 000010CE             72                  JSR         strip_ascii                 * strip ascii to hex
000010B6  E3A0                      73                  ASL.L       D1,D0                       * shift left 8
000010B8  8E80                      74                  OR.L        D0,D7
000010BA  B23C 0000                 75                  CMP.B       #0,D1
000010BE  6700 0006                 76                  BEQ         rts_strtAddr
000010C2  1019                      77                  MOVE.B      (A1)+,D0
000010C4  60E2                      78                  BRA         loop
000010C6                            79                  
000010C6                            80  rts_strtAddr
000010C6  23C7 00001150             81                  MOVE.L      D7,addr_val_temp
000010CC  4E75                      82                  RTS     
000010CE                            83                  
000010CE  B03C 0039                 84  strip_ascii     CMP.B       #$39,D0                     *Is it in range of 0-9?
000010D2  6F00 001A                 85                  BLE         sub30                       *It's a number
000010D6  B03C 0046                 86                  CMP.B       #$46,D0                     *Is it A...F?
000010DA  6F00 000A                 87                  BLE         sub37                       *It's A...F
000010DE  0400 0057                 88                  SUB.B       #$57,D0                     *It's a...f
000010E2  6000 000E                 89                  BRA         ret_sa                      *Go back
000010E6  0400 0037                 90  sub37           SUB.B       #$37,D0                     *Strip 37
000010EA  6000 0006                 91                  BRA         ret_sa                      *Go back
000010EE  0400 0030                 92  sub30           SUB.B       #$30,D0                     *Strip 30
000010F2  4E75                      93  ret_sa          RTS                                     *Go back
000010F4                            94  
000010F4                            95                  
000010F4                            96  *---- Data ----
000010F4                            97  
000010F4= 45 6E 74 65 72 20 ...     98  start_addr_msg  DC.B    'Enter a starting address to disassemble: $', 0
0000111F= 45 6E 74 65 72 20 ...     99  end_addr_msg    DC.B    'Enter a ending address to stop disassembling: $', 0
00001150= 00000000                 100  addr_val_temp   DC.L    $00000000
00001154= 00000000                 101  st_val          DC.L    $00000000
00001158= 00000000                 102  end_val         DC.L    $00000000
0000115C                           103  
0000115C                           104  *--- Data end ----
0000115C                           105  
0000115C                           106  
0000115C                           107  * Disassembler Start
0000115C                           108  getOpCode                        *Gets opcode
0000115C                           109      *LEA     code,A0             *Loads "code" which is the op code
0000115C                           110      
0000115C  4287                     111      CLR.L   D7
0000115E  4286                     112      CLR.L   D6
00001160  4283                     113      CLR.L   D3
00001162  4281                     114      CLR.L   D1
00001164  4280                     115      CLR.L   D0
00001166  4285                     116      CLR.L   D5
00001168  4284                     117      CLR.L   D4
0000116A                           118      
0000116A  5313                     119      SUBQ.B  #1,(A3)
0000116C  0C13 0000                120      CMP.B   #0,(A3)
00001170  6700 0F26                121      BEQ     pageContinue
00001174                           122      
00001174  320D                     123      MOVE.W  A5,D1               *move starting addr into D1
00001176  103C 000F                124      MOVE.B  #15,D0              *convert number into hex and output to console
0000117A  143C 0010                125      MOVE.B  #16,D2
0000117E  4E4F                     126      TRAP    #15    
00001180  381D                     127      MOVE.W  (A5)+,D4            *move data at starting addr to D4
00001182                           128      
00001182  4281                     129      CLR.L   D1
00001184                           130      
00001184  43F9 000021B4            131      LEA     outputColon,A1      *output the colon and a space to the console
0000118A  103C 000E                132      MOVE.B  #14,D0
0000118E  4E4F                     133      TRAP    #15
00001190                           134      
00001190  2248                     135      MOVEA.L A0,A1               *used to clear A0
00001192  3404                     136      MOVE.W  D4,D2               *gets put into D4 and D2
00001194                           137      
00001194  E95A                     138      ROL.W   #4,D2               *rotate the first 4 significant bits to lower 4 bits
00001196                           139      
00001196  C4BC 0000000F            140      AND.L   #mask,D2            *mask it to get only the first byte
0000119C                           141      
0000119C  1A02                     142      MOVE.B  D2,D5               *put that value into D5
0000119E                           143  
0000119E                           144  nopOpCode
0000119E  B87C 4E71                145      CMP.W   #$4E71,D4
000011A2  6600 0012                146      BNE     rtsOpCode
000011A6                           147      
000011A6  43F9 00002126            148      LEA     outputNOP,A1
000011AC  103C 000E                149      MOVE.B  #14,D0
000011B0  4E4F                     150      TRAP    #15
000011B2  6000 0EFE                151      BRA     DONE
000011B6                           152      
000011B6                           153  rtsOpCode
000011B6  B87C 4E75                154      CMP.W   #$4E75,D4
000011BA  6600 0012                155      BNE     jsrOpCode
000011BE                           156      
000011BE  43F9 00002130            157      LEA     outputRTS,A1
000011C4  103C 000E                158      MOVE.B  #14,D0
000011C8  4E4F                     159      TRAP    #15
000011CA                           160      
000011CA  6000 0EE6                161      BRA     DONE
000011CE                           162      
000011CE                           163  jsrOpCode
000011CE  3604                     164      MOVE.W  D4,D3
000011D0  E15B                     165      ROL.W   #8,D3
000011D2  C67C 00FF                166      AND.W   #$00FF,D3
000011D6  B63C 004E                167      CMP.B   #$4E,D3
000011DA  6600 0046                168      BNE     movemOpCode
000011DE                           169      
000011DE                           170  jsrMethod
000011DE  3604                     171      MOVE.W  D4,D3
000011E0  E75B                     172      ROL.W   #3,D3
000011E2  C63C 0007                173      AND.B   #7,D3
000011E6  B63C 0002                174      CMP.B   #2,D3
000011EA  6700 000E                175      BEQ     jsrOutputDeref
000011EE                           176      
000011EE  B63C 0007                177      CMP.B   #7,D3
000011F2  6700 001C                178      BEQ     jsrOutputLabel
000011F6                           179  
000011F6                           180      
000011F6  6000 0F42                181      BRA     outputData
000011FA                           182          
000011FA                           183  jsrOutputDeref
000011FA                           184  
000011FA  43F9 0000212B            185      LEA     outputJSR,A1
00001200  103C 000E                186      MOVE.B  #14,D0
00001204  4E4F                     187      TRAP    #15
00001206                           188      
00001206  4EB9 00001ED0            189      JSR     sourceEA
0000120C                           190      
0000120C  6000 0EA4                191      BRA     DONE
00001210                           192      
00001210                           193  jsrOutputLabel
00001210                           194  
00001210  B63C 0001                195      CMP.B   #1,D3
00001214  6E00 0BB4                196      BGT     dataOpCode
00001218  4EB9 00001ED0            197      JSR     sourceEA
0000121E                           198      
0000121E  6000 0E92                199      BRA     DONE
00001222                           200      
00001222                           201  movemOpCode     
00001222  3604                     202      MOVE.W  D4,D3       
00001224  EC43                     203      ASR.W   #6,D3       
00001226  B67C 0122                204      CMP.W   #$0122,D3       
0000122A  6700 002E                205      BEQ     movemMethodRegToMem     
0000122E  B67C 0132                206      CMP.W   #$0132,D3       
00001232  6700 004E                207      BEQ     movemMethodMemToReg     
00001236  B67C 0123                208      CMP.W   #$0123,D3       
0000123A  6700 000E                209      BEQ     movemLongRegToMem       
0000123E  B67C 0133                210      CMP.W   #$0133,D3       
00001242  6700 000E                211      BEQ     movemLongMemToReg       
00001246  6000 02A0                212      BRA     leaOpCode
0000124A                           213  
0000124A                           214  movemLongRegToMem
0000124A  1C3C 0001                215      MOVE.B  #1,D6
0000124E  6000 000A                216      BRA     movemMethodRegToMem 
00001252                           217  
00001252                           218  movemLongMemToReg
00001252  1C3C 0001                219      MOVE.B  #1,D6
00001256  6000 002A                220      BRA     movemMethodMemToReg     
0000125A                           221              
0000125A                           222  movemMethodRegToMem     
0000125A  1A3C 0000                223      MOVE.B  #0,D5                       *Register to memory baby!       
0000125E  3604                     224      MOVE.W  D4,D3       
00001260  E61B                     225      ROR.B   #3,D3       
00001262  C67C 0007                226      AND.W   #$0007,D3       
00001266  B63C 0002                227      CMP.B   #2,D3       
0000126A  6700 003E                228      BEQ     movemOutput     
0000126E  B63C 0004                229      CMP.B   #4,D3       
00001272  6700 0036                230      BEQ     movemOutput     
00001276  B63C 0007                231      CMP.B   #7,D3       
0000127A  6700 002E                232      BEQ     movemOutput     
0000127E  6000 0B4A                233      BRA     dataOpCode      
00001282                           234                  
00001282                           235  movemMethodMemToReg     
00001282  1A3C 0001                236      MOVE.B  #1,D5                       *Memory to Register baby!       
00001286  3604                     237      MOVE.W  D4,D3       
00001288  E61B                     238      ROR.B   #3,D3       
0000128A  C67C 0007                239      AND.W   #$0007,D3       
0000128E  B63C 0002                240      CMP.B   #2,D3       
00001292  6700 0016                241      BEQ     movemOutput     
00001296  B63C 0003                242      CMP.B   #3,D3       
0000129A  6700 000E                243      BEQ     movemOutput     
0000129E  B63C 0007                244      CMP.B   #7,D3       
000012A2  6700 0006                245      BEQ     movemOutput     
000012A6  6000 0B22                246      BRA     dataOpCode      
000012AA                           247              
000012AA                           248  movemOutput     
000012AA  3604                     249      MOVE.W  D4,D3       
000012AC  BA3C 0001                250      CMP.B   #1,D5       
000012B0  6700 0032                251      BEQ     movemOutputMemToReg     
000012B4                           252              
000012B4  E643                     253      ASR.W   #3,D3       
000012B6  C67C 0007                254      AND.W   #$0007,D3       
000012BA  B63C 0002                255      CMP.B   #2,D3       
000012BE  6700 0054                256      BEQ     getAnMode       
000012C2  B63C 0004                257      CMP.B   #4,D3       
000012C6  6700 004C                258      BEQ     getAnMode       
000012CA  B63C 0007                259      CMP.B   #7,D3       
000012CE  6600 0AFA                260      BNE     dataOpCode      
000012D2  1604                     261      MOVE.B  D4,D3       
000012D4  C63C 0007                262      AND.B   #$07,D3     
000012D8  B63C 0001                263      CMP.B   #1,D3       
000012DC  6E00 0AEC                264      BGT     dataOpCode      
000012E0  6000 0032                265      BRA     getAnMode       
000012E4                           266              
000012E4                           267  movemOutputMemToReg
000012E4  E643                     268      ASR.W   #3,D3
000012E6  C67C 0007                269      AND.W   #$0007,D3
000012EA  B63C 0002                270      CMP.B   #2,D3
000012EE  6700 0024                271      BEQ     getAnMode
000012F2  B63C 0003                272      CMP.B   #3,D3
000012F6  6700 001C                273      BEQ     getAnMode
000012FA  B63C 0007                274      CMP.B   #7,D3
000012FE  6600 0ACA                275      BNE     dataOpCode
00001302  1604                     276      MOVE.B  D4,D3
00001304  C63C 0007                277      AND.B   #$07,D3
00001308  B63C 0001                278      CMP.B   #1,D3
0000130C  6E00 0ABC                279      BGT     dataOpCode
00001310  6000 0002                280      BRA     getAnMode
00001314                           281              
00001314                           282  getAnMode       
00001314  1403                     283      MOVE.B  D3,D2       
00001316                           284              
00001316                           285  movemWEA        
00001316                           286  *    MOVE.W  (A5)+,D3
00001316  BC3C 0001                287      CMP.B   #1,D6
0000131A  6700 0012                288      BEQ     displayMovemLong
0000131E                           289  
0000131E                           290  displayMovemWord        
0000131E  43F9 00002106            291      LEA     outputMOVEMW,A1     
00001324  103C 000E                292      MOVE.B  #14,D0      
00001328  4E4F                     293      TRAP    #15
0000132A  6000 000E                294      BRA     regToMem
0000132E                           295  
0000132E                           296  displayMovemLong
0000132E  43F9 0000210F            297      LEA     outputMOVEML,A1     
00001334  103C 000E                298      MOVE.B  #14,D0      
00001338  4E4F                     299      TRAP    #15     
0000133A                           300      
0000133A                           301      
0000133A                           302  regToMem
0000133A  4285                     303      CLR.L   D5
0000133C  4283                     304      CLR.L   D3
0000133E  4282                     305      CLR.L   D2
00001340  4281                     306      CLR.L   D1
00001342  4286                     307      CLR.L   D6
00001344  4287                     308      CLR.L   D7
00001346  4284                     309      CLR.L   D4
00001348                           310  
00001348  BA3C 0000                311      CMP.B   #0,D5
0000134C  6600 0176                312      BNE     memToReg
00001350                           313      
00001350  3A1D                     314      MOVE.W  (A5)+,D5
00001352  3C3C 0010                315      MOVE.W  #16,D6
00001356  143C 0001                316      MOVE.B  #1,D2
0000135A                           317      
0000135A                           318      
0000135A                           319      
0000135A                           320      
0000135A                           321  registerCheckerDn
0000135A  B43C 0009                322      CMP.B   #9,D2
0000135E  6700 0096                323      BEQ     meepmeep
00001362                           324  
00001362  3605                     325      MOVE.W  D5,D3
00001364  E57B                     326      ROL.W   D2,D3
00001366  C6BC 00000001            327      AND.L   #$00000001,D3
0000136C  5202                     328      ADD.B  #1,D2
0000136E                           329      
0000136E                           330  meowmeow
0000136E  B63C 0001                331      CMP.B   #1,D3
00001372  6700 000C                332      BEQ     regBitSet           *Do shit
00001376                           333  
00001376  B83C 0000                334      CMP.B   #0,D4
0000137A  67DE                     335      BEQ     registerCheckerDn   *the one before was a zero
0000137C                           336  
0000137C  6000 0016                337      BRA     registerOutput    *output stuff because there is a range
00001380                           338      
00001380                           339  regBitSet
00001380  B83C 0001                340      CMP.B   #1,D4
00001384  6600 0006                341      BNE   hamsters
00001388                           342  
00001388                           343  checkSeven                      *There is a range
00001388  1E02                     344      MOVE.B  D2,D7
0000138A                           345      
0000138A  60CE                     346      BRA     registerCheckerDn
0000138C                           347      
0000138C                           348  hamsters
0000138C  1202                     349      MOVE.B  D2,D1       *sets the "start" of range
0000138E                           350      
0000138E  183C 0001                351      MOVE.B  #1,D4       *there was a one
00001392                           352      
00001392  60C6                     353      BRA     registerCheckerDn
00001394                           354      
00001394                           355  registerOutput
00001394  43F9 0000219C            356      LEA     outputDn,A1
0000139A  103C 000E                357      MOVE.B  #14,D0
0000139E  4E4F                     358      TRAP    #15
000013A0                           359      
000013A0  5501                     360      SUBQ.B  #2,D1
000013A2  103C 0003                361      MOVE.B  #3,D0
000013A6  4E4F                     362      TRAP    #15
000013A8                           363      
000013A8  BE3C 0001                364      CMP.B   #1,D7
000013AC  6C00 0012                365      BGE     outputpartfucking2
000013B0                           366      
000013B0  43F9 000021A8            367      LEA     outputSlash,A1
000013B6  103C 000E                368      MOVE.B  #14,D0
000013BA  4E4F                     369      TRAP    #15
000013BC                           370  
000013BC  4284                     371      CLR.L   D4
000013BE                           372  
000013BE  609A                     373      BRA     registerCheckerDn  
000013C0                           374      
000013C0                           375  outputpartfucking2
000013C0  43F9 000021B7            376      LEA     outputNegSign,A1
000013C6  103C 000E                377      MOVE.B  #14,D0
000013CA  4E4F                     378      TRAP    #15
000013CC                           379      
000013CC  43F9 0000219C            380      LEA     outputDn,A1
000013D2  103C 000E                381      MOVE.B  #14,D0
000013D6  4E4F                     382      TRAP    #15
000013D8                           383      
000013D8  5507                     384      SUBQ.B  #2,D7
000013DA  2207                     385      MOVE.L  D7,D1
000013DC  103C 0003                386      MOVE.B  #3,D0
000013E0  4E4F                     387      TRAP    #15
000013E2                           388      
000013E2  43F9 000021A8            389      LEA     outputSlash,A1
000013E8  103C 000E                390      MOVE.B  #14,D0
000013EC  4E4F                     391      TRAP    #15
000013EE                           392      
000013EE  4284                     393      CLR.L   D4
000013F0  4287                     394      CLR.L   D7
000013F2                           395      
000013F2  6000 FF66                396      BRA     registerCheckerDn
000013F6                           397      
000013F6                           398  meepmeep
000013F6  43F9 000021A8            399      LEA     outputSlash,A1
000013FC  103C 000E                400      MOVE.B  #14,D0
00001400  4E4F                     401      TRAP    #15
00001402                           402      
00001402  4283                     403      CLR.L   D3
00001404  4284                     404      CLR.L   D4
00001406  4286                     405      CLR.L   D6
00001408  4287                     406      CLR.L   D7
0000140A  4281                     407      CLR.L   D1
0000140C                           408      
0000140C                           409      
0000140C                           410  registerCheckAn
0000140C  B43C 0011                411      CMP.B   #17,D2
00001410  6700 009E                412      BEQ     registerDone
00001414                           413      
00001414  3605                     414      MOVE.W  D5,D3
00001416  E57B                     415      ROL.W   D2,D3
00001418  C6BC 00000001            416      AND.L   #$00000001,D3
0000141E  5202                     417      ADD.B   #1,D2
00001420                           418      
00001420                           419  registerRangeAn
00001420  B63C 0001                420      CMP.B   #1,D3
00001424  6700 000C                421      BEQ     regBitSetAn           *Do shit
00001428                           422  
00001428  B83C 0000                423      CMP.B   #0,D4
0000142C  67DE                     424      BEQ     registerCheckAn   *the one before was a zero
0000142E                           425  
0000142E  6000 001E                426      BRA     registerOutputAn    *output stuff because there is a range
00001432                           427      
00001432                           428  regBitSetAn
00001432  B83C 0001                429      CMP.B   #1,D4
00001436  6600 000A                430      BNE   hamstersAn
0000143A                           431  
0000143A                           432  checkSevenAn                      *There is a range
0000143A  5102                     433      SUBQ.B  #8,D2
0000143C  1E02                     434      MOVE.B  D2,D7
0000143E  5002                     435      ADD.B   #8,D2
00001440                           436      
00001440  60CA                     437      BRA     registerCheckAn
00001442                           438      
00001442                           439  hamstersAn
00001442  5102                     440      SUBQ.B  #8,D2
00001444  1202                     441      MOVE.B  D2,D1       *sets the "start" of range
00001446  5002                     442      ADD.B   #8,D2
00001448                           443      
00001448  183C 0001                444      MOVE.B  #1,D4       *there was a one
0000144C                           445      
0000144C  60BE                     446      BRA     registerCheckAn
0000144E                           447      
0000144E                           448  registerOutputAn
0000144E  43F9 0000219A            449      LEA     outputAn,A1
00001454  103C 000E                450      MOVE.B  #14,D0
00001458  4E4F                     451      TRAP    #15
0000145A                           452      
0000145A  5501                     453      SUBQ.B  #2,D1
0000145C  103C 0003                454      MOVE.B  #3,D0
00001460  4E4F                     455      TRAP    #15
00001462                           456      
00001462  BE3C 0001                457      CMP.B   #1,D7
00001466  6C00 0012                458      BGE     outputpartfucking2An
0000146A                           459      
0000146A  43F9 000021A8            460      LEA     outputSlash,A1
00001470  103C 000E                461      MOVE.B  #14,D0
00001474  4E4F                     462      TRAP    #15
00001476                           463  
00001476  4284                     464      CLR.L   D4
00001478                           465  
00001478  6092                     466      BRA     registerCheckAn  
0000147A                           467      
0000147A                           468  outputpartfucking2An
0000147A  43F9 000021B7            469      LEA     outputNegSign,A1
00001480  103C 000E                470      MOVE.B  #14,D0
00001484  4E4F                     471      TRAP    #15
00001486                           472      
00001486  43F9 0000219A            473      LEA     outputAn,A1
0000148C  103C 000E                474      MOVE.B  #14,D0
00001490  4E4F                     475      TRAP    #15
00001492                           476      
00001492  5507                     477      SUBQ.B  #2,D7
00001494  2207                     478      MOVE.L  D7,D1
00001496  103C 0003                479      MOVE.B  #3,D0
0000149A  4E4F                     480      TRAP    #15
0000149C                           481      
0000149C  43F9 000021A8            482      LEA     outputSlash,A1
000014A2  103C 000E                483      MOVE.B  #14,D0
000014A6  4E4F                     484      TRAP    #15
000014A8                           485      
000014A8  4284                     486      CLR.L   D4
000014AA  4287                     487      CLR.L   D7
000014AC                           488      
000014AC  6000 FF5E                489      BRA     registerCheckAn
000014B0                           490      
000014B0                           491  registerDone
000014B0  BE3C 0001                492      CMP.B   #1,D7
000014B4  6C98                     493      BGE     registerOutputAn
000014B6                           494  
000014B6  4E75                     495      RTS
000014B8                           496      
000014B8                           497  *regList    
000014B8                           498  *    CMP.B   #1,D5
000014B8                           499  *    BEQ     outputRegMemToReg
000014B8                           500  *       
000014B8                           501  *    CMP.W   #$FFFF,D3      
000014B8                           502  *    BEQ     outputReg      
000014B8                           503  *       
000014B8                           504  *outputReg      
000014B8                           505  *    LEA     outputRegList,A1       
000014B8                           506  *    MOVE.B  #14,D0     
000014B8                           507  *    TRAP    #15        
000014B8                           508  *           
000014B8                           509  *    LEA     outputComma,A1     
000014B8                           510  *    MOVE.B  #14,D0     
000014B8                           511  *    TRAP    #15        
000014B8                           512  *           
000014B8                           513  *    CMP.B   #4,D2      
000014B8                           514  *    BLE     AnModeSub      
000014B8                           515  *    BRA     xxxModeSub 
000014B8                           516  
000014B8                           517  outputRegMemToReg
000014B8  B43C 0004                518      CMP.B   #4,D2       
000014BC  6F00 000A                519      BLE     AnModeSub       
000014C0  6000 0016                520      BRA     xxxModeSub
000014C4                           521  
000014C4                           522  memToReg
000014C4                           523  *    LEA     outputComma,A1     
000014C4                           524  *    MOVE.B  #14,D0     
000014C4                           525  *    TRAP    #15    
000014C4                           526  *           
000014C4                           527  *    LEA     outputRegList,A1       
000014C4                           528  *    MOVE.B  #14,D0     
000014C4                           529  *    TRAP    #15
000014C4                           530      
000014C4  6000 0BEC                531      BRA DONE
000014C8                           532              
000014C8                           533  AnModeSub           
000014C8  4EB9 00001ED0            534      JSR     sourceEA
000014CE  BA3C 0001                535      CMP.B   #1,D5
000014D2  67F0                     536      BEQ     memToReg        
000014D4  6000 0BDC                537      BRA     DONE        
000014D8                           538              
000014D8                           539  xxxModeSub      
000014D8  4EB9 00001FE0            540      JSR     xxxWord
000014DE  BA3C 0001                541      CMP.B   #1,D5
000014E2  67E0                     542      BEQ     memToReg        
000014E4  6000 0BCC                543      BRA     DONE            
000014E8                           544                  
000014E8                           545  leaOpCode
000014E8  BA3C 0004                546      CMP.B   #4,D5
000014EC  6600 0062                547      BNE     oriOpCode
000014F0  3604                     548      MOVE.W  D4,D3
000014F2  E15B                     549      ROL.W   #8,D3
000014F4  B63C 0044                550      CMP.B   #$44,D3
000014F8  6700 06DA                551      BEQ     negMethod
000014FC  E05B                     552      ROR.W   #8,D3
000014FE  EE5B                     553      ROR.W   #7,D3
00001500  C63C 0007                554      AND.B   #7,D3
00001504  B63C 0007                555      CMP.B   #7,D3
00001508  6600 08C0                556      BNE     dataOpCode
0000150C                           557      
0000150C  3604                     558      MOVE.W  D4,D3
0000150E  E65B                     559      ROR.W   #3,D3
00001510  C63C 0007                560      AND.B   #7,D3
00001514  B63C 0002                561      CMP.B   #2,D3
00001518  6700 000E                562      BEQ     leaOutput
0000151C                           563      
0000151C  B63C 0007                564      CMP.B   #7,D3
00001520  6700 0006                565      BEQ     leaOutput
00001524                           566      
00001524  6000 08A4                567      BRA     dataOpCode
00001528                           568      
00001528                           569  leaOutput    
00001528  43F9 00002135            570      LEA     outputLEA,A1
0000152E  103C 000E                571      MOVE.B  #14,D0
00001532  4E4F                     572      TRAP    #15
00001534                           573      
00001534  4EB9 00001ED0            574      JSR     sourceEA
0000153A                           575      
0000153A  43F9 000021AA            576      LEA     outputComma,A1
00001540  103C 000E                577      MOVE.B  #14,D0
00001544  4E4F                     578      TRAP    #15
00001546                           579      
00001546  4EB9 0000207C            580      JSR     addaDestEA
0000154C                           581      
0000154C  6000 0B64                582      BRA     DONE
00001550                           583      
00001550                           584  oriOpCode                       *OR opcode
00001550  BA3C 0000                585      CMP.B   #0,D5               
00001554  6600 00EA                586      BNE     moveByteOpCode      *if not, go to next opcode
00001558                           587  
00001558                           588  *-------------------------------------------------Change this when merging         
00001558  3404                     589      MOVE.W  D4,D2
0000155A  E15A                     590      ROL.W   #8,D2
0000155C  C4BC 0000000F            591      AND.L   #$0000000F,D2
00001562                           592      
00001562  2A02                     593      MOVE.L  D2,D5
00001564                           594      
00001564                           595  oriMethod
00001564  BA3C 0000                596      CMP.B   #0,D5
00001568  6600 0034                597      BNE     cmpiOpCode
0000156C                           598      
0000156C  43F9 00002149            599      LEA     outputORI,A1
00001572  103C 000E                600      MOVE.B  #14,D0
00001576  4E4F                     601      TRAP    #15
00001578                           602      
00001578  4EB9 00001E20            603      JSR     dotOpMode
0000157E                           604          
0000157E  7407                     605      MOVE.L  #7,D2
00001580  7604                     606      MOVE.L  #4,D3
00001582  4EB9 00001FAA            607      JSR     immediateData
00001588                           608      
00001588  43F9 000021AA            609      LEA     outputComma,A1
0000158E  103C 000E                610      MOVE.B  #14,D0
00001592  4E4F                     611      TRAP    #15
00001594                           612      
00001594  4EB9 00001ED0            613      JSR     sourceEA
0000159A  6000 0B16                614      BRA     DONE
0000159E                           615  
0000159E                           616  cmpiOpCode
0000159E  BA3C 000C                617      CMP.B   #12,D5
000015A2  6600 0034                618      BNE     bclrOpCode
000015A6                           619      
000015A6                           620  cmpiMethod
000015A6  43F9 00002154            621      LEA     outputCMPI,A1
000015AC  103C 000E                622      MOVE.B  #14,D0
000015B0  4E4F                     623      TRAP    #15
000015B2                           624      
000015B2  4EB9 00001E20            625      JSR     dotOpMode
000015B8                           626      
000015B8  7407                     627      MOVE.L  #7,D2
000015BA  7604                     628      MOVE.L  #4,D3
000015BC  4EB9 00001FAA            629      JSR     immediateData
000015C2                           630      
000015C2  43F9 000021AA            631      LEA     outputComma,A1
000015C8  103C 000E                632      MOVE.B  #14,D0
000015CC  4E4F                     633      TRAP    #15
000015CE                           634      
000015CE  4EB9 00001ED0            635      JSR     sourceEA
000015D4  6000 0ADC                636      BRA     DONE
000015D8                           637      
000015D8                           638  bclrOpCode
000015D8  43F9 0000215D            639      LEA     outputBCLR,A1
000015DE  103C 000E                640      MOVE.B  #14,D0
000015E2  4E4F                     641      TRAP    #15
000015E4                           642      
000015E4  720A                     643      MOVE.L  #10,D1
000015E6  2A04                     644      MOVE.L  D4,D5
000015E8  E37D                     645      ROL.W   D1,D5
000015EA  CABC 00000007            646      AND.L   #$00000007,D5
000015F0                           647      
000015F0  BA3C 0002                648      CMP.B   #2,D5
000015F4  6700 002A                649      BEQ     bclrImmediate
000015F8                           650      
000015F8  7400                     651      MOVE.L  #0,D2
000015FA  2604                     652      MOVE.L  D4,D3
000015FC  EF5B                     653      ROL.W   #7,D3
000015FE  C6BC 00000007            654      AND.L   #$00000007,D3
00001604                           655      
00001604  4EB9 00001EE2            656      JSR     DnMode
0000160A                           657      
0000160A  43F9 000021AA            658      LEA     outputComma,A1
00001610  103C 000E                659      MOVE.B  #14,D0
00001614  4E4F                     660      TRAP    #15
00001616                           661      
00001616  4EB9 00001ED0            662      JSR     sourceEA
0000161C                           663      
0000161C  6000 0A94                664      BRA     DONE
00001620                           665          
00001620                           666  bclrImmediate
00001620                           667      
00001620  7407                     668      MOVE.L  #7,D2
00001622  7604                     669      MOVE.L  #4,D3
00001624                           670      
00001624  4EB9 00001FAA            671      JSR     immediateData
0000162A                           672      
0000162A  43F9 000021AA            673      LEA     outputComma,A1
00001630  103C 000E                674      MOVE.B  #14,D0
00001634  4E4F                     675      TRAP    #15
00001636                           676      
00001636  4EB9 00001ED0            677      JSR     sourceEA
0000163C                           678      
0000163C  6000 0A74                679      BRA     DONE    
00001640                           680      
00001640                           681  moveByteOpCode                  *MOVE.B opcode
00001640  BA3C 0001                682      CMP.B   #1,D5
00001644  6600 0036                683      BNE     moveWordOpCode 
00001648                           684  
00001648                           685  moveByteMethod                  *MOVE.B output
00001648  43F9 000020FB            686      LEA     outputMOVE,A1       *Outputs "MOVE" onto console
0000164E  103C 000E                687      MOVE.B  #14,D0
00001652  4E4F                     688      TRAP    #15
00001654                           689      
00001654  43F9 00002184            690      LEA     outputByte,A1       *Outputs ".B" onto console
0000165A  103C 000E                691      MOVE.B  #14,D0
0000165E  4E4F                     692      TRAP    #15
00001660                           693      
00001660  4EB9 00001ED0            694      JSR     sourceEA            *Jump to subroutine sourceEA
00001666                           695      
00001666  43F9 000021AA            696      LEA     outputComma,A1      *Outputs a comma onto console
0000166C  103C 000E                697      MOVE.B  #14,D0
00001670  4E4F                     698      TRAP    #15
00001672                           699      
00001672  4EB9 00002060            700      JSR     moveDestinationEA   *Jump to subroutine moveDestinationEA
00001678                           701      
00001678  6000 0A38                702      BRA     DONE                *Yay done
0000167C                           703      
0000167C                           704  
0000167C                           705  moveWordOpCode                  *MOVE.W opcode
0000167C  BA3C 0003                706      CMP.B   #3,D5
00001680  6600 005A                707      BNE     moveLongOpCode
00001684                           708     
00001684                           709  moveWordMethod                  *MOVE.W output
00001684  3404                     710      MOVE.W  D4,D2               *D4 has the original word
00001686  323C 000A                711      MOVE.W  #10,D1              *Move the value 10 into D1 since ROL has issues with
0000168A  E37A                     712      ROL.W   D1,D2               *   immediate values > 8
0000168C                           713      
0000168C  B47C 0001                714      CMP.W   #1,D2               *If the rotated value is a 1, it's a MOVEA.W
00001690  6700 0012                715      BEQ     moveAWordMethod    
00001694                           716      
00001694  43F9 000020FB            717      LEA     outputMOVE,A1       *Outputs "MOVE." onto console
0000169A  103C 000E                718      MOVE.B  #14,D0
0000169E  4E4F                     719      TRAP    #15
000016A0  6000 0012                720      BRA     moveWordMethodpt2   *Go to the rest of the method~
000016A4                           721      
000016A4                           722  moveAWordMethod                 *MOVEA.W opcode
000016A4  43F9 00002100            723      LEA     outputMOVEA,A1      *Outputs "MOVEA" onto console
000016AA  103C 000E                724      MOVE.B  #14,D0
000016AE  4E4F                     725      TRAP    #15
000016B0  6000 0002                726      BRA     moveWordMethodpt2   *Go to the rest of the method~
000016B4                           727      
000016B4                           728  moveWordMethodpt2               *Part 2 of the MOVE/MOVEA.W series
000016B4  43F9 00002188            729      LEA     outputWord,A1       *Outputs ".W" onto console
000016BA  103C 000E                730      MOVE.B  #14,D0
000016BE  4E4F                     731      TRAP    #15
000016C0                           732      
000016C0  4EB9 00001ED0            733      JSR     sourceEA            *Yay subroutines
000016C6                           734      
000016C6  43F9 000021AA            735      LEA     outputComma,A1      *outputs a comma onto console
000016CC  103C 000E                736      MOVE.B  #14,D0
000016D0  4E4F                     737      TRAP    #15
000016D2                           738      
000016D2  4EB9 00002060            739      JSR     moveDestinationEA   *Gotta check the destination~
000016D8                           740  
000016D8  6000 09D8                741      BRA     DONE                *I'm done, bra
000016DC                           742  
000016DC                           743  moveLongOpCode                  *MOVE.L opcode
000016DC  BA3C 0002                744      CMP.B   #2,D5
000016E0  6600 005C                745      BNE     addOpCode
000016E4                           746      
000016E4                           747  moveLongOpCodeMethod            *MOVE.L output
000016E4  340A                     748      MOVE.W  A2,D2               *Gotta check if it's actually a MOVEA
000016E6  323C 000A                749      MOVE.W  #10,D1
000016EA  E37A                     750      ROL.W   D1,D2
000016EC                           751      
000016EC  B47C 0001                752      CMP.W   #1,D2
000016F0  6700 0012                753      BEQ     moveALongMethod   
000016F4                           754  
000016F4  43F9 000020FB            755      LEA     outputMOVE,A1       *outputs "MOVE" onto console
000016FA  103C 000E                756      MOVE.B  #14,D0
000016FE  4E4F                     757      TRAP    #15
00001700                           758      
00001700  6000 0012                759      BRA     moveLongMethodpt2   *Go to Part 2 of the MOVE series~
00001704                           760      
00001704                           761  moveALongMethod                 *MOVEA.L output
00001704  43F9 00002100            762      LEA     outputMOVEA,A1      *Outputs "MOVEA" onto console
0000170A  103C 000E                763      MOVE.B  #14,D0
0000170E  4E4F                     764      TRAP    #15
00001710  6000 0002                765      BRA     moveLongMethodpt2   *Go to part 2~
00001714                           766      
00001714                           767  moveLongMethodpt2               *Part 2, the sequel(SQL?)
00001714                           768      
00001714  43F9 0000218C            769      LEA     outputLong,A1       *Outputs ".L" onto console
0000171A  103C 000E                770      MOVE.B  #14,D0
0000171E  4E4F                     771      TRAP    #15
00001720                           772      
00001720  5207                     773      ADD.B   #1,D7
00001722                           774      
00001722  4EB9 00001ED0            775      JSR     sourceEA            *Go output source
00001728                           776      
00001728  43F9 000021AA            777      LEA     outputComma,A1      *Yay commas
0000172E  103C 000E                778      MOVE.B  #14,D0
00001732  4E4F                     779      TRAP    #15
00001734                           780      
00001734  4EB9 00002060            781      JSR     moveDestinationEA    *Output destination
0000173A  6000 0976                782      BRA     DONE
0000173E                           783  
0000173E                           784  addOpCode                        *ADD opcode
0000173E  BA3C 000D                785      CMP.B   #13,D5
00001742  6600 0040                786      BNE     subOpCode    
00001746                           787      
00001746                           788  addMethod                        *ADD output
00001746  43F9 000020EC            789      LEA     outputADD,A1         *Outputs "ADD" onto console
0000174C  103C 000E                790      MOVE.B  #14,D0
00001750  4E4F                     791      TRAP    #15
00001752                           792      
00001752  4EB9 00001E20            793      JSR     dotOpMode           *Checks if it's a byte,word, or long
00001758                           794      
00001758  BC3C 0001                795      CMP.B   #1,D6               *If D6 == 1, the data register is the source
0000175C  6700 068A                796      BEQ     altOrder            *   D6 was decided in dotOpMode(?)
00001760                           797      
00001760  BC3C 0002                798      CMP.B   #2,D6
00001764  6700 069E                799      BEQ     addaOrder           *go do ADDA stuff
00001768                           800      
00001768  4EB9 00001ED0            801      JSR     sourceEA            *outputs what the source is
0000176E                           802      
0000176E  43F9 000021AA            803      LEA     outputComma,A1      *Commas~~~
00001774  103C 000E                804      MOVE.B  #14,D0
00001778  4E4F                     805      TRAP    #15
0000177A                           806      
0000177A  4EB9 00002034            807      JSR     addDestinationEA       *outputs what the destination is
00001780                           808      
00001780  6000 0930                809      BRA     DONE
00001784                           810      
00001784                           811  subOpCode
00001784  BA3C 0009                812      CMP.B   #9,D5               *is it SUB?
00001788  6600 0038                813      BNE     subQOpCode          *not SUB, check if SUBQ
0000178C                           814  
0000178C                           815  subMethod
0000178C  43F9 000020F2            816      LEA     outputSUB,A1        *output SUB to the console
00001792  103C 000E                817      MOVE.B  #14,D0  
00001796  4E4F                     818      TRAP    #15
00001798                           819  
00001798  4EB9 00001E20            820      JSR     dotOpMode           *check if its a B,W, or L
0000179E                           821  
0000179E  BC3C 0001                822      CMP.B   #1,D6               *if D6 == 1, the data register is the source
000017A2  6700 0644                823      BEQ     altOrder
000017A6                           824  
000017A6  4EB9 00001ED0            825      JSR     sourceEA            *outputs what the source is
000017AC                           826  
000017AC  43F9 000021AA            827      LEA     outputComma,A1      *commas
000017B2  103C 000E                828      MOVE.B  #14,D0
000017B6  4E4F                     829      TRAP    #15
000017B8                           830  
000017B8  4EB9 00002034            831      JSR     addDestinationEA    *outputs what ths destination is
000017BE                           832  
000017BE  6000 08F2                833      BRA     DONE                
000017C2                           834  
000017C2                           835  subQOpCode
000017C2  BA3C 0005                836      CMP.B   #5,D5               *is it SUBQ?
000017C6  6600 008A                837      BNE     orOpCode            *check if its DIVS.W
000017CA                           838      
000017CA                           839  subQMethod
000017CA  43F9 000020F6            840      LEA     outputSUBQ,A1       *output SUBQ
000017D0  103C 000E                841      MOVE.B  #14,D0
000017D4  4E4F                     842      TRAP    #15
000017D6                           843      
000017D6  3604                     844      MOVE.W  D4,D3               *move original word from D4
000017D8  123C 000A                845      MOVE.B  #10,D1              *hacks
000017DC  E37B                     846      ROL.W   D1,D3               *ROL by 10
000017DE  C6BC 00000003            847      AND.L   #00000003,D3        *Mask 
000017E4  4EB9 00001E94            848      JSR     byteOpMode          *check if B,W,L
000017EA                           849      
000017EA  4EB9 00001806            850      JSR     subQData            *outputs #1-#8
000017F0                           851      
000017F0  43F9 000021AA            852      LEA     outputComma,A1      *commas
000017F6  103C 000E                853      MOVE.B  #14,D0
000017FA  4E4F                     854      TRAP    #15
000017FC                           855      
000017FC  4EB9 00001ED0            856      JSR     sourceEA            *get the source
00001802                           857      
00001802  6000 08AE                858      BRA     DONE
00001806                           859      
00001806                           860      
00001806                           861  subQData
00001806  3604                     862      MOVE.W  D4,D3               *move original word from D4
00001808  EF5B                     863      ROL.W   #7,D3               *ROL 7
0000180A  C6BC 00000007            864      AND.L   #$00000007,D3       *mask the bits
00001810                           865      
00001810  B63C 0000                866      CMP.B   #0,D3               *if its 0 display 8
00001814  6700 0022                867      BEQ     display8ForSubQ
00001818                           868      
00001818  B63C 0008                869      CMP.B   #8,D3
0000181C  6C00 05AC                870      BGE     dataOpCode
00001820                           871      
00001820  43F9 0000219E            872      LEA     outputPound,A1      *output #
00001826  103C 000E                873      MOVE.B  #14,D0
0000182A  4E4F                     874      TRAP    #15
0000182C                           875      
0000182C  4281                     876      CLR.L   D1
0000182E  1203                     877      MOVE.B  D3,D1               *output 1-7
00001830  103C 0003                878      MOVE.B  #3,D0
00001834  4E4F                     879      TRAP    #15
00001836                           880      
00001836  4E75                     881      RTS                         *return to subQmethod
00001838                           882      
00001838                           883  display8ForSubQ
00001838                           884  
00001838  43F9 0000219E            885      LEA     outputPound,A1      *output #
0000183E  103C 000E                886      MOVE.B  #14,D0
00001842  4E4F                     887      TRAP    #15
00001844  4281                     888      CLR.L   D1
00001846  123C 0008                889      MOVE.B  #8,D1               *output 8
0000184A  103C 0003                890      MOVE.B  #3,D0
0000184E  4E4F                     891      TRAP    #15
00001850                           892      
00001850  4E75                     893      RTS                         *return to subQMethod
00001852                           894  
00001852                           895  orOpCode
00001852  BA3C 0008                896      CMP.B   #8,D5   
00001856  6600 008A                897      BNE     eorOpCode
0000185A                           898      
0000185A  2A04                     899      MOVE.L  D4,D5
0000185C  720A                     900      MOVE.L  #10,D1
0000185E  E37D                     901      ROL.W   D1,D5
00001860                           902      
00001860  CABC 00000007            903      AND.L   #$00000007,D5
00001866                           904      
00001866  BA3C 0007                905      CMP.B   #7,D5
0000186A  6700 0038                906      BEQ     divsWOpCode
0000186E                           907      
0000186E                           908  orMethod
0000186E  43F9 0000214D            909      LEA     outputOR,A1
00001874  103C 000E                910      MOVE.B  #14,D0
00001878  4E4F                     911      TRAP    #15
0000187A                           912      
0000187A  4EB9 00001E20            913      JSR     dotOpMode
00001880                           914      
00001880  BC3C 0001                915      CMP.B   #1,D6
00001884  6700 0562                916      BEQ     altOrder
00001888                           917      
00001888  4EB9 00001ED0            918      JSR     sourceEA
0000188E                           919      
0000188E  43F9 000021AA            920      LEA     outputComma,A1
00001894  103C 000E                921      MOVE.B  #14,D0
00001898  4E4F                     922      TRAP    #15
0000189A                           923      
0000189A  4EB9 00002034            924      JSR     addDestinationEA
000018A0                           925      
000018A0  6000 0810                926      BRA     DONE
000018A4                           927      
000018A4                           928  divsWOpCode
000018A4                           929  *    CMP.B   #8,D5
000018A4                           930  *    BEQ     divsWCheck          *bits 8,7,6 need to make 7 to be DIVSW
000018A4                           931  *    BRA     eorOpCode
000018A4                           932  *    
000018A4                           933  divsWCheck
000018A4  3604                     934      MOVE.W  D4,D3
000018A6  143C 000A                935      MOVE.B  #10,D2
000018AA  E57B                     936      ROL.W   D2,D3
000018AC  C6BC 00000007            937      AND.L   #$00000007,D3
000018B2  B63C 0007                938      CMP.B   #7,D3
000018B6  6600 07FA                939      BNE     DONE
000018BA                           940      
000018BA  43F9 0000211E            941      LEA     outputDIVSW,A1
000018C0  103C 000E                942      MOVE.B  #14,D0
000018C4  4E4F                     943      TRAP    #15
000018C6                           944      
000018C6  4EB9 00001ED0            945      JSR     sourceEA 
000018CC                           946      
000018CC  43F9 000021AA            947      LEA     outputComma,A1
000018D2  103C 000E                948      MOVE.B  #14,D0
000018D6  4E4F                     949      TRAP    #15
000018D8                           950      
000018D8  4EB9 00002034            951      JSR     addDestinationEA
000018DE                           952      
000018DE  6000 07D2                953      BRA     DONE
000018E2                           954      
000018E2                           955  eorOpCode
000018E2  BA3C 000B                956      CMP.B   #11,D5
000018E6  6600 0078                957      BNE     shiftsOpCode
000018EA                           958      
000018EA  2A04                     959      MOVE.L  D4,D5
000018EC  E15D                     960      ROL.W   #8,D5
000018EE  CABC 00000001            961      AND.L   #$00000001,D5
000018F4                           962      
000018F4                           963      
000018F4                           964  eorMethod
000018F4  BA3C 0001                965      CMP.B   #1,D5
000018F8  6600 0030                966      BNE     cmpOpCode
000018FC                           967      
000018FC  43F9 00002150            968      LEA     outputEOR,A1
00001902  103C 000E                969      MOVE.B  #14,D0
00001906  4E4F                     970      TRAP    #15
00001908                           971      
00001908  4EB9 00001E20            972      JSR     dotOpMode
0000190E                           973      
0000190E  4EB9 00002034            974      JSR     addDestinationEA
00001914                           975      
00001914  43F9 000021AA            976      LEA     outputComma,A1
0000191A  103C 000E                977      MOVE.B  #14,D0
0000191E  4E4F                     978      TRAP    #15
00001920                           979      
00001920  4EB9 00001ED0            980      JSR     sourceEA
00001926                           981      
00001926  6000 078A                982      BRA     DONE    
0000192A                           983  
0000192A                           984  cmpOpCode
0000192A  BA3C 0000                985      CMP.B   #0,D5
0000192E  6600 0782                986      BNE     DONE
00001932                           987      
00001932  43F9 00002159            988      LEA     outputCMP,A1
00001938  103C 000E                989      MOVE.B  #14,D0
0000193C  4E4F                     990      TRAP    #15
0000193E                           991      
0000193E  4EB9 00001E20            992      JSR     dotOpMode
00001944                           993      
00001944  4EB9 00001ED0            994      JSR     sourceEA
0000194A                           995      
0000194A  43F9 000021AA            996      LEA     outputComma,A1
00001950  103C 000E                997      MOVE.B  #14,D0
00001954  4E4F                     998      TRAP    #15
00001956                           999      
00001956  4EB9 00002034           1000      JSR     addDestinationEA
0000195C                          1001      
0000195C  6000 0754               1002      BRA     DONE
00001960                          1003     
00001960                          1004  shiftsOpCode
00001960  BA3C 000E               1005      CMP.B   #14,D5
00001964  6600 0212               1006      BNE     mulsWOpCode
00001968                          1007      
00001968                          1008  shiftMemoryShift
00001968  2A04                    1009      MOVE.L  D4,D5
0000196A  EC5D                    1010      ROR.W   #6,D5
0000196C  CABC 00000003           1011      AND.L   #$00000003,D5
00001972                          1012      
00001972  BA3C 0003               1013      CMP.B   #3,D5
00001976  6600 009C               1014      BNE     shiftRegisterShift
0000197A                          1015      
0000197A  2A04                    1016      MOVE.L  D4,D5
0000197C  EF5D                    1017      ROL.W   #7,D5
0000197E  CABC 00000003           1018      AND.L   #$00000003,D5
00001984                          1019      
00001984                          1020  memoryLSD
00001984  BA3C 0001               1021      CMP.B   #1,D5
00001988  6600 002A               1022      BNE     memoryASD
0000198C                          1023      
0000198C  43F9 00002163           1024      LEA     outputLS,A1
00001992  103C 000E               1025      MOVE.B  #14,D0
00001996  4E4F                    1026      TRAP    #15
00001998                          1027      
00001998  4EB9 00001AD2           1028      JSR     leftRight
0000199E                          1029      
0000199E  43F9 00002188           1030      LEA     outputWord,A1
000019A4  103C 000E               1031      MOVE.B  #14,D0
000019A8  4E4F                    1032      TRAP    #15
000019AA                          1033      
000019AA  4EB9 00001ED0           1034      JSR     sourceEA
000019B0                          1035      
000019B0  6000 0700               1036      BRA     DONE
000019B4                          1037      
000019B4                          1038  memoryASD
000019B4  BA3C 0000               1039      CMP.B   #0,D5
000019B8  6600 002A               1040      BNE     memoryROD
000019BC                          1041      
000019BC  43F9 00002166           1042      LEA     outputAS,A1
000019C2  103C 000E               1043      MOVE.B  #14,D0
000019C6  4E4F                    1044      TRAP    #15
000019C8                          1045      
000019C8  4EB9 00001AD2           1046      JSR     leftRight
000019CE                          1047      
000019CE  43F9 00002188           1048      LEA     outputWord,A1
000019D4  103C 000E               1049      MOVE.B  #14,D0
000019D8  4E4F                    1050      TRAP    #15
000019DA                          1051      
000019DA  4EB9 00001ED0           1052      JSR     sourceEA
000019E0                          1053      
000019E0  6000 06D0               1054      BRA     DONE
000019E4                          1055      
000019E4                          1056  memoryROD
000019E4  BA3C 0003               1057      CMP.B   #3,D5
000019E8  6600 03E0               1058      BNE     dataOpCode
000019EC                          1059      
000019EC  43F9 00002169           1060      LEA     outputRO,A1
000019F2  103C 000E               1061      MOVE.B  #14,D0
000019F6  4E4F                    1062      TRAP    #15
000019F8                          1063      
000019F8  4EB9 00001AD2           1064      JSR     leftRight
000019FE                          1065      
000019FE  43F9 00002188           1066      LEA     outputWord,A1
00001A04  103C 000E               1067      MOVE.B  #14,D0
00001A08  4E4F                    1068      TRAP    #15
00001A0A                          1069      
00001A0A  4EB9 00001ED0           1070      JSR     sourceEA
00001A10                          1071      
00001A10  6000 06A0               1072      BRA     DONE
00001A14                          1073      
00001A14                          1074      
00001A14                          1075      
00001A14                          1076  shiftRegisterShift
00001A14  2A04                    1077      MOVE.L  D4,D5
00001A16  E65D                    1078      ROR.W   #3,D5
00001A18  CABC 00000003           1079      AND.L   #$00000003,D5
00001A1E                          1080      
00001A1E                          1081  lsdOpCode
00001A1E  BA3C 0001               1082      CMP.B   #1,D5
00001A22  6600 0036               1083      BNE     asdOpCode
00001A26                          1084      
00001A26                          1085  lsdMethod
00001A26  43F9 00002163           1086      LEA     outputLS,A1
00001A2C  103C 000E               1087      MOVE.B  #14,D0
00001A30  4E4F                    1088      TRAP    #15
00001A32                          1089      
00001A32  4EB9 00001AD2           1090      JSR     leftRight
00001A38                          1091      
00001A38  4EB9 00001E20           1092      JSR     dotOpMode
00001A3E                          1093      
00001A3E  4EB9 00001B00           1094      JSR     shiftSourceEA
00001A44                          1095      
00001A44  43F9 000021AA           1096      LEA     outputComma,A1
00001A4A  103C 000E               1097      MOVE.B  #14,D0
00001A4E  4E4F                    1098      TRAP    #15
00001A50                          1099      
00001A50  4EB9 00001B5A           1100      JSR     shiftDestEA
00001A56                          1101      
00001A56  6000 065A               1102      BRA     DONE
00001A5A                          1103   
00001A5A                          1104  asdOpCode
00001A5A  BA3C 0000               1105      CMP.B   #0,D5
00001A5E  6600 0036               1106      BNE     rodOpCode
00001A62                          1107      
00001A62  43F9 00002166           1108      LEA     outputAS,A1
00001A68  103C 000E               1109      MOVE.B  #14,D0
00001A6C  4E4F                    1110      TRAP    #15
00001A6E                          1111      
00001A6E  4EB9 00001AD2           1112      JSR     leftRight
00001A74                          1113      
00001A74  4EB9 00001E20           1114      JSR     dotOpMode
00001A7A                          1115      
00001A7A  4EB9 00001B00           1116      JSR     shiftSourceEA
00001A80                          1117      
00001A80  43F9 000021AA           1118      LEA     outputComma,A1
00001A86  103C 000E               1119      MOVE.B  #14,D0
00001A8A  4E4F                    1120      TRAP    #15
00001A8C                          1121      
00001A8C  4EB9 00001B5A           1122      JSR     shiftDestEA    
00001A92                          1123      
00001A92  6000 061E               1124      BRA     DONE
00001A96                          1125      
00001A96                          1126  rodOpCode
00001A96  BA3C 0003               1127      CMP.B   #3,D5
00001A9A  6600 0616               1128      BNE     DONE
00001A9E                          1129      
00001A9E  43F9 00002169           1130      LEA     outputRO,A1
00001AA4  103C 000E               1131      MOVE.B  #14,D0
00001AA8  4E4F                    1132      TRAP    #15
00001AAA                          1133      
00001AAA  4EB9 00001AD2           1134      JSR     leftRight
00001AB0                          1135      
00001AB0  4EB9 00001E20           1136      JSR     dotOpMode
00001AB6                          1137      
00001AB6  4EB9 00001B00           1138      JSR     shiftSourceEA
00001ABC                          1139      
00001ABC  43F9 000021AA           1140      LEA     outputComma,A1
00001AC2  103C 000E               1141      MOVE.B  #14,D0
00001AC6  4E4F                    1142      TRAP    #15
00001AC8                          1143      
00001AC8  4EB9 00001B5A           1144      JSR     shiftDestEA
00001ACE                          1145      
00001ACE  6000 05E2               1146      BRA     DONE
00001AD2                          1147      
00001AD2                          1148  leftRight
00001AD2  2604                    1149      MOVE.L  D4,D3
00001AD4  E15B                    1150      ROL.W   #8,D3
00001AD6  C6BC 00000001           1151      AND.L   #$00000001,D3
00001ADC                          1152  
00001ADC  B63C 0000               1153      CMP.B   #0,D3
00001AE0  6700 0010               1154      BEQ     rightRight
00001AE4                          1155      
00001AE4  43F9 0000216C           1156      LEA     outputLeft,A1
00001AEA  103C 000E               1157      MOVE.B  #14,D0
00001AEE  4E4F                    1158      TRAP    #15
00001AF0                          1159      
00001AF0  4E75                    1160      RTS
00001AF2                          1161      
00001AF2                          1162  rightRight
00001AF2  43F9 0000216E           1163      LEA     outputRight,A1
00001AF8  103C 000E               1164      MOVE.B  #14,D0
00001AFC  4E4F                    1165      TRAP    #15
00001AFE                          1166      
00001AFE  4E75                    1167      RTS
00001B00                          1168      
00001B00                          1169  shiftSourceEA
00001B00  2404                    1170      MOVE.L  D4,D2
00001B02  EA5A                    1171      ROR.W   #5,D2
00001B04  C4BC 00000001           1172      AND.L   #$00000001,D2
00001B0A                          1173  
00001B0A  2604                    1174      MOVE.L  D4,D3
00001B0C  EF5B                    1175      ROL.W   #7,D3
00001B0E  C6BC 00000007           1176      AND.L   #$00000007,D3
00001B14                          1177      
00001B14  B43C 0000               1178      CMP.B   #0,D2
00001B18  6700 0018               1179      BEQ     shiftImmediateEA
00001B1C                          1180      
00001B1C  43F9 0000219C           1181      LEA     outputDn,A1
00001B22  103C 000E               1182      MOVE.B  #14,D0
00001B26  4E4F                    1183      TRAP    #15
00001B28                          1184      
00001B28  2203                    1185      MOVE.L  D3,D1
00001B2A  103C 0003               1186      MOVE.B  #3,D0
00001B2E  4E4F                    1187      TRAP    #15
00001B30                          1188      
00001B30  4E75                    1189      RTS
00001B32                          1190      
00001B32                          1191  shiftImmediateEA
00001B32  43F9 0000219E           1192      LEA     outputPound,A1
00001B38  103C 000E               1193      MOVE.B  #14,D0
00001B3C  4E4F                    1194      TRAP    #15
00001B3E                          1195      
00001B3E  B63C 0000               1196      CMP.B   #0,D3
00001B42  6700 000C               1197      BEQ     shiftImmediateEight
00001B46                          1198      
00001B46  2203                    1199      MOVE.L  D3,D1
00001B48  103C 0003               1200      MOVE.B  #3,D0
00001B4C  4E4F                    1201      TRAP    #15
00001B4E                          1202      
00001B4E  4E75                    1203      RTS
00001B50                          1204      
00001B50                          1205  shiftImmediateEight
00001B50  7208                    1206      MOVE.L  #8,D1
00001B52  103C 0003               1207      MOVE.B  #3,D0
00001B56  4E4F                    1208      TRAP    #15
00001B58                          1209      
00001B58  4E75                    1210      RTS
00001B5A                          1211      
00001B5A                          1212  shiftDestEA
00001B5A  2604                    1213      MOVE.L  D4,D3
00001B5C  C6BC 00000007           1214      AND.L   #$00000007,D3
00001B62                          1215      
00001B62  43F9 0000219C           1216      LEA     outputDn,A1
00001B68  103C 000E               1217      MOVE.B  #14,D0
00001B6C  4E4F                    1218      TRAP    #15
00001B6E                          1219      
00001B6E  2203                    1220      MOVE.L  D3,D1
00001B70  103C 0003               1221      MOVE.B  #3,D0
00001B74  4E4F                    1222      TRAP    #15
00001B76                          1223      
00001B76  4E75                    1224      RTS
00001B78                          1225      
00001B78                          1226  mulsWOpCode
00001B78  BA3C 000C               1227      CMP.B   #12,D5
00001B7C  6600 004A               1228      BNE     negOpCode
00001B80  3604                    1229      MOVE.W  D4,D3
00001B82  EC5B                    1230      ROR.W   #6,D3
00001B84  C63C 0007               1231      AND.B   #7,D3
00001B88  B63C 0007               1232      CMP.B   #7,D3
00001B8C  6600 023C               1233      BNE     dataOpCode   
00001B90                          1234  
00001B90                          1235  mulsWMethod
00001B90  3604                    1236      MOVE.W  D4,D3
00001B92  E61B                    1237      ROR.B   #3,D3
00001B94  C63C 0007               1238      AND.B   #7,D3
00001B98  B63C 0001               1239      CMP.B   #1,D3
00001B9C  6700 022C               1240      BEQ     dataOpCode
00001BA0                          1241      
00001BA0                          1242  mulsOutput    
00001BA0  43F9 00002118           1243      LEA     outputMULS,A1
00001BA6  103C 000E               1244      MOVE.B  #14,D0
00001BAA  4E4F                    1245      TRAP    #15
00001BAC                          1246      
00001BAC  4EB9 00001ED0           1247      JSR     sourceEA
00001BB2                          1248      
00001BB2  43F9 000021AA           1249      LEA     outputComma,A1
00001BB8  103C 000E               1250      MOVE.B  #14,D0
00001BBC  4E4F                    1251      TRAP    #15
00001BBE                          1252      
00001BBE  4EB9 00002034           1253      JSR     addDestinationEA
00001BC4                          1254      
00001BC4  6000 04EC               1255      BRA     DONE
00001BC8                          1256      
00001BC8                          1257  *mulsLOpCode
00001BC8                          1258  *    MOVE.W  D4,D3
00001BC8                          1259  *    MOVE.B  #10,D2
00001BC8                          1260  *    ROL.W   D2,D3
00001BC8                          1261  *    AND.W   #$01FF,D3
00001BC8                          1262  *    CMP.W   #304,D3
00001BC8                          1263  *    BNE     negOpCode
00001BC8                          1264      
00001BC8                          1265  mulsLMethod
00001BC8                          1266          
00001BC8                          1267      
00001BC8                          1268  negOpCode
00001BC8  3604                    1269      MOVE.W  D4,D3
00001BCA  E15B                    1270      ROL.W   #8,D3
00001BCC  B63C 0044               1271      CMP.B   #$44,D3
00001BD0  6600 002E               1272      BNE     braOpCode
00001BD4                          1273      
00001BD4                          1274  negMethod
00001BD4  43F9 00002140           1275      LEA     outputNEG,A1        *output NEG to the console
00001BDA  103C 000E               1276      MOVE.B  #14,D0
00001BDE  4E4F                    1277      TRAP    #15
00001BE0                          1278      
00001BE0  4283                    1279      CLR.L   D3
00001BE2  3604                    1280      MOVE.W  D4,D3               *move original word from D4
00001BE4  123C 000A               1281      MOVE.B  #10,D1              *hacks
00001BE8  E37B                    1282      ROL.W   D1,D3               *ROL by 10
00001BEA  C6BC 00000003           1283      AND.L   #00000003,D3        *Mask 
00001BF0  4EB9 00001E94           1284      JSR     byteOpMode          *check if B,W,L
00001BF6                          1285          
00001BF6  4EB9 00001ED0           1286      JSR     sourceEA
00001BFC                          1287      
00001BFC  6000 04B4               1288      BRA     DONE
00001C00                          1289  
00001C00                          1290  braOpCode
00001C00  3604                    1291      MOVE.W  D4,D3               *move the opcode word into D3
00001C02  E15B                    1292      ROL.W   #8,D3               *isolate the last byte
00001C04  B63C 0060               1293      CMP.B   #$60,D3             *is it a BRA?
00001C08  6600 0154               1294      BNE     bccOpCode           *its data then
00001C0C                          1295      
00001C0C                          1296  braMethod
00001C0C  43F9 00002144           1297      LEA     outputBRA,A1        
00001C12  103C 000E               1298      MOVE.B  #14,D0
00001C16  4E4F                    1299      TRAP    #15
00001C18                          1300  
00001C18                          1301  
00001C18                          1302  bccDisplacement    
00001C18  1604                    1303      MOVE.B  D4,D3
00001C1A  C67C 00FF               1304      AND.W   #$00FF,D3
00001C1E  B63C 0000               1305      CMP.B   #$00,D3
00001C22  6700 0048               1306      BEQ     bitDisplacement16
00001C26  B63C 00FF               1307      CMP.B   #$FF,D3
00001C2A  6700 00B6               1308      BEQ     bitDisplacement32
00001C2E  E11B                    1309      ROL.B   #8,D3
00001C30  0A43 00FF               1310      EOR.W   #$FF,D3
00001C34  5243                    1311      ADD.W   #1,D3
00001C36                          1312      
00001C36  43F9 000021B7           1313      LEA     outputNegSign,A1
00001C3C  103C 000E               1314      MOVE.B  #14,D0
00001C40  4E4F                    1315      TRAP    #15
00001C42                          1316      
00001C42  3203                    1317      MOVE.W  D3,D1
00001C44  103C 0003               1318      MOVE.B  #3,D0
00001C48  4E4F                    1319      TRAP    #15
00001C4A                          1320      
00001C4A  43F9 000021B2           1321      LEA     outputSpace,A1
00001C50  103C 000E               1322      MOVE.B  #14,D0
00001C54  4E4F                    1323      TRAP    #15
00001C56                          1324      
00001C56  304D                    1325      MOVE.W  A5,A0
00001C58  90C3                    1326      SUBA.W  D3,A0
00001C5A  3208                    1327      MOVE.W  A0,D1
00001C5C  103C 000F               1328      MOVE.B  #15,D0
00001C60  143C 0010               1329      MOVE.B  #16,D2
00001C64  4E4F                    1330      TRAP    #15
00001C66                          1331      
00001C66  304C                    1332      MOVE.W  A4,A0
00001C68                          1333      
00001C68                          1334      
00001C68  6000 0448               1335      BRA     DONE
00001C6C                          1336     
00001C6C                          1337  bitDisplacement16
00001C6C                          1338      
00001C6C  304D                    1339      MOVE.W  A5,A0
00001C6E  381D                    1340      MOVE.W  (A5)+,D4
00001C70  3604                    1341      MOVE.W  D4,D3
00001C72  E95B                    1342      ROL.W   #4,D3
00001C74  C67C 000F               1343      AND.W   #$000F,D3
00001C78  B67C 0008               1344      CMP.W   #8,D3
00001C7C  6C00 002A               1345      BGE     negBit16
00001C80                          1346      
00001C80  3204                    1347      MOVE.W  D4,D1
00001C82  103C 0003               1348      MOVE.B  #3,D0
00001C86  4E4F                    1349      TRAP    #15
00001C88                          1350      
00001C88  43F9 000021B2           1351      LEA     outputSpace,A1
00001C8E  103C 000E               1352      MOVE.B  #14,D0
00001C92  4E4F                    1353      TRAP    #15
00001C94                          1354      
00001C94  D0C4                    1355      ADDA.W  D4,A0
00001C96  3208                    1356      MOVE.W  A0,D1
00001C98  103C 000F               1357      MOVE.B  #15,D0
00001C9C  143C 0010               1358      MOVE.B  #16,D2
00001CA0  4E4F                    1359      TRAP    #15
00001CA2                          1360      
00001CA2  304C                    1361      MOVE.W  A4,A0
00001CA4                          1362      
00001CA4  6000 040C               1363      BRA DONE
00001CA8                          1364      
00001CA8                          1365  negBit16
00001CA8                          1366  
00001CA8  0A44 FFFF               1367      EOR.W   #$FFFF,D4
00001CAC  5244                    1368      ADD.W   #1,D4
00001CAE                          1369      
00001CAE  43F9 000021B7           1370      LEA     outputNegSign,A1
00001CB4  103C 000E               1371      MOVE.B  #14,D0
00001CB8  4E4F                    1372      TRAP    #15
00001CBA                          1373      
00001CBA  3204                    1374      MOVE.W  D4,D1
00001CBC  103C 0003               1375      MOVE.B  #3,D0
00001CC0  4E4F                    1376      TRAP    #15
00001CC2                          1377      
00001CC2  43F9 000021B2           1378      LEA     outputSpace,A1
00001CC8  103C 000E               1379      MOVE.B  #14,D0
00001CCC  4E4F                    1380      TRAP    #15
00001CCE                          1381      
00001CCE  90C4                    1382      SUBA.W  D4,A0
00001CD0  3208                    1383      MOVE.W  A0,D1
00001CD2  103C 000F               1384      MOVE.B  #15,D0
00001CD6  143C 0010               1385      MOVE.B  #16,D2
00001CDA  4E4F                    1386      TRAP    #15
00001CDC                          1387      
00001CDC  304C                    1388      MOVE.W  A4,A0
00001CDE                          1389      
00001CDE  6000 03D2               1390      BRA     DONE
00001CE2                          1391      
00001CE2                          1392  bitDisplacement32
00001CE2                          1393  
00001CE2  204D                    1394      MOVE.L  A5,A0
00001CE4  281D                    1395      MOVE.L  (A5)+,D4
00001CE6  2604                    1396      MOVE.L  D4,D3
00001CE8  E95B                    1397      ROL.W   #4,D3
00001CEA  C6BC 0000000F           1398      AND.L   #$0000000F,D3
00001CF0  B6BC 00000008           1399      CMP.L   #8,D3
00001CF6  6C00 002A               1400      BGE     negBit32
00001CFA                          1401      
00001CFA  2204                    1402      MOVE.L  D4,D1
00001CFC  103C 0003               1403      MOVE.B  #3,D0
00001D00  4E4F                    1404      TRAP    #15
00001D02                          1405      
00001D02  43F9 000021B2           1406      LEA     outputSpace,A1
00001D08  103C 000E               1407      MOVE.B  #14,D0
00001D0C  4E4F                    1408      TRAP    #15
00001D0E                          1409      
00001D0E  D1C4                    1410      ADDA.L  D4,A0
00001D10  2208                    1411      MOVE.L  A0,D1
00001D12  103C 000F               1412      MOVE.B  #15,D0
00001D16  143C 0010               1413      MOVE.B  #16,D2
00001D1A  4E4F                    1414      TRAP    #15
00001D1C                          1415      
00001D1C  204C                    1416      MOVE.L  A4,A0
00001D1E                          1417      
00001D1E  6000 0392               1418      BRA DONE
00001D22                          1419  
00001D22                          1420  negBit32
00001D22                          1421  
00001D22  0A84 FFFFFFFF           1422      EOR.L   #$FFFFFFFF,D4
00001D28  5284                    1423      ADD.L   #1,D4
00001D2A                          1424      
00001D2A  43F9 000021B7           1425      LEA     outputNegSign,A1
00001D30  103C 000E               1426      MOVE.B  #14,D0
00001D34  4E4F                    1427      TRAP    #15
00001D36                          1428      
00001D36  2204                    1429      MOVE.L  D4,D1
00001D38  103C 0003               1430      MOVE.B  #3,D0
00001D3C  4E4F                    1431      TRAP    #15
00001D3E                          1432      
00001D3E  43F9 000021B2           1433      LEA     outputSpace,A1
00001D44  103C 000E               1434      MOVE.B  #14,D0
00001D48  4E4F                    1435      TRAP    #15
00001D4A                          1436      
00001D4A                          1437      *MOVE.L  A5,A0
00001D4A  91C4                    1438      SUBA.L  D4,A0
00001D4C  2208                    1439      MOVE.L  A0,D1
00001D4E  103C 000F               1440      MOVE.B  #15,D0
00001D52  143C 0010               1441      MOVE.B  #16,D2
00001D56  4E4F                    1442      TRAP    #15
00001D58                          1443      
00001D58  204C                    1444      MOVE.L  A4,A0
00001D5A                          1445      
00001D5A  6000 0356               1446      BRA     DONE
00001D5E                          1447      
00001D5E                          1448  bccOpCode
00001D5E  BA3C 0006               1449      CMP.B   #6,D5               *is it Bcc?
00001D62  6600 0066               1450      BNE     dataOpCode          *its data then
00001D66                          1451      
00001D66                          1452  bccMethod
00001D66  3604                    1453      MOVE.W  D4,D3
00001D68  E15B                    1454      ROL.W   #8,D3
00001D6A  C67C 000F               1455      AND.W   #$000F,D3
00001D6E  B63C 0005               1456      CMP.B   #5,D3
00001D72  6700 0016               1457      BEQ     bcs
00001D76  B63C 000C               1458      CMP.B   #$C,D3
00001D7A  6700 001E               1459      BEQ     bge
00001D7E  B63C 000D               1460      CMP.B   #$D,D3
00001D82  6700 0026               1461      BEQ     bct
00001D86  6000 0032               1462      BRA     bvc
00001D8A                          1463      
00001D8A                          1464  bcs
00001D8A  43F9 00002170           1465      LEA     outputBCS,A1
00001D90  103C 000E               1466      MOVE.B  #14,D0
00001D94  4E4F                    1467      TRAP    #15
00001D96                          1468      
00001D96  6000 FE80               1469      BRA     bccDisplacement
00001D9A                          1470      
00001D9A                          1471  bge
00001D9A  43F9 00002175           1472      LEA     outputBGE,A1
00001DA0  103C 000E               1473      MOVE.B  #14,D0
00001DA4  4E4F                    1474      TRAP    #15
00001DA6                          1475      
00001DA6  6000 FE70               1476      BRA     bccDisplacement
00001DAA                          1477  
00001DAA                          1478  bct
00001DAA  43F9 0000217A           1479      LEA     outputBCT,A1
00001DB0  103C 000E               1480      MOVE.B  #14,D0
00001DB4  4E4F                    1481      TRAP    #15
00001DB6                          1482      
00001DB6  6000 FE60               1483      BRA     bccDisplacement
00001DBA                          1484      
00001DBA                          1485  bvc
00001DBA  43F9 0000217F           1486      LEA     outputBVC,A1
00001DC0  103C 000E               1487      MOVE.B  #14,D0
00001DC4  4E4F                    1488      TRAP    #15
00001DC6                          1489      
00001DC6  6000 FE50               1490      BRA     bccDisplacement
00001DCA                          1491      
00001DCA                          1492  
00001DCA                          1493             
00001DCA                          1494  dataOpCode
00001DCA  4283                    1495      CLR.L   D3
00001DCC  43F9 0000213A           1496      LEA     outputData,A1
00001DD2  103C 000E               1497      MOVE.B  #14,D0
00001DD6  4E4F                    1498      TRAP    #15
00001DD8                          1499      
00001DD8  3215                    1500      MOVE.W  (A5),D1
00001DDA  103C 000F               1501      MOVE.B  #15,D0
00001DDE  143C 0010               1502      MOVE.B  #16,D2
00001DE2  4E4F                    1503      TRAP    #15
00001DE4                          1504      
00001DE4  6000 02CC               1505      BRA     DONE
00001DE8                          1506  
00001DE8                          1507  
00001DE8                          1508  altOrder                            *outputs the Dn as the source for ADD
00001DE8  4EB9 00002034           1509      JSR     addDestinationEA
00001DEE                          1510      
00001DEE  43F9 000021AA           1511      LEA     outputComma,A1
00001DF4  103C 000E               1512      MOVE.B  #14,D0
00001DF8  4E4F                    1513      TRAP    #15
00001DFA                          1514      
00001DFA  4EB9 00001ED0           1515      JSR     sourceEA
00001E00  6000 02B0               1516      BRA     DONE
00001E04                          1517      
00001E04                          1518  addaOrder                           *ADDA method
00001E04  4EB9 00001ED0           1519      JSR     sourceEA                *output source first
00001E0A                          1520      
00001E0A  43F9 000021AA           1521      LEA     outputComma,A1          *Comma
00001E10  103C 000E               1522      MOVE.B  #14,D0
00001E14  4E4F                    1523      TRAP    #15
00001E16                          1524      
00001E16  4EB9 0000207C           1525      JSR     addaDestEA              *Have to set destination mode in addaDestEA
00001E1C  6000 0294               1526      BRA     DONE
00001E20                          1527  
00001E20                          1528  
00001E20                          1529  dotOpMode                           *Checks if it's a Byte,Word, or Long for ADD and SUB
00001E20  3604                    1530      MOVE.W  D4,D3                   *Gets the original code from D4                 
00001E22  143C 000A               1531      MOVE.B  #10,D2                  *yay hacks
00001E26                          1532      
00001E26  E57B                    1533      ROL.W   D2,D3                   *Rotates the original left by 10 bits
00001E28  C6BC 00000007           1534      AND.L   #$00000007,D3           *mask it up
00001E2E                          1535      
00001E2E  B63C 0003               1536      CMP.B   #3,D3                   
00001E32  6C00 0006               1537      BGE     altOpMode               *if value is > 3, Dn is the source
00001E36                          1538      
00001E36  6000 005C               1539      BRA     byteOpMode    
00001E3A                          1540  
00001E3A                          1541  altOpMode                           *But wait, there's more!
00001E3A  B63C 0003               1542      CMP.B   #3,D3                   *If it's 3, it's an ADDA.W
00001E3E  6700 0016               1543      BEQ     addaWOpMode
00001E42                          1544      
00001E42  B63C 0007               1545      CMP.B   #7,D3                   *If it's a 7, it's an ADDA.L
00001E46  6700 002C               1546      BEQ     addaLOpMode             *Otherwise, it's just ADD with Dn in source
00001E4A                          1547      
00001E4A  1C3C 0001               1548      MOVE.B  #1,D6                   *D6 is 1 if Dn is the source
00001E4E  C63C 0003               1549      AND.B   #$3,D3                  *Mask it so it can continue with the output
00001E52  6000 0040               1550      BRA     byteOpMode              *without the meddling 2^2 bit
00001E56                          1551  
00001E56                          1552  addaWOpMode                         *It's an ADDA.W
00001E56  3C3C 0002               1553      MOVE.W  #2,D6
00001E5A                          1554      
00001E5A  43F9 000020F0           1555      LEA     outputADDA,A1
00001E60  103C 000E               1556      MOVE.B  #14,D0
00001E64  4E4F                    1557      TRAP    #15
00001E66                          1558      
00001E66  43F9 00002188           1559      LEA     outputWord,A1
00001E6C  103C 000E               1560      MOVE.B  #14,D0
00001E70  4E4F                    1561      TRAP    #15
00001E72                          1562      
00001E72  4E75                    1563      RTS
00001E74                          1564      
00001E74                          1565  addaLOpMode                         *It's an ADDA.L
00001E74  3C3C 0002               1566      MOVE.W  #2,D6
00001E78                          1567      
00001E78  5207                    1568      ADD.B   #1,D7
00001E7A                          1569      
00001E7A  43F9 000020F0           1570      LEA     outputADDA,A1
00001E80  103C 000E               1571      MOVE.B  #14,D0
00001E84  4E4F                    1572      TRAP    #15
00001E86                          1573      
00001E86  43F9 0000218C           1574      LEA     outputLong,A1
00001E8C  103C 000E               1575      MOVE.B  #14,D0
00001E90  4E4F                    1576      TRAP    #15
00001E92                          1577      
00001E92  4E75                    1578      RTS
00001E94                          1579      
00001E94                          1580      
00001E94                          1581  byteOpMode                          *It's a byte?
00001E94  B63C 0000               1582      CMP.B   #0,D3
00001E98  6600 0010               1583      BNE     wordOpMode
00001E9C                          1584      
00001E9C  43F9 00002184           1585      LEA     outputByte,A1           *Output ".B" !
00001EA2  103C 000E               1586      MOVE.B  #14,D0
00001EA6  4E4F                    1587      TRAP    #15
00001EA8  4E75                    1588      RTS                             *Time to return back in time
00001EAA                          1589      
00001EAA                          1590  wordOpMode                          *It's a word?
00001EAA  B63C 0001               1591      CMP.B   #1,D3
00001EAE  6600 0010               1592      BNE     longOpMode
00001EB2                          1593      
00001EB2  43F9 00002188           1594      LEA     outputWord,A1           *Output ".W" onto console
00001EB8  103C 000E               1595      MOVE.B  #14,D0
00001EBC  4E4F                    1596      TRAP    #15
00001EBE  4E75                    1597      RTS                             *Time warp~
00001EC0                          1598      
00001EC0                          1599  longOpMode                          *It better be a long then
00001EC0  43F9 0000218C           1600      LEA     outputLong,A1           *outputs ".L" onto console
00001EC6  103C 000E               1601      MOVE.B  #14,D0
00001ECA  4E4F                    1602      TRAP    #15
00001ECC                          1603      
00001ECC  5207                    1604      ADD.B   #1,D7
00001ECE                          1605     
00001ECE  4E75                    1606      RTS                             *whoosh~
00001ED0                          1607   
00001ED0                          1608      
00001ED0                          1609  sourceEA                            *output the Source EA
00001ED0  3604                    1610      MOVE.W  D4,D3                   *Put the original opcode into D3
00001ED2  3403                    1611      MOVE.W  D3,D2                   *Copy that into D2
00001ED4                          1612      
00001ED4  E65A                    1613      ROR.W   #3,D2                   *Whoo~ Rotating~
00001ED6  C4BC 00000007           1614      AND.L   #$00000007,D2           *D2 has Mode
00001EDC                          1615      
00001EDC                          1616  
00001EDC  C6BC 00000007           1617      AND.L   #$00000007,D3           *D3 has Register
00001EE2                          1618  
00001EE2                          1619   
00001EE2                          1620  DnMode                          *Is the Mode a Data Register?
00001EE2  4281                    1621      CLR.L   D1
00001EE4                          1622      
00001EE4  B43C 0000               1623      CMP.B   #0,D2
00001EE8  6600 0018               1624      BNE     AnMode
00001EEC                          1625      
00001EEC  43F9 0000219C           1626      LEA     outputDn,A1         *outputs "D" onto console
00001EF2  103C 000E               1627      MOVE.B  #14,D0
00001EF6  4E4F                    1628      TRAP    #15
00001EF8                          1629  
00001EF8  1203                    1630      MOVE.B  D3,D1               *outputs the register, whatever the numeric value is
00001EFA  103C 0003               1631      MOVE.B  #3,D0
00001EFE  4E4F                    1632      TRAP    #15
00001F00                          1633      
00001F00  4E75                    1634      RTS                         *wooo~
00001F02                          1635    
00001F02                          1636  AnMode                          *Mode is an Address Register?
00001F02  B43C 0001               1637      CMP.B   #1,D2
00001F06  6600 0018               1638      BNE     deRefAnMode
00001F0A                          1639      
00001F0A  43F9 0000219A           1640      LEA     outputAn,A1         *Outputs "A" onto console
00001F10  103C 000E               1641      MOVE.B  #14,D0
00001F14  4E4F                    1642      TRAP    #15
00001F16                          1643      
00001F16  1203                    1644      MOVE.B  D3,D1               *Outputs the register value
00001F18  103C 0003               1645      MOVE.B  #3,D0
00001F1C  4E4F                    1646      TRAP    #15
00001F1E                          1647      
00001F1E  4E75                    1648      RTS                         *psssh
00001F20                          1649      
00001F20                          1650  deRefAnMode                     *Mode is a (A0)?
00001F20  B43C 0002               1651      CMP.B   #2,D2               
00001F24  6600 0024               1652      BNE     postIncrementAnMode
00001F28                          1653      
00001F28  43F9 00002190           1654      LEA     outputdeRefAn1,A1   *Outputs "(A" onto console
00001F2E  103C 000E               1655      MOVE.B  #14,D0
00001F32  4E4F                    1656      TRAP    #15
00001F34                          1657      
00001F34  1203                    1658      MOVE.B  D3,D1               *outputs register value
00001F36  103C 0003               1659      MOVE.B  #3,D0
00001F3A  4E4F                    1660      TRAP    #15
00001F3C                          1661      
00001F3C  43F9 00002193           1662      LEA     outputdeRefAn2,A1   *makes it pretty by outputting ")"
00001F42  103C 000E               1663      MOVE.B  #14,D0
00001F46  4E4F                    1664      TRAP    #15
00001F48                          1665      
00001F48  4E75                    1666      RTS                         *=-=
00001F4A                          1667      
00001F4A                          1668  postIncrementAnMode
00001F4A  B43C 0003               1669      CMP.B   #3,D2
00001F4E  6600 0024               1670      BNE     preDecrementAnMode
00001F52                          1671      
00001F52  43F9 00002190           1672      LEA     outputdeRefAn1,A1
00001F58  103C 000E               1673      MOVE.B  #14,D0
00001F5C  4E4F                    1674      TRAP    #15
00001F5E                          1675      
00001F5E  1203                    1676      MOVE.B  D3,D1
00001F60  103C 0003               1677      MOVE.B  #3,D0
00001F64  4E4F                    1678      TRAP    #15
00001F66                          1679      
00001F66  43F9 00002195           1680      LEA     outputPostIncrementAn,A1
00001F6C  103C 000E               1681      MOVE.B  #14,D0
00001F70  4E4F                    1682      TRAP    #15
00001F72                          1683      
00001F72  4E75                    1684      RTS
00001F74                          1685      
00001F74                          1686  preDecrementAnMode
00001F74  B43C 0004               1687      CMP.B   #4,D2
00001F78  6600 0030               1688      BNE     immediateData
00001F7C                          1689      
00001F7C  43F9 00002198           1690      LEA     outputPreDecrementAn,A1
00001F82  103C 000E               1691      MOVE.B  #14,D0
00001F86  4E4F                    1692      TRAP    #15
00001F88                          1693      
00001F88  43F9 00002190           1694      LEA     outputdeRefAn1,A1
00001F8E  103C 000E               1695      MOVE.B  #14,D0
00001F92  4E4F                    1696      TRAP    #15
00001F94                          1697      
00001F94  1203                    1698      MOVE.B  D3,D1
00001F96  103C 0003               1699      MOVE.B  #3,D0
00001F9A  4E4F                    1700      TRAP    #15
00001F9C                          1701      
00001F9C  43F9 00002193           1702      LEA     outputdeRefAn2,A1
00001FA2  103C 000E               1703      MOVE.B  #14,D0
00001FA6  4E4F                    1704      TRAP    #15
00001FA8                          1705      
00001FA8  4E75                    1706      RTS
00001FAA                          1707      
00001FAA                          1708  immediateData                   *Mode is an #<data>
00001FAA  B43C 0007               1709      CMP.B   #7,D2               *Mode for #<data> is 111
00001FAE  6600 0030               1710      BNE     xxxWord
00001FB2                          1711      
00001FB2  B63C 0004               1712      CMP.B   #4,D3               *Register for #<data> is 100
00001FB6  6600 0028               1713      BNE     xxxWord
00001FBA                          1714                                 
00001FBA  43F9 0000219E           1715      LEA     outputPound,A1      *Outputs "#"
00001FC0  103C 000E               1716      MOVE.B  #14,D0
00001FC4  4E4F                    1717      TRAP    #15   
00001FC6                          1718      
00001FC6  BE3C 0001               1719      CMP.B   #1,D7
00001FCA  6700 0008               1720      BEQ     immeDataLong
00001FCE                          1721      
00001FCE  361D                    1722      MOVE.W  (A5)+,D3
00001FD0                          1723      
00001FD0  6000 0004               1724      BRA     immediateDatapt2
00001FD4                          1725  
00001FD4                          1726  immeDataLong
00001FD4  261D                    1727      MOVE.L  (A5)+,D3    
00001FD6                          1728          
00001FD6                          1729  immediateDatapt2               *Outputs register value
00001FD6  2203                    1730      MOVE.L  D3,D1
00001FD8  103C 0003               1731      MOVE.B  #3,D0
00001FDC  4E4F                    1732      TRAP    #15
00001FDE                          1733  
00001FDE  4E75                    1734      RTS                         *~owo~
00001FE0                          1735      
00001FE0                          1736  xxxWord
00001FE0  B43C 0007               1737      CMP.B   #7,D2
00001FE4  6600 0024               1738      BNE     xxxLong
00001FE8                          1739      
00001FE8  B63C 0000               1740      CMP.B   #0,D3
00001FEC  6600 001C               1741      BNE     xxxLong
00001FF0                          1742      
00001FF0  43F9 000021A0           1743      LEA     outputAddr,A1
00001FF6  103C 000E               1744      MOVE.B  #14,D0
00001FFA  4E4F                    1745      TRAP    #15
00001FFC                          1746      
00001FFC  321D                    1747      MOVE.W  (A5)+,D1
00001FFE  103C 000F               1748      MOVE.B  #15,D0
00002002  143C 0010               1749      MOVE.B  #16,D2
00002006  4E4F                    1750      TRAP    #15
00002008                          1751      
00002008  4E75                    1752      RTS
0000200A                          1753      
0000200A                          1754  xxxLong
0000200A  B43C 0007               1755      CMP.B   #7,D2
0000200E  6600 00A2               1756      BNE     DONE
00002012                          1757      
00002012  B63C 0001               1758      CMP.B   #1,D3
00002016  6600 009A               1759      BNE     DONE
0000201A                          1760      
0000201A  43F9 000021A0           1761      LEA     outputAddr,A1
00002020  103C 000E               1762      MOVE.B  #14,D0
00002024  4E4F                    1763      TRAP    #15
00002026                          1764      
00002026  221D                    1765      MOVE.L  (A5)+,D1
00002028  103C 000F               1766      MOVE.B  #15,D0
0000202C  143C 0010               1767      MOVE.B  #16,D2
00002030  4E4F                    1768      TRAP    #15
00002032                          1769      
00002032  4E75                    1770      RTS
00002034                          1771      
00002034                          1772  
00002034                          1773  addDestinationEA                *Since ADD only has data register in dest area
00002034  3604                    1774      MOVE.W  D4,D3
00002036                          1775      
00002036  3403                    1776      MOVE.W  D3,D2
00002038                          1777      
00002038  720A                    1778      MOVE.L  #10,D1
0000203A  E37A                    1779      ROL.W   D1,D2
0000203C  C4BC 00000007           1780      AND.L   #$00000007,D2       *D2 has mode
00002042                          1781      
00002042                          1782      
00002042  EF5B                    1783      ROL.W   #7,D3
00002044  C6BC 00000007           1784      AND.L   #$00000007,D3       *D3 has register
0000204A                          1785      
0000204A                          1786  DnRegister                      *For ADD only, since it only has Dn 
0000204A  43F9 0000219C           1787      LEA     outputDn,A1         *outputs "D"
00002050  103C 000E               1788      MOVE.B  #14,D0
00002054  4E4F                    1789      TRAP    #15
00002056                          1790      
00002056  1203                    1791      MOVE.B  D3,D1               *Outputs register value
00002058  103C 0003               1792      MOVE.B  #3,D0
0000205C  4E4F                    1793      TRAP    #15
0000205E                          1794      
0000205E  4E75                    1795      RTS
00002060                          1796  
00002060                          1797  moveDestinationEA               *Destination output for MOVE
00002060  3604                    1798      MOVE.W  D4,D3
00002062  3403                    1799      MOVE.W  D3,D2
00002064                          1800      
00002064  EF5B                    1801      ROL.W   #7,D3
00002066  C6BC 00000007           1802      AND.L   #$00000007,D3       *D3 has Register
0000206C                          1803      
0000206C  323C 000A               1804      MOVE.W  #10,D1      
00002070  E37A                    1805      ROL.W   D1,D2               *D2 has Mode
00002072  C4BC 00000007           1806      AND.L   #$00000007,D2
00002078                          1807      
00002078  6000 FE68               1808      BRA     DnMode              *output what it is, bra
0000207C                          1809      
0000207C                          1810  addaDestEA                      *Sets up the dest mode to be proper
0000207C  3604                    1811      MOVE.W  D4,D3               *Get the original code again
0000207E  3403                    1812      MOVE.W  D3,D2
00002080                          1813      
00002080  EF5B                    1814      ROL.W   #7,D3               
00002082  C6BC 00000007           1815      AND.L   #$00000007,D3       *D3 has register
00002088                          1816      
00002088  323C 000A               1817      MOVE.W  #10,D1
0000208C  E37A                    1818      ROL.W   D1,D2               *Have to AND it by 1, since the mode for ADDA
0000208E  C4BC 00000001           1819      AND.L   #$00000001,D2       *is always an Address
00002094                          1820      
00002094  6000 FE4C               1821      BRA     DnMode
00002098                          1822      
00002098                          1823  pageContinue
00002098  43F9 000021E6           1824      LEA     outputContinue,A1
0000209E  103C 000E               1825      MOVE.B  #14,D0
000020A2  4E4F                    1826      TRAP    #15
000020A4  103C 0005               1827      MOVE.B  #5,D0
000020A8  4E4F                    1828      TRAP    #15
000020AA  16BC 001E               1829      MOVE.B  #line_count,(A3)
000020AE  4EF8 115C               1830      JMP     getOpCode
000020B2                          1831      
000020B2                          1832  DONE
000020B2  BCCD                    1833      CMP.W   A5,A6
000020B4  6D00 0012               1834      BLT     END   
000020B8  43F9 000021AE           1835      LEA     outputNextLine,A1
000020BE  103C 000E               1836      MOVE.B  #14,D0
000020C2  4E4F                    1837      TRAP    #15 
000020C4  4EF8 115C               1838      JMP     getOpCode
000020C8                          1839      
000020C8                          1840  END
000020C8  43F9 000021AE           1841      LEA     outputNextLine,A1
000020CE  103C 000E               1842      MOVE.B  #14,D0
000020D2  4E4F                    1843      TRAP    #15
000020D4                          1844  
000020D4  43F9 000021D1           1845      LEA     outputEnd,A1
000020DA  103C 000E               1846      MOVE.B  #14,D0
000020DE  4E4F                    1847      TRAP    #15
000020E0  FFFF FFFF               1848      SIMHALT             ; halt simulator
000020E4                          1849  
000020E4                          1850  * Put variables and constants here
000020E4                          1851  
000020E4= 43D2                    1852  code        DC.W    $43D2
000020E6                          1853  
000020E6                          1854  
000020E6= D640                    1855  addCode     DC.W    $D640
000020E8                          1856  
000020E8= 303C                    1857  moveCode1   DC.W    $303C
000020EA= 0011                    1858  moveCode2   DC.W    $0011
000020EC                          1859  
000020EC= 41 44 44 00             1860  outputADD   DC.B    'ADD',0
000020F0= 41 00                   1861  outputADDA  DC.B    'A',0
000020F2= 53 55 42 00             1862  outputSUB   DC.B    'SUB',0
000020F6= 53 55 42 51 00          1863  outputSUBQ  DC.B    'SUBQ',0
000020FB= 4D 4F 56 45 00          1864  outputMOVE  DC.B    'MOVE',0
00002100= 4D 4F 56 45 41 00       1865  outputMOVEA DC.B    'MOVEA',0
00002106= 4D 4F 56 45 4D 2E ...   1866  outputMOVEMW DC.B   'MOVEM.W ',0
0000210F= 4D 4F 56 45 4D 2E ...   1867  outputMOVEML DC.B   'MOVEM.L ',0
00002118= 4D 55 4C 53 20 00       1868  outputMULS  DC.B    'MULS ',0
0000211E= 44 49 56 53 2E 57 ...   1869  outputDIVSW DC.B    'DIVS.W ',0
00002126= 4E 4F 50 20 00          1870  outputNOP   DC.B    'NOP ',0
0000212B= 4A 53 52 20 00          1871  outputJSR   DC.B    'JSR ',0
00002130= 52 54 53 20 00          1872  outputRTS   DC.B    'RTS ',0
00002135= 4C 45 41 20 00          1873  outputLEA   DC.B    'LEA ',0
0000213A= 44 41 54 41 20 00       1874  outputData  DC.B    'DATA ',0
00002140= 4E 45 47 00             1875  outputNEG   DC.B    'NEG',0
00002144= 42 52 41 20 00          1876  outputBRA   DC.B    'BRA ',0
00002149= 4F 52 49 00             1877  outputORI   DC.B    'ORI',0
0000214D= 4F 52 00                1878  outputOR    DC.B    'OR',0
00002150= 45 4F 52 00             1879  outputEOR   DC.B    'EOR',0
00002154= 43 4D 50 49 00          1880  outputCMPI  DC.B    'CMPI',0
00002159= 43 4D 50 00             1881  outputCMP   DC.B    'CMP',0
0000215D= 42 43 4C 52 20 00       1882  outputBCLR  DC.B    'BCLR ',0
00002163= 4C 53 00                1883  outputLS    DC.B    'LS',0
00002166= 41 53 00                1884  outputAS    DC.B    'AS',0
00002169= 52 4F 00                1885  outputRO    DC.B    'RO',0
0000216C= 4C 00                   1886  outputLeft  DC.B    'L',0
0000216E= 52 00                   1887  outputRight DC.B    'R',0
00002170                          1888  *outputRegList DC.B  'A0-A7/D0-D7',0
00002170                          1889  
00002170                          1890  
00002170= 42 43 53 20 00          1891  outputBCS   DC.B    'BCS ',0
00002175= 42 47 45 20 00          1892  outputBGE   DC.B    'BGE ',0
0000217A= 42 43 54 20 00          1893  outputBCT   DC.B    'BCT ',0
0000217F= 42 56 43 20 00          1894  outputBVC   DC.B    'BVC ',0
00002184                          1895  
00002184= 2E 42 20 00             1896  outputByte  DC.B    '.B ',0
00002188= 2E 57 20 00             1897  outputWord  DC.B    '.W ',0
0000218C= 2E 4C 20 00             1898  outputLong  DC.B    '.L ',0
00002190                          1899  
00002190= 28 41 00                1900  outputdeRefAn1   DC.B    '(A',0
00002193= 29 00                   1901  outputdeRefAn2   DC.B    ')',0
00002195= 29 2B 00                1902  outputPostIncrementAn   DC.B    ')+',0
00002198= 2D 00                   1903  outputPreDecrementAn    DC.B    '-',0
0000219A                          1904  
0000219A= 41 00                   1905  outputAn    DC.B    'A',0
0000219C= 44 00                   1906  outputDn    DC.B    'D',0
0000219E= 23 00                   1907  outputPound DC.B    '#',0
000021A0= 20 20 20 24 00          1908  outputAddr  DC.B    '   $',0
000021A6= 0000                    1909  outputCurrentAddr   DC.W    $0000
000021A8= 2F 00                   1910  outputSlash DC.B    '/',0
000021AA                          1911  
000021AA= 2C 00                   1912  outputComma     DC.B    ',',0
000021AC= 2E 00                   1913  outputDot       DC.B    '.',0
000021AE= 20 0D 0A 00             1914  outputNextLine  DC.B    ' ',CR,LF,0
000021B2= 20 00                   1915  outputSpace     DC.B    ' ',0
000021B4= 3A 20 00                1916  outputColon     DC.B    ': ',0
000021B7= 2D 00                   1917  outputNegSign   DC.B    '-',0
000021B9= 44 69 73 61 73 73 ...   1918  outputStart     DC.B    'Disassembling Initiated',0
000021D1= 50 72 6F 67 72 61 ...   1919  outputEnd       DC.B    'Program Disassembled',0
000021E6= 50 72 65 73 73 20 ...   1920  outputContinue  DC.B    'Press ENTER key to continue disassembling',CR,LF,0
00002212                          1921      END    $1000        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADDADESTEA          207C
ADDALOPMODE         1E74
ADDAORDER           1E04
ADDAWOPMODE         1E56
ADDCODE             20E6
ADDDESTINATIONEA    2034
ADDMETHOD           1746
ADDOPCODE           173E
ADDR_VAL_TEMP       1150
ALTOPMODE           1E3A
ALTORDER            1DE8
ANMODE              1F02
ANMODESUB           14C8
ASCII_MASK          FF
ASDOPCODE           1A5A
BCCDISPLACEMENT     1C18
BCCMETHOD           1D66
BCCOPCODE           1D5E
BCLRIMMEDIATE       1620
BCLROPCODE          15D8
BCS                 1D8A
BCT                 1DAA
BGE                 1D9A
BITDISPLACEMENT16   1C6C
BITDISPLACEMENT32   1CE2
BRAMETHOD           1C0C
BRAOPCODE           1C00
BVC                 1DBA
BYTEOPMODE          1E94
CHECKSEVEN          1388
CHECKSEVENAN        143A
CMPIMETHOD          15A6
CMPIOPCODE          159E
CMPOPCODE           192A
CODE                20E4
COUNTER             0
CR                  D
DATAOPCODE          1DCA
DEREFANMODE         1F20
DISPLAY8FORSUBQ     1838
DISPLAYMOVEMLONG    132E
DISPLAYMOVEMWORD    131E
DIVSWCHECK          18A4
DIVSWOPCODE         18A4
DNMODE              1EE2
DNREGISTER          204A
DONE                20B2
DOTOPMODE           1E20
END                 20C8
END_ADDR_MSG        111F
END_VAL             1158
EORMETHOD           18F4
EOROPCODE           18E2
GETANMODE           1314
GETOPCODE           115C
GET_ADDR            108C
HAMSTERS            138C
HAMSTERSAN          1442
IMMEDATALONG        1FD4
IMMEDIATEDATA       1FAA
IMMEDIATEDATAPT2    1FD6
JSRMETHOD           11DE
JSROPCODE           11CE
JSROUTPUTDEREF      11FA
JSROUTPUTLABEL      1210
LEAOPCODE           14E8
LEAOUTPUT           1528
LEFTRIGHT           1AD2
LF                  A
LINE_COUNT          1E
LONGOPMODE          1EC0
LOOP                10A8
LSDMETHOD           1A26
LSDOPCODE           1A1E
MASK                F
MEEPMEEP            13F6
MEMORYASD           19B4
MEMORYLSD           1984
MEMORYROD           19E4
MEMTOREG            14C4
MEOWMEOW            136E
MOVEALONGMETHOD     1704
MOVEAWORDMETHOD     16A4
MOVEBYTEMETHOD      1648
MOVEBYTEOPCODE      1640
MOVECODE1           20E8
MOVECODE2           20EA
MOVEDESTINATIONEA   2060
MOVELONGMETHODPT2   1714
MOVELONGOPCODE      16DC
MOVELONGOPCODEMETHOD  16E4
MOVEMLONGMEMTOREG   1252
MOVEMLONGREGTOMEM   124A
MOVEMMETHODMEMTOREG  1282
MOVEMMETHODREGTOMEM  125A
MOVEMOPCODE         1222
MOVEMOUTPUT         12AA
MOVEMOUTPUTMEMTOREG  12E4
MOVEMWEA            1316
MOVEWORDMETHOD      1684
MOVEWORDMETHODPT2   16B4
MOVEWORDOPCODE      167C
MULSLMETHOD         1BC8
MULSOUTPUT          1BA0
MULSWMETHOD         1B90
MULSWOPCODE         1B78
NEGBIT16            1CA8
NEGBIT32            1D22
NEGMETHOD           1BD4
NEGOPCODE           1BC8
NOPOPCODE           119E
ORIMETHOD           1564
ORIOPCODE           1550
ORMETHOD            186E
OROPCODE            1852
OUTPUTADD           20EC
OUTPUTADDA          20F0
OUTPUTADDR          21A0
OUTPUTAN            219A
OUTPUTAS            2166
OUTPUTBCLR          215D
OUTPUTBCS           2170
OUTPUTBCT           217A
OUTPUTBGE           2175
OUTPUTBRA           2144
OUTPUTBVC           217F
OUTPUTBYTE          2184
OUTPUTCMP           2159
OUTPUTCMPI          2154
OUTPUTCOLON         21B4
OUTPUTCOMMA         21AA
OUTPUTCONTINUE      21E6
OUTPUTCURRENTADDR   21A6
OUTPUTDATA          213A
OUTPUTDEREFAN1      2190
OUTPUTDEREFAN2      2193
OUTPUTDIVSW         211E
OUTPUTDN            219C
OUTPUTDOT           21AC
OUTPUTEND           21D1
OUTPUTEOR           2150
OUTPUTJSR           212B
OUTPUTLEA           2135
OUTPUTLEFT          216C
OUTPUTLONG          218C
OUTPUTLS            2163
OUTPUTMOVE          20FB
OUTPUTMOVEA         2100
OUTPUTMOVEML        210F
OUTPUTMOVEMW        2106
OUTPUTMULS          2118
OUTPUTNEG           2140
OUTPUTNEGSIGN       21B7
OUTPUTNEXTLINE      21AE
OUTPUTNOP           2126
OUTPUTOR            214D
OUTPUTORI           2149
OUTPUTPARTFUCKING2  13C0
OUTPUTPARTFUCKING2AN  147A
OUTPUTPOSTINCREMENTAN  2195
OUTPUTPOUND         219E
OUTPUTPREDECREMENTAN  2198
OUTPUTREGMEMTOREG   14B8
OUTPUTRIGHT         216E
OUTPUTRO            2169
OUTPUTRTS           2130
OUTPUTSLASH         21A8
OUTPUTSPACE         21B2
OUTPUTSTART         21B9
OUTPUTSUB           20F2
OUTPUTSUBQ          20F6
OUTPUTWORD          2188
PAGECONTINUE        2098
POSTINCREMENTANMODE  1F4A
PREDECREMENTANMODE  1F74
REGBITSET           1380
REGBITSETAN         1432
REGISTERCHECKAN     140C
REGISTERCHECKERDN   135A
REGISTERDONE        14B0
REGISTEROUTPUT      1394
REGISTEROUTPUTAN    144E
REGISTERRANGEAN     1420
REGTOMEM            133A
RET_SA              10F2
RIGHTRIGHT          1AF2
RODOPCODE           1A96
RTSOPCODE           11B6
RTS_STRTADDR        10C6
SHIFTDESTEA         1B5A
SHIFTIMMEDIATEEA    1B32
SHIFTIMMEDIATEEIGHT  1B50
SHIFTMEMORYSHIFT    1968
SHIFTREGISTERSHIFT  1A14
SHIFTSOPCODE        1960
SHIFTSOURCEEA       1B00
SOURCEEA            1ED0
STACK               B000
START_ADDR_MSG      10F4
STRIP_ASCII         10CE
ST_VAL              1154
SUB30               10EE
SUB37               10E6
SUBMETHOD           178C
SUBOPCODE           1784
SUBQDATA            1806
SUBQMETHOD          17CA
SUBQOPCODE          17C2
WORDOPMODE          1EAA
XXXLONG             200A
XXXMODESUB          14D8
XXXWORD             1FE0
