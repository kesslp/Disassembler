00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.02
Created On: 6/6/2015 9:25:07 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      :  Disassembler
00000000                             3  * Written by :  Paul Kessler and Joscelyn Kim
00000000                             4  * Date       :  199X
00000000                             5  * Description:  This program takes assembled code and disassembles it into 
00000000                             6  *               assembly language readable by humans.  The program will be 
00000000                             7  *               disassembed in a user defined address range
00000000                             8  *-----------------------------------------------------------
00000000  =0000000D                  9  CR          EQU $0D
00000000  =0000000A                 10  LF          EQU $0A
00000000                            11  
00000000  =0000000F                 12  mask        EQU $0000000F
00000000  =000000FF                 13  ascii_mask  EQU $00FF
00000000  =00000000                 14  counter     EQU 0
00000000  =0000B000                 15  stack       EQU $B000
00000000  =0000001E                 16  line_count  EQU 30
00000000                            17  
00000000                            18  *---- User input address range -----
00000000                            19  
00001000                            20                  ORG         $1000                       * start of the program
00001000  4FF9 0000B000             21                  LEA         stack,SP                    * initialize the stack
00001006  4200                      22                  CLR.B       D0                          * clear D0
00001008  43F9 000010F4             23                  LEA         start_addr_msg, A1          * ask for starting address
0000100E  103C 000E                 24                  MOVE.B      #14, D0
00001012  4E4F                      25                  TRAP        #15                         
00001014  103C 0002                 26                  MOVE.B      #2, D0                      * take in user input as string
00001018  4E4F                      27                  TRAP        #15
0000101A  48A7 FFFE                 28                  MOVEM.W     A0-A6/D0-D7,-(SP)           * push registers on the stack
0000101E  4EB9 0000108C             29                  JSR         get_addr                    * strip ascii characters to hex
00001024  4C9F 7FFF                 30                  MOVEM.W     (SP)+, A0-A6/D0-D7          * restore registers
00001028  23F9 00001150 00001154    31                  MOVE.L      addr_val_temp,st_val
00001032                            32                  
00001032  43F9 0000111F             33                  LEA         end_addr_msg, A1            * ask for ending address
00001038  103C 000E                 34                  MOVE.B      #14, D0
0000103C  4E4F                      35                  TRAP        #15
0000103E  224C                      36                  MOVEA.L     A4,A1                       * reset address at A1 to get user input
00001040  103C 0002                 37                  MOVE.B      #2, D0                      * take address as a string
00001044  4E4F                      38                  TRAP        #15
00001046  48A7 FFFE                 39                  MOVEM.W     A0-A6/D0-D7,-(SP)           * push registers on the stack
0000104A  4EB9 0000108C             40                  JSR         get_addr                    * strip ascii address into hex
00001050  4C9F 7FFF                 41                  MOVEM.W     (SP)+, A0-A6/D0-D7          * restore the registers
00001054  23F9 00001150 00001158    42                  MOVE.L      addr_val_temp, end_val      * store address in end_val
0000105E  2A79 00001154             43                  MOVEA.L     st_val,A5                   * store start val in A5
00001064  2C79 00001158             44                  MOVEA.L     end_val,A6                  * store end val in A6
0000106A                            45                  
0000106A  43F9 0000221B             46                  LEA         outputStart,A1              *ouput starting messaage
00001070  103C 000E                 47                  MOVE.B      #14,D0          
00001074  4E4F                      48                  TRAP        #15
00001076                            49                  
00001076  43F9 00002210             50                  LEA         outputNextLine,A1           *output nextline
0000107C  103C 000E                 51                  MOVE.B      #14,D0
00001080  4E4F                      52                  TRAP        #15
00001082                            53                  
00001082  16BC 001E                 54                  MOVE.B      #line_count,(A3)
00001086  5513                      55                  SUBQ.B      #2,(A3)
00001088  6000 00D2                 56                  BRA         getOpCode                   * Jump to getOpCode sub routine
0000108C                            57  
0000108C                            58                  
0000108C                            59  
0000108C                            60  get_addr 
0000108C  5301                      61                  SUBQ.B      #1,D1
0000108E  4287                      62                  CLR.L       D7                          * we need D7 to be 0
00001090  1019                      63                  MOVE.B      (A1)+,D0                    * store first byte in D0
00001092  0280 000000FF             64                  ANDI.L      #ascii_mask,D0              * mask the first byte
00001098  4EB9 000010CE             65                  JSR         strip_ascii                 * strip ascii char into hex
0000109E  C3FC 0004                 66                  MULS.W      #4,D1
000010A2  E3A0                      67                  ASL.L       D1,D0                       * shift left 8
000010A4  8E80                      68                  OR.L        D0,D7
000010A6  1019                      69                  MOVE.B      (A1)+,D0                    * move next byte into D0
000010A8  5901                      70  loop            SUBQ.B      #4,D1
000010AA  0280 000000FF             71                  ANDI.L      #ascii_mask,D0              * mask the second byte
000010B0  4EB9 000010CE             72                  JSR         strip_ascii                 * strip ascii to hex
000010B6  E3A0                      73                  ASL.L       D1,D0                       * shift left 8
000010B8  8E80                      74                  OR.L        D0,D7
000010BA  B23C 0000                 75                  CMP.B       #0,D1
000010BE  6700 0006                 76                  BEQ         rts_strtAddr
000010C2  1019                      77                  MOVE.B      (A1)+,D0
000010C4  60E2                      78                  BRA         loop
000010C6                            79                  
000010C6                            80  rts_strtAddr
000010C6  23C7 00001150             81                  MOVE.L      D7,addr_val_temp
000010CC  4E75                      82                  RTS     
000010CE                            83                  
000010CE  B03C 0039                 84  strip_ascii     CMP.B       #$39,D0                     *Is it in range of 0-9?
000010D2  6F00 001A                 85                  BLE         sub30                       *It's a number
000010D6  B03C 0046                 86                  CMP.B       #$46,D0                     *Is it A...F?
000010DA  6F00 000A                 87                  BLE         sub37                       *It's A...F
000010DE  0400 0057                 88                  SUB.B       #$57,D0                     *It's a...f
000010E2  6000 000E                 89                  BRA         ret_sa                      *Go back
000010E6  0400 0037                 90  sub37           SUB.B       #$37,D0                     *Strip 37
000010EA  6000 0006                 91                  BRA         ret_sa                      *Go back
000010EE  0400 0030                 92  sub30           SUB.B       #$30,D0                     *Strip 30
000010F2  4E75                      93  ret_sa          RTS                                     *Go back
000010F4                            94  
000010F4                            95                  
000010F4                            96  *---- Data ----
000010F4                            97  
000010F4= 45 6E 74 65 72 20 ...     98  start_addr_msg  DC.B    'Enter a starting address to disassemble: $', 0
0000111F= 45 6E 74 65 72 20 ...     99  end_addr_msg    DC.B    'Enter a ending address to stop disassembling: $', 0
00001150= 00000000                 100  addr_val_temp   DC.L    $00000000
00001154= 00000000                 101  st_val          DC.L    $00000000
00001158= 00000000                 102  end_val         DC.L    $00000000
0000115C                           103  
0000115C                           104  *--- Data end ----
0000115C                           105  
0000115C                           106  
0000115C                           107  * Disassembler Start
0000115C                           108  getOpCode                        *Gets opcode
0000115C                           109      *LEA     code,A0             *Loads "code" which is the op code
0000115C                           110      
0000115C  4287                     111      CLR.L   D7
0000115E  4286                     112      CLR.L   D6
00001160  4283                     113      CLR.L   D3
00001162  4281                     114      CLR.L   D1
00001164  4280                     115      CLR.L   D0
00001166  4285                     116      CLR.L   D5
00001168  4284                     117      CLR.L   D4
0000116A                           118      
0000116A  5313                     119      SUBQ.B  #1,(A3)
0000116C  0C13 0000                120      CMP.B   #0,(A3)
00001170  6700 0F88                121      BEQ     pageContinue
00001174                           122      
00001174  320D                     123      MOVE.W  A5,D1               *move starting addr into D1
00001176  103C 000F                124      MOVE.B  #15,D0              *convert number into hex and output to console
0000117A  143C 0010                125      MOVE.B  #16,D2
0000117E  4E4F                     126      TRAP    #15    
00001180  381D                     127      MOVE.W  (A5)+,D4            *move data at starting addr to D4
00001182                           128      
00001182  4281                     129      CLR.L   D1
00001184                           130      
00001184  43F9 00002216            131      LEA     outputColon,A1      *output the colon and a space to the console
0000118A  103C 000E                132      MOVE.B  #14,D0
0000118E  4E4F                     133      TRAP    #15
00001190                           134      
00001190  2248                     135      MOVEA.L A0,A1               *used to clear A0
00001192  3404                     136      MOVE.W  D4,D2               *gets put into D4 and D2
00001194                           137      
00001194  E95A                     138      ROL.W   #4,D2               *rotate the first 4 significant bits to lower 4 bits
00001196                           139      
00001196  C4BC 0000000F            140      AND.L   #mask,D2            *mask it to get only the first byte
0000119C                           141      
0000119C  1A02                     142      MOVE.B  D2,D5               *put that value into D5
0000119E                           143  
0000119E                           144  nopOpCode
0000119E  B87C 4E71                145      CMP.W   #$4E71,D4
000011A2  6600 0012                146      BNE     rtsOpCode
000011A6                           147      
000011A6  43F9 00002188            148      LEA     outputNOP,A1
000011AC  103C 000E                149      MOVE.B  #14,D0
000011B0  4E4F                     150      TRAP    #15
000011B2  6000 0F60                151      BRA     DONE
000011B6                           152      
000011B6                           153  rtsOpCode
000011B6  B87C 4E75                154      CMP.W   #$4E75,D4
000011BA  6600 0012                155      BNE     jsrOpCode
000011BE                           156      
000011BE  43F9 00002192            157      LEA     outputRTS,A1
000011C4  103C 000E                158      MOVE.B  #14,D0
000011C8  4E4F                     159      TRAP    #15
000011CA                           160      
000011CA  6000 0F48                161      BRA     DONE
000011CE                           162      
000011CE                           163  jsrOpCode
000011CE  3604                     164      MOVE.W  D4,D3
000011D0  E15B                     165      ROL.W   #8,D3
000011D2  C67C 00FF                166      AND.W   #$00FF,D3
000011D6  B63C 004E                167      CMP.B   #$4E,D3
000011DA  6600 0046                168      BNE     movemOpCode
000011DE                           169      
000011DE                           170  jsrMethod
000011DE  3604                     171      MOVE.W  D4,D3
000011E0  E75B                     172      ROL.W   #3,D3
000011E2  C63C 0007                173      AND.B   #7,D3
000011E6  B63C 0002                174      CMP.B   #2,D3
000011EA  6700 000E                175      BEQ     jsrOutputDeref
000011EE                           176      
000011EE  B63C 0007                177      CMP.B   #7,D3
000011F2  6700 001C                178      BEQ     jsrOutputLabel
000011F6                           179  
000011F6                           180      
000011F6  6000 0FA4                181      BRA     outputData
000011FA                           182          
000011FA                           183  jsrOutputDeref
000011FA                           184  
000011FA  43F9 0000218D            185      LEA     outputJSR,A1
00001200  103C 000E                186      MOVE.B  #14,D0
00001204  4E4F                     187      TRAP    #15
00001206                           188      
00001206  4EB9 00001F32            189      JSR     sourceEA
0000120C                           190      
0000120C  6000 0F06                191      BRA     DONE
00001210                           192      
00001210                           193  jsrOutputLabel
00001210                           194  
00001210  B63C 0001                195      CMP.B   #1,D3
00001214  6E00 0C16                196      BGT     dataOpCode
00001218  4EB9 00001F32            197      JSR     sourceEA
0000121E                           198      
0000121E  6000 0EF4                199      BRA     DONE
00001222                           200      
00001222                           201  movemOpCode     
00001222  3604                     202      MOVE.W  D4,D3       
00001224  EC43                     203      ASR.W   #6,D3       
00001226  B67C 0122                204      CMP.W   #$0122,D3       
0000122A  6700 002E                205      BEQ     movemMethodRegToMem     
0000122E  B67C 0132                206      CMP.W   #$0132,D3       
00001232  6700 004E                207      BEQ     movemMethodMemToReg     
00001236  B67C 0123                208      CMP.W   #$0123,D3       
0000123A  6700 000E                209      BEQ     movemLongRegToMem       
0000123E  B67C 0133                210      CMP.W   #$0133,D3       
00001242  6700 000E                211      BEQ     movemLongMemToReg       
00001246  6000 0302                212      BRA     leaOpCode
0000124A                           213  
0000124A                           214  movemLongRegToMem
0000124A  1C3C 0001                215      MOVE.B  #1,D6
0000124E  6000 000A                216      BRA     movemMethodRegToMem 
00001252                           217  
00001252                           218  movemLongMemToReg
00001252  1C3C 0001                219      MOVE.B  #1,D6
00001256  6000 002A                220      BRA     movemMethodMemToReg     
0000125A                           221              
0000125A                           222  movemMethodRegToMem     
0000125A  1A3C 0000                223      MOVE.B  #0,D5                       *Register to memory baby!       
0000125E  3604                     224      MOVE.W  D4,D3       
00001260  E61B                     225      ROR.B   #3,D3       
00001262  C67C 0007                226      AND.W   #$0007,D3       
00001266  B63C 0002                227      CMP.B   #2,D3       
0000126A  6700 003E                228      BEQ     movemOutput     
0000126E  B63C 0004                229      CMP.B   #4,D3       
00001272  6700 0036                230      BEQ     movemOutput     
00001276  B63C 0007                231      CMP.B   #7,D3       
0000127A  6700 002E                232      BEQ     movemOutput     
0000127E  6000 0BAC                233      BRA     dataOpCode      
00001282                           234                  
00001282                           235  movemMethodMemToReg     
00001282  1A3C 0001                236      MOVE.B  #1,D5                       *Memory to Register baby!       
00001286  3604                     237      MOVE.W  D4,D3       
00001288  E61B                     238      ROR.B   #3,D3       
0000128A  C67C 0007                239      AND.W   #$0007,D3       
0000128E  B63C 0002                240      CMP.B   #2,D3       
00001292  6700 0016                241      BEQ     movemOutput     
00001296  B63C 0003                242      CMP.B   #3,D3       
0000129A  6700 000E                243      BEQ     movemOutput     
0000129E  B63C 0007                244      CMP.B   #7,D3       
000012A2  6700 0006                245      BEQ     movemOutput     
000012A6  6000 0B84                246      BRA     dataOpCode      
000012AA                           247              
000012AA                           248  movemOutput     
000012AA  3604                     249      MOVE.W  D4,D3       
000012AC  BA3C 0001                250      CMP.B   #1,D5       
000012B0  6700 0032                251      BEQ     movemOutputMemToReg     
000012B4                           252              
000012B4  E643                     253      ASR.W   #3,D3       
000012B6  C67C 0007                254      AND.W   #$0007,D3       
000012BA  B63C 0002                255      CMP.B   #2,D3       
000012BE  6700 0054                256      BEQ     getAnMode       
000012C2  B63C 0004                257      CMP.B   #4,D3       
000012C6  6700 004C                258      BEQ     getAnMode       
000012CA  B63C 0007                259      CMP.B   #7,D3       
000012CE  6600 0B5C                260      BNE     dataOpCode      
000012D2  1604                     261      MOVE.B  D4,D3       
000012D4  C63C 0007                262      AND.B   #$07,D3     
000012D8  B63C 0001                263      CMP.B   #1,D3       
000012DC  6E00 0B4E                264      BGT     dataOpCode      
000012E0  6000 0032                265      BRA     getAnMode       
000012E4                           266              
000012E4                           267  movemOutputMemToReg
000012E4  E643                     268      ASR.W   #3,D3
000012E6  C67C 0007                269      AND.W   #$0007,D3
000012EA  B63C 0002                270      CMP.B   #2,D3
000012EE  6700 0024                271      BEQ     getAnMode
000012F2  B63C 0003                272      CMP.B   #3,D3
000012F6  6700 001C                273      BEQ     getAnMode
000012FA  B63C 0007                274      CMP.B   #7,D3
000012FE  6600 0B2C                275      BNE     dataOpCode
00001302  1604                     276      MOVE.B  D4,D3
00001304  C63C 0007                277      AND.B   #$07,D3
00001308  B63C 0001                278      CMP.B   #1,D3
0000130C  6E00 0B1E                279      BGT     dataOpCode
00001310  6000 0002                280      BRA     getAnMode
00001314                           281              
00001314                           282  getAnMode       
00001314  1403                     283      MOVE.B  D3,D2       
00001316                           284              
00001316                           285  movemWEA        
00001316                           286  *    MOVE.W  (A5)+,D3
00001316  BC3C 0001                287      CMP.B   #1,D6
0000131A  6700 0012                288      BEQ     displayMovemLong
0000131E                           289  
0000131E                           290  displayMovemWord        
0000131E  43F9 00002168            291      LEA     outputMOVEMW,A1     
00001324  103C 000E                292      MOVE.B  #14,D0      
00001328  4E4F                     293      TRAP    #15
0000132A  6000 000E                294      BRA     regToMem
0000132E                           295  
0000132E                           296  displayMovemLong
0000132E  43F9 00002171            297      LEA     outputMOVEML,A1     
00001334  103C 000E                298      MOVE.B  #14,D0      
00001338  4E4F                     299      TRAP    #15     
0000133A                           300      
0000133A                           301      
0000133A                           302  regToMem
0000133A  4283                     303      CLR.L   D3
0000133C  4282                     304      CLR.L   D2
0000133E  4281                     305      CLR.L   D1
00001340  4286                     306      CLR.L   D6
00001342  4287                     307      CLR.L   D7
00001344                           308  
00001344  BA3C 0000                309      CMP.B   #0,D5
00001348  6600 01A6                310      BNE     memToReg
0000134C                           311      
0000134C  4285                     312      CLR.L   D5
0000134E                           313      
0000134E  3A1D                     314      MOVE.W  (A5)+,D5
00001350  3C3C 0010                315      MOVE.W  #16,D6
00001354  143C 0001                316      MOVE.B  #1,D2
00001358                           317      
00001358  3F04                     318      MOVE.W D4,-(A7)
0000135A                           319      
0000135A  4284                     320      CLR.L   D4
0000135C                           321      
0000135C  4EB9 0000137A            322      JSR     registerCheckerDn
00001362                           323      
00001362  381F                     324      MOVE.W  (A7)+,D4
00001364                           325      
00001364  43F9 0000220C            326      LEA     outputComma,A1
0000136A  103C 000E                327      MOVE.B  #14,D0
0000136E  4E4F                     328      TRAP    #15
00001370                           329      
00001370  4EB9 00001F32            330      JSR     sourceEA
00001376                           331      
00001376  6000 0D9C                332      BRA     DONE
0000137A                           333      
0000137A                           334    
0000137A                           335  registerCheckerDn
0000137A  B43C 0009                336      CMP.B   #9,D2
0000137E  6700 00A0                337      BEQ     meepmeep
00001382                           338  
00001382  3605                     339      MOVE.W  D5,D3
00001384                           340      
00001384  E57D                     341      ROL.W   D2,D5
00001386  CABC FFFFFFFE            342      AND.L   #$FFFFFFFE,D5
0000138C  E47D                     343      ROR.W   D2,D5
0000138E                           344      
0000138E  E57B                     345      ROL.W   D2,D3
00001390  C6BC 00000001            346      AND.L   #$00000001,D3
00001396  5202                     347      ADD.B  #1,D2
00001398                           348      
00001398                           349  meowmeow
00001398  B63C 0001                350      CMP.B   #1,D3
0000139C  6700 000C                351      BEQ     regBitSet           *Do shit
000013A0                           352  
000013A0  B83C 0000                353      CMP.B   #0,D4
000013A4  67D4                     354      BEQ     registerCheckerDn   *the one before was a zero
000013A6                           355  
000013A6  6000 0016                356      BRA     registerOutput    *output stuff because there is a range
000013AA                           357      
000013AA                           358  regBitSet
000013AA  B83C 0001                359      CMP.B   #1,D4
000013AE  6600 0006                360      BNE   hamsters
000013B2                           361  
000013B2                           362  checkSeven                      *There is a range
000013B2  1E02                     363      MOVE.B  D2,D7
000013B4                           364      
000013B4  60C4                     365      BRA     registerCheckerDn
000013B6                           366      
000013B6                           367  hamsters
000013B6  1202                     368      MOVE.B  D2,D1       *sets the "start" of range
000013B8                           369      
000013B8  183C 0001                370      MOVE.B  #1,D4       *there was a one
000013BC                           371      
000013BC  60BC                     372      BRA     registerCheckerDn
000013BE                           373      
000013BE                           374  registerOutput
000013BE  43F9 000021FE            375      LEA     outputDn,A1
000013C4  103C 000E                376      MOVE.B  #14,D0
000013C8  4E4F                     377      TRAP    #15
000013CA                           378      
000013CA  5501                     379      SUBQ.B  #2,D1
000013CC  103C 0003                380      MOVE.B  #3,D0
000013D0  4E4F                     381      TRAP    #15
000013D2                           382      
000013D2  BE3C 0001                383      CMP.B   #1,D7
000013D6  6C00 0012                384      BGE     outputpart2
000013DA                           385      
000013DA  43F9 0000220A            386      LEA     outputSlash,A1
000013E0  103C 000E                387      MOVE.B  #14,D0
000013E4  4E4F                     388      TRAP    #15
000013E6                           389  
000013E6  4284                     390      CLR.L   D4
000013E8                           391  
000013E8  6090                     392      BRA     registerCheckerDn  
000013EA                           393      
000013EA                           394  outputpart2
000013EA  43F9 00002219            395      LEA     outputNegSign,A1
000013F0  103C 000E                396      MOVE.B  #14,D0
000013F4  4E4F                     397      TRAP    #15
000013F6                           398      
000013F6  43F9 000021FE            399      LEA     outputDn,A1
000013FC  103C 000E                400      MOVE.B  #14,D0
00001400  4E4F                     401      TRAP    #15
00001402                           402      
00001402  5507                     403      SUBQ.B  #2,D7
00001404  2207                     404      MOVE.L  D7,D1
00001406  103C 0003                405      MOVE.B  #3,D0
0000140A  4E4F                     406      TRAP    #15
0000140C                           407      
0000140C  43F9 0000220A            408      LEA     outputSlash,A1
00001412  103C 000E                409      MOVE.B  #14,D0
00001416  4E4F                     410      TRAP    #15
00001418                           411      
00001418  4284                     412      CLR.L   D4
0000141A  4287                     413      CLR.L   D7
0000141C                           414      
0000141C  6000 FF5C                415      BRA     registerCheckerDn
00001420                           416      
00001420                           417  meepmeep
00001420  4283                     418      CLR.L   D3
00001422  4284                     419      CLR.L   D4
00001424  4286                     420      CLR.L   D6
00001426  4287                     421      CLR.L   D7
00001428  4281                     422      CLR.L   D1
0000142A                           423      
0000142A                           424      
0000142A                           425  registerCheckAn
0000142A  B43C 0011                426      CMP.B   #17,D2
0000142E  6700 00B8                427      BEQ     registerDone
00001432                           428      
00001432  3605                     429      MOVE.W  D5,D3
00001434                           430      
00001434  E57D                     431      ROL.W   D2,D5
00001436  CABC FFFFFFFE            432      AND.L   #$FFFFFFFE,D5
0000143C  E47D                     433      ROR.W   D2,D5
0000143E                           434      
0000143E  E57B                     435      ROL.W   D2,D3
00001440  C6BC 00000001            436      AND.L   #$00000001,D3
00001446  5202                     437      ADD.B   #1,D2
00001448                           438      
00001448                           439  registerRangeAn
00001448  B63C 0001                440      CMP.B   #1,D3
0000144C  6700 000C                441      BEQ     regBitSetAn           *Do shit
00001450                           442  
00001450  B83C 0000                443      CMP.B   #0,D4
00001454  67D4                     444      BEQ     registerCheckAn   *the one before was a zero
00001456                           445  
00001456  6000 001E                446      BRA     registerOutputAn    *output stuff because there is a range
0000145A                           447      
0000145A                           448  regBitSetAn
0000145A  B83C 0001                449      CMP.B   #1,D4
0000145E  6600 000A                450      BNE   hamstersAn
00001462                           451  
00001462                           452  checkSevenAn                      *There is a range
00001462  5102                     453      SUBQ.B  #8,D2
00001464  1E02                     454      MOVE.B  D2,D7
00001466  5002                     455      ADD.B   #8,D2
00001468                           456      
00001468  60C0                     457      BRA     registerCheckAn
0000146A                           458      
0000146A                           459  hamstersAn
0000146A  5102                     460      SUBQ.B  #8,D2
0000146C  1202                     461      MOVE.B  D2,D1       *sets the "start" of range
0000146E  5002                     462      ADD.B   #8,D2
00001470                           463      
00001470  183C 0001                464      MOVE.B  #1,D4       *there was a one
00001474                           465      
00001474  60B4                     466      BRA     registerCheckAn
00001476                           467      
00001476                           468  registerOutputAn
00001476  43F9 000021FC            469      LEA     outputAn,A1
0000147C  103C 000E                470      MOVE.B  #14,D0
00001480  4E4F                     471      TRAP    #15
00001482                           472      
00001482  5501                     473      SUBQ.B  #2,D1
00001484  103C 0003                474      MOVE.B  #3,D0
00001488  4E4F                     475      TRAP    #15
0000148A                           476      
0000148A  BE3C 0001                477      CMP.B   #1,D7
0000148E  6C00 001A                478      BGE     outputpart2An
00001492                           479      
00001492                           480  *    CMP.B   #7,D2
00001492                           481  *    BEQ     ignoreSlash
00001492                           482  *    
00001492                           483      
00001492                           484  displaySlash
00001492  BA7C 0001                485      CMP.W   #1,D5
00001496  6D00 000E                486      BLT     ignoreSlash
0000149A                           487      
0000149A  43F9 0000220A            488      LEA     outputSlash,A1
000014A0  103C 000E                489      MOVE.B  #14,D0
000014A4  4E4F                     490      TRAP    #15
000014A6                           491  
000014A6                           492  ignoreSlash
000014A6  4284                     493      CLR.L   D4
000014A8                           494  
000014A8  6080                     495      BRA     registerCheckAn  
000014AA                           496      
000014AA                           497  outputpart2An
000014AA  43F9 00002219            498      LEA     outputNegSign,A1
000014B0  103C 000E                499      MOVE.B  #14,D0
000014B4  4E4F                     500      TRAP    #15
000014B6                           501      
000014B6  43F9 000021FC            502      LEA     outputAn,A1
000014BC  103C 000E                503      MOVE.B  #14,D0
000014C0  4E4F                     504      TRAP    #15
000014C2                           505      
000014C2  5507                     506      SUBQ.B  #2,D7
000014C4  2207                     507      MOVE.L  D7,D1
000014C6  103C 0003                508      MOVE.B  #3,D0
000014CA  4E4F                     509      TRAP    #15
000014CC                           510      
000014CC                           511  *displaySlash
000014CC  BA7C 0001                512      CMP.W   #1,D5
000014D0  6D00 000E                513      BLT     ignoreSlashAn
000014D4                           514  
000014D4  43F9 0000220A            515      LEA     outputSlash,A1
000014DA  103C 000E                516      MOVE.B  #14,D0
000014DE  4E4F                     517      TRAP    #15
000014E0                           518      
000014E0                           519  ignoreSlashAn    
000014E0  4284                     520      CLR.L   D4
000014E2  4287                     521      CLR.L   D7
000014E4                           522      
000014E4  6000 FF44                523      BRA     registerCheckAn
000014E8                           524      
000014E8                           525  registerDone
000014E8  BE3C 0001                526      CMP.B   #1,D7
000014EC  6C88                     527      BGE     registerOutputAn
000014EE                           528  
000014EE  4E75                     529      RTS
000014F0                           530      
000014F0                           531  memToReg
000014F0                           532  
000014F0  4EB9 00001F32            533      JSR     sourceEA
000014F6                           534      
000014F6  4283                     535      CLR.L   D3
000014F8  4281                     536      CLR.L   D1
000014FA  4286                     537      CLR.L   D6
000014FC  4285                     538      CLR.L   D5
000014FE                           539      
000014FE  43F9 0000220C            540      LEA     outputComma,A1
00001504  103C 000E                541      MOVE.B  #14,D0
00001508  4E4F                     542      TRAP    #15
0000150A                           543      
0000150A  3A1D                     544      MOVE.W  (A5)+,D5
0000150C  3C3C 0010                545      MOVE.W  #16,D6
00001510  143C 0001                546      MOVE.B  #1,D2
00001514                           547      
00001514  3C05                     548      MOVE.W  D5,D6
00001516                           549      
00001516                           550      
00001516                           551  mirrorShift
00001516  B23C 000F                552      CMP.B   #15,D1
0000151A  6700 0018                553      BEQ     moveMContinue
0000151E                           554      
0000151E  5201                     555      ADD.B   #1,D1
00001520                           556      
00001520  E246                     557      ASR.W   #1,D6
00001522  6500 0006                558      BCS     addBit
00001526                           559      
00001526  6000 0008                560      BRA     zeroBit
0000152A                           561      
0000152A                           562  addBit
0000152A  5203                     563      ADD.B   #1,D3
0000152C  E343                     564      ASL.W   #1,D3
0000152E  60E6                     565      BRA     mirrorShift
00001530                           566      
00001530                           567  zeroBit
00001530  E343                     568      ASL.W   #1,D3
00001532  60E2                     569      BRA     mirrorShift 
00001534                           570      
00001534                           571  
00001534                           572  moveMContinue
00001534                           573  
00001534  3A03                     574      MOVE.W  D3,D5
00001536  4286                     575      CLR.L   D6
00001538  4283                     576      CLR.L   D3
0000153A  4281                     577      CLR.L   D1
0000153C                           578      
0000153C  3F04                     579      MOVE.W  D4,-(A7)
0000153E                           580      
0000153E  4284                     581      CLR.L   D4
00001540                           582      
00001540  4EB8 137A                583      JSR     registerCheckerDn
00001544                           584      
00001544  381F                     585      MOVE.W  (A7)+,D4
00001546                           586  *    
00001546                           587  *    MOVE.W  D4,D2
00001546                           588  *    ROR.W   #3,D2
00001546                           589  *    AND.L   #$00000007,D2
00001546                           590      
00001546                           591  
00001546                           592       
00001546  6000 0BCC                593      BRA DONE
0000154A                           594      
0000154A                           595  *    
0000154A                           596  *outputRegMemToReg
0000154A                           597  *    CMP.B   #4,D2      
0000154A                           598  *    BLE     AnModeSub      
0000154A                           599  *    BRA     xxxModeSub
0000154A                           600  *
0000154A                           601  *
0000154A                           602  *           
0000154A                           603  *AnModeSub          
0000154A                           604  *    JSR     sourceEA
0000154A                           605  **    CMP.B   #1,D5                   *bleh
0000154A                           606  **    BEQ     memToReg      
0000154A                           607  *    RTS     DONE       
0000154A                           608  *           
0000154A                           609  *xxxModeSub     
0000154A                           610  *    JSR     xxxWord
0000154A                           611  **    CMP.B   #1,D5                   *Bleh
0000154A                           612  **    BEQ     memToReg      
0000154A                           613  *    BRA     DONE           
0000154A                           614                  
0000154A                           615  leaOpCode
0000154A  BA3C 0004                616      CMP.B   #4,D5
0000154E  6600 0062                617      BNE     oriOpCode
00001552  3604                     618      MOVE.W  D4,D3
00001554  E15B                     619      ROL.W   #8,D3
00001556  B63C 0044                620      CMP.B   #$44,D3
0000155A  6700 06DA                621      BEQ     negMethod
0000155E  E05B                     622      ROR.W   #8,D3
00001560  EE5B                     623      ROR.W   #7,D3
00001562  C63C 0007                624      AND.B   #7,D3
00001566  B63C 0007                625      CMP.B   #7,D3
0000156A  6600 08C0                626      BNE     dataOpCode
0000156E                           627      
0000156E  3604                     628      MOVE.W  D4,D3
00001570  E65B                     629      ROR.W   #3,D3
00001572  C63C 0007                630      AND.B   #7,D3
00001576  B63C 0002                631      CMP.B   #2,D3
0000157A  6700 000E                632      BEQ     leaOutput
0000157E                           633      
0000157E  B63C 0007                634      CMP.B   #7,D3
00001582  6700 0006                635      BEQ     leaOutput
00001586                           636      
00001586  6000 08A4                637      BRA     dataOpCode
0000158A                           638      
0000158A                           639  leaOutput    
0000158A  43F9 00002197            640      LEA     outputLEA,A1
00001590  103C 000E                641      MOVE.B  #14,D0
00001594  4E4F                     642      TRAP    #15
00001596                           643      
00001596  4EB9 00001F32            644      JSR     sourceEA
0000159C                           645      
0000159C  43F9 0000220C            646      LEA     outputComma,A1
000015A2  103C 000E                647      MOVE.B  #14,D0
000015A6  4E4F                     648      TRAP    #15
000015A8                           649      
000015A8  4EB9 000020DE            650      JSR     addaDestEA
000015AE                           651      
000015AE  6000 0B64                652      BRA     DONE
000015B2                           653      
000015B2                           654  oriOpCode                       *OR opcode
000015B2  BA3C 0000                655      CMP.B   #0,D5               
000015B6  6600 00EA                656      BNE     moveByteOpCode      *if not, go to next opcode
000015BA                           657  
000015BA                           658  *-------------------------------------------------Change this when merging         
000015BA  3404                     659      MOVE.W  D4,D2
000015BC  E15A                     660      ROL.W   #8,D2
000015BE  C4BC 0000000F            661      AND.L   #$0000000F,D2
000015C4                           662      
000015C4  2A02                     663      MOVE.L  D2,D5
000015C6                           664      
000015C6                           665  oriMethod
000015C6  BA3C 0000                666      CMP.B   #0,D5
000015CA  6600 0034                667      BNE     cmpiOpCode
000015CE                           668      
000015CE  43F9 000021AB            669      LEA     outputORI,A1
000015D4  103C 000E                670      MOVE.B  #14,D0
000015D8  4E4F                     671      TRAP    #15
000015DA                           672      
000015DA  4EB9 00001E82            673      JSR     dotOpMode
000015E0                           674          
000015E0  7407                     675      MOVE.L  #7,D2
000015E2  7604                     676      MOVE.L  #4,D3
000015E4  4EB9 0000200C            677      JSR     immediateData
000015EA                           678      
000015EA  43F9 0000220C            679      LEA     outputComma,A1
000015F0  103C 000E                680      MOVE.B  #14,D0
000015F4  4E4F                     681      TRAP    #15
000015F6                           682      
000015F6  4EB9 00001F32            683      JSR     sourceEA
000015FC  6000 0B16                684      BRA     DONE
00001600                           685  
00001600                           686  cmpiOpCode
00001600  BA3C 000C                687      CMP.B   #12,D5
00001604  6600 0034                688      BNE     bclrOpCode
00001608                           689      
00001608                           690  cmpiMethod
00001608  43F9 000021B6            691      LEA     outputCMPI,A1
0000160E  103C 000E                692      MOVE.B  #14,D0
00001612  4E4F                     693      TRAP    #15
00001614                           694      
00001614  4EB9 00001E82            695      JSR     dotOpMode
0000161A                           696      
0000161A  7407                     697      MOVE.L  #7,D2
0000161C  7604                     698      MOVE.L  #4,D3
0000161E  4EB9 0000200C            699      JSR     immediateData
00001624                           700      
00001624  43F9 0000220C            701      LEA     outputComma,A1
0000162A  103C 000E                702      MOVE.B  #14,D0
0000162E  4E4F                     703      TRAP    #15
00001630                           704      
00001630  4EB9 00001F32            705      JSR     sourceEA
00001636  6000 0ADC                706      BRA     DONE
0000163A                           707      
0000163A                           708  bclrOpCode
0000163A  43F9 000021BF            709      LEA     outputBCLR,A1
00001640  103C 000E                710      MOVE.B  #14,D0
00001644  4E4F                     711      TRAP    #15
00001646                           712      
00001646  720A                     713      MOVE.L  #10,D1
00001648  2A04                     714      MOVE.L  D4,D5
0000164A  E37D                     715      ROL.W   D1,D5
0000164C  CABC 00000007            716      AND.L   #$00000007,D5
00001652                           717      
00001652  BA3C 0002                718      CMP.B   #2,D5
00001656  6700 002A                719      BEQ     bclrImmediate
0000165A                           720      
0000165A  7400                     721      MOVE.L  #0,D2
0000165C  2604                     722      MOVE.L  D4,D3
0000165E  EF5B                     723      ROL.W   #7,D3
00001660  C6BC 00000007            724      AND.L   #$00000007,D3
00001666                           725      
00001666  4EB9 00001F44            726      JSR     DnMode
0000166C                           727      
0000166C  43F9 0000220C            728      LEA     outputComma,A1
00001672  103C 000E                729      MOVE.B  #14,D0
00001676  4E4F                     730      TRAP    #15
00001678                           731      
00001678  4EB9 00001F32            732      JSR     sourceEA
0000167E                           733      
0000167E  6000 0A94                734      BRA     DONE
00001682                           735          
00001682                           736  bclrImmediate
00001682                           737      
00001682  7407                     738      MOVE.L  #7,D2
00001684  7604                     739      MOVE.L  #4,D3
00001686                           740      
00001686  4EB9 0000200C            741      JSR     immediateData
0000168C                           742      
0000168C  43F9 0000220C            743      LEA     outputComma,A1
00001692  103C 000E                744      MOVE.B  #14,D0
00001696  4E4F                     745      TRAP    #15
00001698                           746      
00001698  4EB9 00001F32            747      JSR     sourceEA
0000169E                           748      
0000169E  6000 0A74                749      BRA     DONE    
000016A2                           750      
000016A2                           751  moveByteOpCode                  *MOVE.B opcode
000016A2  BA3C 0001                752      CMP.B   #1,D5
000016A6  6600 0036                753      BNE     moveWordOpCode 
000016AA                           754  
000016AA                           755  moveByteMethod                  *MOVE.B output
000016AA  43F9 0000215D            756      LEA     outputMOVE,A1       *Outputs "MOVE" onto console
000016B0  103C 000E                757      MOVE.B  #14,D0
000016B4  4E4F                     758      TRAP    #15
000016B6                           759      
000016B6  43F9 000021E6            760      LEA     outputByte,A1       *Outputs ".B" onto console
000016BC  103C 000E                761      MOVE.B  #14,D0
000016C0  4E4F                     762      TRAP    #15
000016C2                           763      
000016C2  4EB9 00001F32            764      JSR     sourceEA            *Jump to subroutine sourceEA
000016C8                           765      
000016C8  43F9 0000220C            766      LEA     outputComma,A1      *Outputs a comma onto console
000016CE  103C 000E                767      MOVE.B  #14,D0
000016D2  4E4F                     768      TRAP    #15
000016D4                           769      
000016D4  4EB9 000020C2            770      JSR     moveDestinationEA   *Jump to subroutine moveDestinationEA
000016DA                           771      
000016DA  6000 0A38                772      BRA     DONE                *Yay done
000016DE                           773      
000016DE                           774  
000016DE                           775  moveWordOpCode                  *MOVE.W opcode
000016DE  BA3C 0003                776      CMP.B   #3,D5
000016E2  6600 005A                777      BNE     moveLongOpCode
000016E6                           778     
000016E6                           779  moveWordMethod                  *MOVE.W output
000016E6  3404                     780      MOVE.W  D4,D2               *D4 has the original word
000016E8  323C 000A                781      MOVE.W  #10,D1              *Move the value 10 into D1 since ROL has issues with
000016EC  E37A                     782      ROL.W   D1,D2               *   immediate values > 8
000016EE                           783      
000016EE  B47C 0001                784      CMP.W   #1,D2               *If the rotated value is a 1, it's a MOVEA.W
000016F2  6700 0012                785      BEQ     moveAWordMethod    
000016F6                           786      
000016F6  43F9 0000215D            787      LEA     outputMOVE,A1       *Outputs "MOVE." onto console
000016FC  103C 000E                788      MOVE.B  #14,D0
00001700  4E4F                     789      TRAP    #15
00001702  6000 0012                790      BRA     moveWordMethodpt2   *Go to the rest of the method~
00001706                           791      
00001706                           792  moveAWordMethod                 *MOVEA.W opcode
00001706  43F9 00002162            793      LEA     outputMOVEA,A1      *Outputs "MOVEA" onto console
0000170C  103C 000E                794      MOVE.B  #14,D0
00001710  4E4F                     795      TRAP    #15
00001712  6000 0002                796      BRA     moveWordMethodpt2   *Go to the rest of the method~
00001716                           797      
00001716                           798  moveWordMethodpt2               *Part 2 of the MOVE/MOVEA.W series
00001716  43F9 000021EA            799      LEA     outputWord,A1       *Outputs ".W" onto console
0000171C  103C 000E                800      MOVE.B  #14,D0
00001720  4E4F                     801      TRAP    #15
00001722                           802      
00001722  4EB9 00001F32            803      JSR     sourceEA            *Yay subroutines
00001728                           804      
00001728  43F9 0000220C            805      LEA     outputComma,A1      *outputs a comma onto console
0000172E  103C 000E                806      MOVE.B  #14,D0
00001732  4E4F                     807      TRAP    #15
00001734                           808      
00001734  4EB9 000020C2            809      JSR     moveDestinationEA   *Gotta check the destination~
0000173A                           810  
0000173A  6000 09D8                811      BRA     DONE                *I'm done, bra
0000173E                           812  
0000173E                           813  moveLongOpCode                  *MOVE.L opcode
0000173E  BA3C 0002                814      CMP.B   #2,D5
00001742  6600 005C                815      BNE     addOpCode
00001746                           816      
00001746                           817  moveLongOpCodeMethod            *MOVE.L output
00001746  340A                     818      MOVE.W  A2,D2               *Gotta check if it's actually a MOVEA
00001748  323C 000A                819      MOVE.W  #10,D1
0000174C  E37A                     820      ROL.W   D1,D2
0000174E                           821      
0000174E  B47C 0001                822      CMP.W   #1,D2
00001752  6700 0012                823      BEQ     moveALongMethod   
00001756                           824  
00001756  43F9 0000215D            825      LEA     outputMOVE,A1       *outputs "MOVE" onto console
0000175C  103C 000E                826      MOVE.B  #14,D0
00001760  4E4F                     827      TRAP    #15
00001762                           828      
00001762  6000 0012                829      BRA     moveLongMethodpt2   *Go to Part 2 of the MOVE series~
00001766                           830      
00001766                           831  moveALongMethod                 *MOVEA.L output
00001766  43F9 00002162            832      LEA     outputMOVEA,A1      *Outputs "MOVEA" onto console
0000176C  103C 000E                833      MOVE.B  #14,D0
00001770  4E4F                     834      TRAP    #15
00001772  6000 0002                835      BRA     moveLongMethodpt2   *Go to part 2~
00001776                           836      
00001776                           837  moveLongMethodpt2               *Part 2, the sequel(SQL?)
00001776                           838      
00001776  43F9 000021EE            839      LEA     outputLong,A1       *Outputs ".L" onto console
0000177C  103C 000E                840      MOVE.B  #14,D0
00001780  4E4F                     841      TRAP    #15
00001782                           842      
00001782  5207                     843      ADD.B   #1,D7
00001784                           844      
00001784  4EB9 00001F32            845      JSR     sourceEA            *Go output source
0000178A                           846      
0000178A  43F9 0000220C            847      LEA     outputComma,A1      *Yay commas
00001790  103C 000E                848      MOVE.B  #14,D0
00001794  4E4F                     849      TRAP    #15
00001796                           850      
00001796  4EB9 000020C2            851      JSR     moveDestinationEA    *Output destination
0000179C  6000 0976                852      BRA     DONE
000017A0                           853  
000017A0                           854  addOpCode                        *ADD opcode
000017A0  BA3C 000D                855      CMP.B   #13,D5
000017A4  6600 0040                856      BNE     subOpCode    
000017A8                           857      
000017A8                           858  addMethod                        *ADD output
000017A8  43F9 0000214E            859      LEA     outputADD,A1         *Outputs "ADD" onto console
000017AE  103C 000E                860      MOVE.B  #14,D0
000017B2  4E4F                     861      TRAP    #15
000017B4                           862      
000017B4  4EB9 00001E82            863      JSR     dotOpMode           *Checks if it's a byte,word, or long
000017BA                           864      
000017BA  BC3C 0001                865      CMP.B   #1,D6               *If D6 == 1, the data register is the source
000017BE  6700 068A                866      BEQ     altOrder            *   D6 was decided in dotOpMode(?)
000017C2                           867      
000017C2  BC3C 0002                868      CMP.B   #2,D6
000017C6  6700 069E                869      BEQ     addaOrder           *go do ADDA stuff
000017CA                           870      
000017CA  4EB9 00001F32            871      JSR     sourceEA            *outputs what the source is
000017D0                           872      
000017D0  43F9 0000220C            873      LEA     outputComma,A1      *Commas~~~
000017D6  103C 000E                874      MOVE.B  #14,D0
000017DA  4E4F                     875      TRAP    #15
000017DC                           876      
000017DC  4EB9 00002096            877      JSR     addDestinationEA       *outputs what the destination is
000017E2                           878      
000017E2  6000 0930                879      BRA     DONE
000017E6                           880      
000017E6                           881  subOpCode
000017E6  BA3C 0009                882      CMP.B   #9,D5               *is it SUB?
000017EA  6600 0038                883      BNE     subQOpCode          *not SUB, check if SUBQ
000017EE                           884  
000017EE                           885  subMethod
000017EE  43F9 00002154            886      LEA     outputSUB,A1        *output SUB to the console
000017F4  103C 000E                887      MOVE.B  #14,D0  
000017F8  4E4F                     888      TRAP    #15
000017FA                           889  
000017FA  4EB9 00001E82            890      JSR     dotOpMode           *check if its a B,W, or L
00001800                           891  
00001800  BC3C 0001                892      CMP.B   #1,D6               *if D6 == 1, the data register is the source
00001804  6700 0644                893      BEQ     altOrder
00001808                           894  
00001808  4EB9 00001F32            895      JSR     sourceEA            *outputs what the source is
0000180E                           896  
0000180E  43F9 0000220C            897      LEA     outputComma,A1      *commas
00001814  103C 000E                898      MOVE.B  #14,D0
00001818  4E4F                     899      TRAP    #15
0000181A                           900  
0000181A  4EB9 00002096            901      JSR     addDestinationEA    *outputs what ths destination is
00001820                           902  
00001820  6000 08F2                903      BRA     DONE                
00001824                           904  
00001824                           905  subQOpCode
00001824  BA3C 0005                906      CMP.B   #5,D5               *is it SUBQ?
00001828  6600 008A                907      BNE     orOpCode            *check if its DIVS.W
0000182C                           908      
0000182C                           909  subQMethod
0000182C  43F9 00002158            910      LEA     outputSUBQ,A1       *output SUBQ
00001832  103C 000E                911      MOVE.B  #14,D0
00001836  4E4F                     912      TRAP    #15
00001838                           913      
00001838  3604                     914      MOVE.W  D4,D3               *move original word from D4
0000183A  123C 000A                915      MOVE.B  #10,D1              *hacks
0000183E  E37B                     916      ROL.W   D1,D3               *ROL by 10
00001840  C6BC 00000003            917      AND.L   #00000003,D3        *Mask 
00001846  4EB9 00001EF6            918      JSR     byteOpMode          *check if B,W,L
0000184C                           919      
0000184C  4EB9 00001868            920      JSR     subQData            *outputs #1-#8
00001852                           921      
00001852  43F9 0000220C            922      LEA     outputComma,A1      *commas
00001858  103C 000E                923      MOVE.B  #14,D0
0000185C  4E4F                     924      TRAP    #15
0000185E                           925      
0000185E  4EB9 00001F32            926      JSR     sourceEA            *get the source
00001864                           927      
00001864  6000 08AE                928      BRA     DONE
00001868                           929      
00001868                           930      
00001868                           931  subQData
00001868  3604                     932      MOVE.W  D4,D3               *move original word from D4
0000186A  EF5B                     933      ROL.W   #7,D3               *ROL 7
0000186C  C6BC 00000007            934      AND.L   #$00000007,D3       *mask the bits
00001872                           935      
00001872  B63C 0000                936      CMP.B   #0,D3               *if its 0 display 8
00001876  6700 0022                937      BEQ     display8ForSubQ
0000187A                           938      
0000187A  B63C 0008                939      CMP.B   #8,D3
0000187E  6C00 05AC                940      BGE     dataOpCode
00001882                           941      
00001882  43F9 00002200            942      LEA     outputPound,A1      *output #
00001888  103C 000E                943      MOVE.B  #14,D0
0000188C  4E4F                     944      TRAP    #15
0000188E                           945      
0000188E  4281                     946      CLR.L   D1
00001890  1203                     947      MOVE.B  D3,D1               *output 1-7
00001892  103C 0003                948      MOVE.B  #3,D0
00001896  4E4F                     949      TRAP    #15
00001898                           950      
00001898  4E75                     951      RTS                         *return to subQmethod
0000189A                           952      
0000189A                           953  display8ForSubQ
0000189A                           954  
0000189A  43F9 00002200            955      LEA     outputPound,A1      *output #
000018A0  103C 000E                956      MOVE.B  #14,D0
000018A4  4E4F                     957      TRAP    #15
000018A6  4281                     958      CLR.L   D1
000018A8  123C 0008                959      MOVE.B  #8,D1               *output 8
000018AC  103C 0003                960      MOVE.B  #3,D0
000018B0  4E4F                     961      TRAP    #15
000018B2                           962      
000018B2  4E75                     963      RTS                         *return to subQMethod
000018B4                           964  
000018B4                           965  orOpCode
000018B4  BA3C 0008                966      CMP.B   #8,D5   
000018B8  6600 008A                967      BNE     eorOpCode
000018BC                           968      
000018BC  2A04                     969      MOVE.L  D4,D5
000018BE  720A                     970      MOVE.L  #10,D1
000018C0  E37D                     971      ROL.W   D1,D5
000018C2                           972      
000018C2  CABC 00000007            973      AND.L   #$00000007,D5
000018C8                           974      
000018C8  BA3C 0007                975      CMP.B   #7,D5
000018CC  6700 0038                976      BEQ     divsWOpCode
000018D0                           977      
000018D0                           978  orMethod
000018D0  43F9 000021AF            979      LEA     outputOR,A1
000018D6  103C 000E                980      MOVE.B  #14,D0
000018DA  4E4F                     981      TRAP    #15
000018DC                           982      
000018DC  4EB9 00001E82            983      JSR     dotOpMode
000018E2                           984      
000018E2  BC3C 0001                985      CMP.B   #1,D6
000018E6  6700 0562                986      BEQ     altOrder
000018EA                           987      
000018EA  4EB9 00001F32            988      JSR     sourceEA
000018F0                           989      
000018F0  43F9 0000220C            990      LEA     outputComma,A1
000018F6  103C 000E                991      MOVE.B  #14,D0
000018FA  4E4F                     992      TRAP    #15
000018FC                           993      
000018FC  4EB9 00002096            994      JSR     addDestinationEA
00001902                           995      
00001902  6000 0810                996      BRA     DONE
00001906                           997      
00001906                           998  divsWOpCode
00001906                           999  *    CMP.B   #8,D5
00001906                          1000  *    BEQ     divsWCheck          *bits 8,7,6 need to make 7 to be DIVSW
00001906                          1001  *    BRA     eorOpCode
00001906                          1002  *    
00001906                          1003  divsWCheck
00001906  3604                    1004      MOVE.W  D4,D3
00001908  143C 000A               1005      MOVE.B  #10,D2
0000190C  E57B                    1006      ROL.W   D2,D3
0000190E  C6BC 00000007           1007      AND.L   #$00000007,D3
00001914  B63C 0007               1008      CMP.B   #7,D3
00001918  6600 07FA               1009      BNE     DONE
0000191C                          1010      
0000191C  43F9 00002180           1011      LEA     outputDIVSW,A1
00001922  103C 000E               1012      MOVE.B  #14,D0
00001926  4E4F                    1013      TRAP    #15
00001928                          1014      
00001928  4EB9 00001F32           1015      JSR     sourceEA 
0000192E                          1016      
0000192E  43F9 0000220C           1017      LEA     outputComma,A1
00001934  103C 000E               1018      MOVE.B  #14,D0
00001938  4E4F                    1019      TRAP    #15
0000193A                          1020      
0000193A  4EB9 00002096           1021      JSR     addDestinationEA
00001940                          1022      
00001940  6000 07D2               1023      BRA     DONE
00001944                          1024      
00001944                          1025  eorOpCode
00001944  BA3C 000B               1026      CMP.B   #11,D5
00001948  6600 0078               1027      BNE     shiftsOpCode
0000194C                          1028      
0000194C  2A04                    1029      MOVE.L  D4,D5
0000194E  E15D                    1030      ROL.W   #8,D5
00001950  CABC 00000001           1031      AND.L   #$00000001,D5
00001956                          1032      
00001956                          1033      
00001956                          1034  eorMethod
00001956  BA3C 0001               1035      CMP.B   #1,D5
0000195A  6600 0030               1036      BNE     cmpOpCode
0000195E                          1037      
0000195E  43F9 000021B2           1038      LEA     outputEOR,A1
00001964  103C 000E               1039      MOVE.B  #14,D0
00001968  4E4F                    1040      TRAP    #15
0000196A                          1041      
0000196A  4EB9 00001E82           1042      JSR     dotOpMode
00001970                          1043      
00001970  4EB9 00002096           1044      JSR     addDestinationEA
00001976                          1045      
00001976  43F9 0000220C           1046      LEA     outputComma,A1
0000197C  103C 000E               1047      MOVE.B  #14,D0
00001980  4E4F                    1048      TRAP    #15
00001982                          1049      
00001982  4EB9 00001F32           1050      JSR     sourceEA
00001988                          1051      
00001988  6000 078A               1052      BRA     DONE    
0000198C                          1053  
0000198C                          1054  cmpOpCode
0000198C  BA3C 0000               1055      CMP.B   #0,D5
00001990  6600 0782               1056      BNE     DONE
00001994                          1057      
00001994  43F9 000021BB           1058      LEA     outputCMP,A1
0000199A  103C 000E               1059      MOVE.B  #14,D0
0000199E  4E4F                    1060      TRAP    #15
000019A0                          1061      
000019A0  4EB9 00001E82           1062      JSR     dotOpMode
000019A6                          1063      
000019A6  4EB9 00001F32           1064      JSR     sourceEA
000019AC                          1065      
000019AC  43F9 0000220C           1066      LEA     outputComma,A1
000019B2  103C 000E               1067      MOVE.B  #14,D0
000019B6  4E4F                    1068      TRAP    #15
000019B8                          1069      
000019B8  4EB9 00002096           1070      JSR     addDestinationEA
000019BE                          1071      
000019BE  6000 0754               1072      BRA     DONE
000019C2                          1073     
000019C2                          1074  shiftsOpCode
000019C2  BA3C 000E               1075      CMP.B   #14,D5
000019C6  6600 0212               1076      BNE     mulsWOpCode
000019CA                          1077      
000019CA                          1078  shiftMemoryShift
000019CA  2A04                    1079      MOVE.L  D4,D5
000019CC  EC5D                    1080      ROR.W   #6,D5
000019CE  CABC 00000003           1081      AND.L   #$00000003,D5
000019D4                          1082      
000019D4  BA3C 0003               1083      CMP.B   #3,D5
000019D8  6600 009C               1084      BNE     shiftRegisterShift
000019DC                          1085      
000019DC  2A04                    1086      MOVE.L  D4,D5
000019DE  EF5D                    1087      ROL.W   #7,D5
000019E0  CABC 00000003           1088      AND.L   #$00000003,D5
000019E6                          1089      
000019E6                          1090  memoryLSD
000019E6  BA3C 0001               1091      CMP.B   #1,D5
000019EA  6600 002A               1092      BNE     memoryASD
000019EE                          1093      
000019EE  43F9 000021C5           1094      LEA     outputLS,A1
000019F4  103C 000E               1095      MOVE.B  #14,D0
000019F8  4E4F                    1096      TRAP    #15
000019FA                          1097      
000019FA  4EB9 00001B34           1098      JSR     leftRight
00001A00                          1099      
00001A00  43F9 000021EA           1100      LEA     outputWord,A1
00001A06  103C 000E               1101      MOVE.B  #14,D0
00001A0A  4E4F                    1102      TRAP    #15
00001A0C                          1103      
00001A0C  4EB9 00001F32           1104      JSR     sourceEA
00001A12                          1105      
00001A12  6000 0700               1106      BRA     DONE
00001A16                          1107      
00001A16                          1108  memoryASD
00001A16  BA3C 0000               1109      CMP.B   #0,D5
00001A1A  6600 002A               1110      BNE     memoryROD
00001A1E                          1111      
00001A1E  43F9 000021C8           1112      LEA     outputAS,A1
00001A24  103C 000E               1113      MOVE.B  #14,D0
00001A28  4E4F                    1114      TRAP    #15
00001A2A                          1115      
00001A2A  4EB9 00001B34           1116      JSR     leftRight
00001A30                          1117      
00001A30  43F9 000021EA           1118      LEA     outputWord,A1
00001A36  103C 000E               1119      MOVE.B  #14,D0
00001A3A  4E4F                    1120      TRAP    #15
00001A3C                          1121      
00001A3C  4EB9 00001F32           1122      JSR     sourceEA
00001A42                          1123      
00001A42  6000 06D0               1124      BRA     DONE
00001A46                          1125      
00001A46                          1126  memoryROD
00001A46  BA3C 0003               1127      CMP.B   #3,D5
00001A4A  6600 03E0               1128      BNE     dataOpCode
00001A4E                          1129      
00001A4E  43F9 000021CB           1130      LEA     outputRO,A1
00001A54  103C 000E               1131      MOVE.B  #14,D0
00001A58  4E4F                    1132      TRAP    #15
00001A5A                          1133      
00001A5A  4EB9 00001B34           1134      JSR     leftRight
00001A60                          1135      
00001A60  43F9 000021EA           1136      LEA     outputWord,A1
00001A66  103C 000E               1137      MOVE.B  #14,D0
00001A6A  4E4F                    1138      TRAP    #15
00001A6C                          1139      
00001A6C  4EB9 00001F32           1140      JSR     sourceEA
00001A72                          1141      
00001A72  6000 06A0               1142      BRA     DONE
00001A76                          1143      
00001A76                          1144      
00001A76                          1145      
00001A76                          1146  shiftRegisterShift
00001A76  2A04                    1147      MOVE.L  D4,D5
00001A78  E65D                    1148      ROR.W   #3,D5
00001A7A  CABC 00000003           1149      AND.L   #$00000003,D5
00001A80                          1150      
00001A80                          1151  lsdOpCode
00001A80  BA3C 0001               1152      CMP.B   #1,D5
00001A84  6600 0036               1153      BNE     asdOpCode
00001A88                          1154      
00001A88                          1155  lsdMethod
00001A88  43F9 000021C5           1156      LEA     outputLS,A1
00001A8E  103C 000E               1157      MOVE.B  #14,D0
00001A92  4E4F                    1158      TRAP    #15
00001A94                          1159      
00001A94  4EB9 00001B34           1160      JSR     leftRight
00001A9A                          1161      
00001A9A  4EB9 00001E82           1162      JSR     dotOpMode
00001AA0                          1163      
00001AA0  4EB9 00001B62           1164      JSR     shiftSourceEA
00001AA6                          1165      
00001AA6  43F9 0000220C           1166      LEA     outputComma,A1
00001AAC  103C 000E               1167      MOVE.B  #14,D0
00001AB0  4E4F                    1168      TRAP    #15
00001AB2                          1169      
00001AB2  4EB9 00001BBC           1170      JSR     shiftDestEA
00001AB8                          1171      
00001AB8  6000 065A               1172      BRA     DONE
00001ABC                          1173   
00001ABC                          1174  asdOpCode
00001ABC  BA3C 0000               1175      CMP.B   #0,D5
00001AC0  6600 0036               1176      BNE     rodOpCode
00001AC4                          1177      
00001AC4  43F9 000021C8           1178      LEA     outputAS,A1
00001ACA  103C 000E               1179      MOVE.B  #14,D0
00001ACE  4E4F                    1180      TRAP    #15
00001AD0                          1181      
00001AD0  4EB9 00001B34           1182      JSR     leftRight
00001AD6                          1183      
00001AD6  4EB9 00001E82           1184      JSR     dotOpMode
00001ADC                          1185      
00001ADC  4EB9 00001B62           1186      JSR     shiftSourceEA
00001AE2                          1187      
00001AE2  43F9 0000220C           1188      LEA     outputComma,A1
00001AE8  103C 000E               1189      MOVE.B  #14,D0
00001AEC  4E4F                    1190      TRAP    #15
00001AEE                          1191      
00001AEE  4EB9 00001BBC           1192      JSR     shiftDestEA    
00001AF4                          1193      
00001AF4  6000 061E               1194      BRA     DONE
00001AF8                          1195      
00001AF8                          1196  rodOpCode
00001AF8  BA3C 0003               1197      CMP.B   #3,D5
00001AFC  6600 0616               1198      BNE     DONE
00001B00                          1199      
00001B00  43F9 000021CB           1200      LEA     outputRO,A1
00001B06  103C 000E               1201      MOVE.B  #14,D0
00001B0A  4E4F                    1202      TRAP    #15
00001B0C                          1203      
00001B0C  4EB9 00001B34           1204      JSR     leftRight
00001B12                          1205      
00001B12  4EB9 00001E82           1206      JSR     dotOpMode
00001B18                          1207      
00001B18  4EB9 00001B62           1208      JSR     shiftSourceEA
00001B1E                          1209      
00001B1E  43F9 0000220C           1210      LEA     outputComma,A1
00001B24  103C 000E               1211      MOVE.B  #14,D0
00001B28  4E4F                    1212      TRAP    #15
00001B2A                          1213      
00001B2A  4EB9 00001BBC           1214      JSR     shiftDestEA
00001B30                          1215      
00001B30  6000 05E2               1216      BRA     DONE
00001B34                          1217      
00001B34                          1218  leftRight
00001B34  2604                    1219      MOVE.L  D4,D3
00001B36  E15B                    1220      ROL.W   #8,D3
00001B38  C6BC 00000001           1221      AND.L   #$00000001,D3
00001B3E                          1222  
00001B3E  B63C 0000               1223      CMP.B   #0,D3
00001B42  6700 0010               1224      BEQ     rightRight
00001B46                          1225      
00001B46  43F9 000021CE           1226      LEA     outputLeft,A1
00001B4C  103C 000E               1227      MOVE.B  #14,D0
00001B50  4E4F                    1228      TRAP    #15
00001B52                          1229      
00001B52  4E75                    1230      RTS
00001B54                          1231      
00001B54                          1232  rightRight
00001B54  43F9 000021D0           1233      LEA     outputRight,A1
00001B5A  103C 000E               1234      MOVE.B  #14,D0
00001B5E  4E4F                    1235      TRAP    #15
00001B60                          1236      
00001B60  4E75                    1237      RTS
00001B62                          1238      
00001B62                          1239  shiftSourceEA
00001B62  2404                    1240      MOVE.L  D4,D2
00001B64  EA5A                    1241      ROR.W   #5,D2
00001B66  C4BC 00000001           1242      AND.L   #$00000001,D2
00001B6C                          1243  
00001B6C  2604                    1244      MOVE.L  D4,D3
00001B6E  EF5B                    1245      ROL.W   #7,D3
00001B70  C6BC 00000007           1246      AND.L   #$00000007,D3
00001B76                          1247      
00001B76  B43C 0000               1248      CMP.B   #0,D2
00001B7A  6700 0018               1249      BEQ     shiftImmediateEA
00001B7E                          1250      
00001B7E  43F9 000021FE           1251      LEA     outputDn,A1
00001B84  103C 000E               1252      MOVE.B  #14,D0
00001B88  4E4F                    1253      TRAP    #15
00001B8A                          1254      
00001B8A  2203                    1255      MOVE.L  D3,D1
00001B8C  103C 0003               1256      MOVE.B  #3,D0
00001B90  4E4F                    1257      TRAP    #15
00001B92                          1258      
00001B92  4E75                    1259      RTS
00001B94                          1260      
00001B94                          1261  shiftImmediateEA
00001B94  43F9 00002200           1262      LEA     outputPound,A1
00001B9A  103C 000E               1263      MOVE.B  #14,D0
00001B9E  4E4F                    1264      TRAP    #15
00001BA0                          1265      
00001BA0  B63C 0000               1266      CMP.B   #0,D3
00001BA4  6700 000C               1267      BEQ     shiftImmediateEight
00001BA8                          1268      
00001BA8  2203                    1269      MOVE.L  D3,D1
00001BAA  103C 0003               1270      MOVE.B  #3,D0
00001BAE  4E4F                    1271      TRAP    #15
00001BB0                          1272      
00001BB0  4E75                    1273      RTS
00001BB2                          1274      
00001BB2                          1275  shiftImmediateEight
00001BB2  7208                    1276      MOVE.L  #8,D1
00001BB4  103C 0003               1277      MOVE.B  #3,D0
00001BB8  4E4F                    1278      TRAP    #15
00001BBA                          1279      
00001BBA  4E75                    1280      RTS
00001BBC                          1281      
00001BBC                          1282  shiftDestEA
00001BBC  2604                    1283      MOVE.L  D4,D3
00001BBE  C6BC 00000007           1284      AND.L   #$00000007,D3
00001BC4                          1285      
00001BC4  43F9 000021FE           1286      LEA     outputDn,A1
00001BCA  103C 000E               1287      MOVE.B  #14,D0
00001BCE  4E4F                    1288      TRAP    #15
00001BD0                          1289      
00001BD0  2203                    1290      MOVE.L  D3,D1
00001BD2  103C 0003               1291      MOVE.B  #3,D0
00001BD6  4E4F                    1292      TRAP    #15
00001BD8                          1293      
00001BD8  4E75                    1294      RTS
00001BDA                          1295      
00001BDA                          1296  mulsWOpCode
00001BDA  BA3C 000C               1297      CMP.B   #12,D5
00001BDE  6600 004A               1298      BNE     negOpCode
00001BE2  3604                    1299      MOVE.W  D4,D3
00001BE4  EC5B                    1300      ROR.W   #6,D3
00001BE6  C63C 0007               1301      AND.B   #7,D3
00001BEA  B63C 0007               1302      CMP.B   #7,D3
00001BEE  6600 023C               1303      BNE     dataOpCode   
00001BF2                          1304  
00001BF2                          1305  mulsWMethod
00001BF2  3604                    1306      MOVE.W  D4,D3
00001BF4  E61B                    1307      ROR.B   #3,D3
00001BF6  C63C 0007               1308      AND.B   #7,D3
00001BFA  B63C 0001               1309      CMP.B   #1,D3
00001BFE  6700 022C               1310      BEQ     dataOpCode
00001C02                          1311      
00001C02                          1312  mulsOutput    
00001C02  43F9 0000217A           1313      LEA     outputMULS,A1
00001C08  103C 000E               1314      MOVE.B  #14,D0
00001C0C  4E4F                    1315      TRAP    #15
00001C0E                          1316      
00001C0E  4EB9 00001F32           1317      JSR     sourceEA
00001C14                          1318      
00001C14  43F9 0000220C           1319      LEA     outputComma,A1
00001C1A  103C 000E               1320      MOVE.B  #14,D0
00001C1E  4E4F                    1321      TRAP    #15
00001C20                          1322      
00001C20  4EB9 00002096           1323      JSR     addDestinationEA
00001C26                          1324      
00001C26  6000 04EC               1325      BRA     DONE
00001C2A                          1326      
00001C2A                          1327  *mulsLOpCode
00001C2A                          1328  *    MOVE.W  D4,D3
00001C2A                          1329  *    MOVE.B  #10,D2
00001C2A                          1330  *    ROL.W   D2,D3
00001C2A                          1331  *    AND.W   #$01FF,D3
00001C2A                          1332  *    CMP.W   #304,D3
00001C2A                          1333  *    BNE     negOpCode
00001C2A                          1334      
00001C2A                          1335  mulsLMethod
00001C2A                          1336          
00001C2A                          1337      
00001C2A                          1338  negOpCode
00001C2A  3604                    1339      MOVE.W  D4,D3
00001C2C  E15B                    1340      ROL.W   #8,D3
00001C2E  B63C 0044               1341      CMP.B   #$44,D3
00001C32  6600 002E               1342      BNE     braOpCode
00001C36                          1343      
00001C36                          1344  negMethod
00001C36  43F9 000021A2           1345      LEA     outputNEG,A1        *output NEG to the console
00001C3C  103C 000E               1346      MOVE.B  #14,D0
00001C40  4E4F                    1347      TRAP    #15
00001C42                          1348      
00001C42  4283                    1349      CLR.L   D3
00001C44  3604                    1350      MOVE.W  D4,D3               *move original word from D4
00001C46  123C 000A               1351      MOVE.B  #10,D1              *hacks
00001C4A  E37B                    1352      ROL.W   D1,D3               *ROL by 10
00001C4C  C6BC 00000003           1353      AND.L   #00000003,D3        *Mask 
00001C52  4EB9 00001EF6           1354      JSR     byteOpMode          *check if B,W,L
00001C58                          1355          
00001C58  4EB9 00001F32           1356      JSR     sourceEA
00001C5E                          1357      
00001C5E  6000 04B4               1358      BRA     DONE
00001C62                          1359  
00001C62                          1360  braOpCode
00001C62  3604                    1361      MOVE.W  D4,D3               *move the opcode word into D3
00001C64  E15B                    1362      ROL.W   #8,D3               *isolate the last byte
00001C66  B63C 0060               1363      CMP.B   #$60,D3             *is it a BRA?
00001C6A  6600 0154               1364      BNE     bccOpCode           *its data then
00001C6E                          1365      
00001C6E                          1366  braMethod
00001C6E  43F9 000021A6           1367      LEA     outputBRA,A1        
00001C74  103C 000E               1368      MOVE.B  #14,D0
00001C78  4E4F                    1369      TRAP    #15
00001C7A                          1370  
00001C7A                          1371  
00001C7A                          1372  bccDisplacement    
00001C7A  1604                    1373      MOVE.B  D4,D3
00001C7C  C67C 00FF               1374      AND.W   #$00FF,D3
00001C80  B63C 0000               1375      CMP.B   #$00,D3
00001C84  6700 0048               1376      BEQ     bitDisplacement16
00001C88  B63C 00FF               1377      CMP.B   #$FF,D3
00001C8C  6700 00B6               1378      BEQ     bitDisplacement32
00001C90  E11B                    1379      ROL.B   #8,D3
00001C92  0A43 00FF               1380      EOR.W   #$FF,D3
00001C96  5243                    1381      ADD.W   #1,D3
00001C98                          1382      
00001C98  43F9 00002219           1383      LEA     outputNegSign,A1
00001C9E  103C 000E               1384      MOVE.B  #14,D0
00001CA2  4E4F                    1385      TRAP    #15
00001CA4                          1386      
00001CA4  3203                    1387      MOVE.W  D3,D1
00001CA6  103C 0003               1388      MOVE.B  #3,D0
00001CAA  4E4F                    1389      TRAP    #15
00001CAC                          1390      
00001CAC  43F9 00002214           1391      LEA     outputSpace,A1
00001CB2  103C 000E               1392      MOVE.B  #14,D0
00001CB6  4E4F                    1393      TRAP    #15
00001CB8                          1394      
00001CB8  304D                    1395      MOVE.W  A5,A0
00001CBA  90C3                    1396      SUBA.W  D3,A0
00001CBC  3208                    1397      MOVE.W  A0,D1
00001CBE  103C 000F               1398      MOVE.B  #15,D0
00001CC2  143C 0010               1399      MOVE.B  #16,D2
00001CC6  4E4F                    1400      TRAP    #15
00001CC8                          1401      
00001CC8  304C                    1402      MOVE.W  A4,A0
00001CCA                          1403      
00001CCA                          1404      
00001CCA  6000 0448               1405      BRA     DONE
00001CCE                          1406     
00001CCE                          1407  bitDisplacement16
00001CCE                          1408      
00001CCE  304D                    1409      MOVE.W  A5,A0
00001CD0  381D                    1410      MOVE.W  (A5)+,D4
00001CD2  3604                    1411      MOVE.W  D4,D3
00001CD4  E95B                    1412      ROL.W   #4,D3
00001CD6  C67C 000F               1413      AND.W   #$000F,D3
00001CDA  B67C 0008               1414      CMP.W   #8,D3
00001CDE  6C00 002A               1415      BGE     negBit16
00001CE2                          1416      
00001CE2  3204                    1417      MOVE.W  D4,D1
00001CE4  103C 0003               1418      MOVE.B  #3,D0
00001CE8  4E4F                    1419      TRAP    #15
00001CEA                          1420      
00001CEA  43F9 00002214           1421      LEA     outputSpace,A1
00001CF0  103C 000E               1422      MOVE.B  #14,D0
00001CF4  4E4F                    1423      TRAP    #15
00001CF6                          1424      
00001CF6  D0C4                    1425      ADDA.W  D4,A0
00001CF8  3208                    1426      MOVE.W  A0,D1
00001CFA  103C 000F               1427      MOVE.B  #15,D0
00001CFE  143C 0010               1428      MOVE.B  #16,D2
00001D02  4E4F                    1429      TRAP    #15
00001D04                          1430      
00001D04  304C                    1431      MOVE.W  A4,A0
00001D06                          1432      
00001D06  6000 040C               1433      BRA DONE
00001D0A                          1434      
00001D0A                          1435  negBit16
00001D0A                          1436  
00001D0A  0A44 FFFF               1437      EOR.W   #$FFFF,D4
00001D0E  5244                    1438      ADD.W   #1,D4
00001D10                          1439      
00001D10  43F9 00002219           1440      LEA     outputNegSign,A1
00001D16  103C 000E               1441      MOVE.B  #14,D0
00001D1A  4E4F                    1442      TRAP    #15
00001D1C                          1443      
00001D1C  3204                    1444      MOVE.W  D4,D1
00001D1E  103C 0003               1445      MOVE.B  #3,D0
00001D22  4E4F                    1446      TRAP    #15
00001D24                          1447      
00001D24  43F9 00002214           1448      LEA     outputSpace,A1
00001D2A  103C 000E               1449      MOVE.B  #14,D0
00001D2E  4E4F                    1450      TRAP    #15
00001D30                          1451      
00001D30  90C4                    1452      SUBA.W  D4,A0
00001D32  3208                    1453      MOVE.W  A0,D1
00001D34  103C 000F               1454      MOVE.B  #15,D0
00001D38  143C 0010               1455      MOVE.B  #16,D2
00001D3C  4E4F                    1456      TRAP    #15
00001D3E                          1457      
00001D3E  304C                    1458      MOVE.W  A4,A0
00001D40                          1459      
00001D40  6000 03D2               1460      BRA     DONE
00001D44                          1461      
00001D44                          1462  bitDisplacement32
00001D44                          1463  
00001D44  204D                    1464      MOVE.L  A5,A0
00001D46  281D                    1465      MOVE.L  (A5)+,D4
00001D48  2604                    1466      MOVE.L  D4,D3
00001D4A  E95B                    1467      ROL.W   #4,D3
00001D4C  C6BC 0000000F           1468      AND.L   #$0000000F,D3
00001D52  B6BC 00000008           1469      CMP.L   #8,D3
00001D58  6C00 002A               1470      BGE     negBit32
00001D5C                          1471      
00001D5C  2204                    1472      MOVE.L  D4,D1
00001D5E  103C 0003               1473      MOVE.B  #3,D0
00001D62  4E4F                    1474      TRAP    #15
00001D64                          1475      
00001D64  43F9 00002214           1476      LEA     outputSpace,A1
00001D6A  103C 000E               1477      MOVE.B  #14,D0
00001D6E  4E4F                    1478      TRAP    #15
00001D70                          1479      
00001D70  D1C4                    1480      ADDA.L  D4,A0
00001D72  2208                    1481      MOVE.L  A0,D1
00001D74  103C 000F               1482      MOVE.B  #15,D0
00001D78  143C 0010               1483      MOVE.B  #16,D2
00001D7C  4E4F                    1484      TRAP    #15
00001D7E                          1485      
00001D7E  204C                    1486      MOVE.L  A4,A0
00001D80                          1487      
00001D80  6000 0392               1488      BRA DONE
00001D84                          1489  
00001D84                          1490  negBit32
00001D84                          1491  
00001D84  0A84 FFFFFFFF           1492      EOR.L   #$FFFFFFFF,D4
00001D8A  5284                    1493      ADD.L   #1,D4
00001D8C                          1494      
00001D8C  43F9 00002219           1495      LEA     outputNegSign,A1
00001D92  103C 000E               1496      MOVE.B  #14,D0
00001D96  4E4F                    1497      TRAP    #15
00001D98                          1498      
00001D98  2204                    1499      MOVE.L  D4,D1
00001D9A  103C 0003               1500      MOVE.B  #3,D0
00001D9E  4E4F                    1501      TRAP    #15
00001DA0                          1502      
00001DA0  43F9 00002214           1503      LEA     outputSpace,A1
00001DA6  103C 000E               1504      MOVE.B  #14,D0
00001DAA  4E4F                    1505      TRAP    #15
00001DAC                          1506      
00001DAC                          1507      *MOVE.L  A5,A0
00001DAC  91C4                    1508      SUBA.L  D4,A0
00001DAE  2208                    1509      MOVE.L  A0,D1
00001DB0  103C 000F               1510      MOVE.B  #15,D0
00001DB4  143C 0010               1511      MOVE.B  #16,D2
00001DB8  4E4F                    1512      TRAP    #15
00001DBA                          1513      
00001DBA  204C                    1514      MOVE.L  A4,A0
00001DBC                          1515      
00001DBC  6000 0356               1516      BRA     DONE
00001DC0                          1517      
00001DC0                          1518  bccOpCode
00001DC0  BA3C 0006               1519      CMP.B   #6,D5               *is it Bcc?
00001DC4  6600 0066               1520      BNE     dataOpCode          *its data then
00001DC8                          1521      
00001DC8                          1522  bccMethod
00001DC8  3604                    1523      MOVE.W  D4,D3
00001DCA  E15B                    1524      ROL.W   #8,D3
00001DCC  C67C 000F               1525      AND.W   #$000F,D3
00001DD0  B63C 0005               1526      CMP.B   #5,D3
00001DD4  6700 0016               1527      BEQ     bcs
00001DD8  B63C 000C               1528      CMP.B   #$C,D3
00001DDC  6700 001E               1529      BEQ     bge
00001DE0  B63C 000D               1530      CMP.B   #$D,D3
00001DE4  6700 0026               1531      BEQ     bct
00001DE8  6000 0032               1532      BRA     bvc
00001DEC                          1533      
00001DEC                          1534  bcs
00001DEC  43F9 000021D2           1535      LEA     outputBCS,A1
00001DF2  103C 000E               1536      MOVE.B  #14,D0
00001DF6  4E4F                    1537      TRAP    #15
00001DF8                          1538      
00001DF8  6000 FE80               1539      BRA     bccDisplacement
00001DFC                          1540      
00001DFC                          1541  bge
00001DFC  43F9 000021D7           1542      LEA     outputBGE,A1
00001E02  103C 000E               1543      MOVE.B  #14,D0
00001E06  4E4F                    1544      TRAP    #15
00001E08                          1545      
00001E08  6000 FE70               1546      BRA     bccDisplacement
00001E0C                          1547  
00001E0C                          1548  bct
00001E0C  43F9 000021DC           1549      LEA     outputBCT,A1
00001E12  103C 000E               1550      MOVE.B  #14,D0
00001E16  4E4F                    1551      TRAP    #15
00001E18                          1552      
00001E18  6000 FE60               1553      BRA     bccDisplacement
00001E1C                          1554      
00001E1C                          1555  bvc
00001E1C  43F9 000021E1           1556      LEA     outputBVC,A1
00001E22  103C 000E               1557      MOVE.B  #14,D0
00001E26  4E4F                    1558      TRAP    #15
00001E28                          1559      
00001E28  6000 FE50               1560      BRA     bccDisplacement
00001E2C                          1561      
00001E2C                          1562  
00001E2C                          1563             
00001E2C                          1564  dataOpCode
00001E2C  4283                    1565      CLR.L   D3
00001E2E  43F9 0000219C           1566      LEA     outputData,A1
00001E34  103C 000E               1567      MOVE.B  #14,D0
00001E38  4E4F                    1568      TRAP    #15
00001E3A                          1569      
00001E3A  3215                    1570      MOVE.W  (A5),D1
00001E3C  103C 000F               1571      MOVE.B  #15,D0
00001E40  143C 0010               1572      MOVE.B  #16,D2
00001E44  4E4F                    1573      TRAP    #15
00001E46                          1574      
00001E46  6000 02CC               1575      BRA     DONE
00001E4A                          1576  
00001E4A                          1577  
00001E4A                          1578  altOrder                            *outputs the Dn as the source for ADD
00001E4A  4EB9 00002096           1579      JSR     addDestinationEA
00001E50                          1580      
00001E50  43F9 0000220C           1581      LEA     outputComma,A1
00001E56  103C 000E               1582      MOVE.B  #14,D0
00001E5A  4E4F                    1583      TRAP    #15
00001E5C                          1584      
00001E5C  4EB9 00001F32           1585      JSR     sourceEA
00001E62  6000 02B0               1586      BRA     DONE
00001E66                          1587      
00001E66                          1588  addaOrder                           *ADDA method
00001E66  4EB9 00001F32           1589      JSR     sourceEA                *output source first
00001E6C                          1590      
00001E6C  43F9 0000220C           1591      LEA     outputComma,A1          *Comma
00001E72  103C 000E               1592      MOVE.B  #14,D0
00001E76  4E4F                    1593      TRAP    #15
00001E78                          1594      
00001E78  4EB9 000020DE           1595      JSR     addaDestEA              *Have to set destination mode in addaDestEA
00001E7E  6000 0294               1596      BRA     DONE
00001E82                          1597  
00001E82                          1598  
00001E82                          1599  dotOpMode                           *Checks if it's a Byte,Word, or Long for ADD and SUB
00001E82  3604                    1600      MOVE.W  D4,D3                   *Gets the original code from D4                 
00001E84  143C 000A               1601      MOVE.B  #10,D2                  *yay hacks
00001E88                          1602      
00001E88  E57B                    1603      ROL.W   D2,D3                   *Rotates the original left by 10 bits
00001E8A  C6BC 00000007           1604      AND.L   #$00000007,D3           *mask it up
00001E90                          1605      
00001E90  B63C 0003               1606      CMP.B   #3,D3                   
00001E94  6C00 0006               1607      BGE     altOpMode               *if value is > 3, Dn is the source
00001E98                          1608      
00001E98  6000 005C               1609      BRA     byteOpMode    
00001E9C                          1610  
00001E9C                          1611  altOpMode                           *But wait, there's more!
00001E9C  B63C 0003               1612      CMP.B   #3,D3                   *If it's 3, it's an ADDA.W
00001EA0  6700 0016               1613      BEQ     addaWOpMode
00001EA4                          1614      
00001EA4  B63C 0007               1615      CMP.B   #7,D3                   *If it's a 7, it's an ADDA.L
00001EA8  6700 002C               1616      BEQ     addaLOpMode             *Otherwise, it's just ADD with Dn in source
00001EAC                          1617      
00001EAC  1C3C 0001               1618      MOVE.B  #1,D6                   *D6 is 1 if Dn is the source
00001EB0  C63C 0003               1619      AND.B   #$3,D3                  *Mask it so it can continue with the output
00001EB4  6000 0040               1620      BRA     byteOpMode              *without the meddling 2^2 bit
00001EB8                          1621  
00001EB8                          1622  addaWOpMode                         *It's an ADDA.W
00001EB8  3C3C 0002               1623      MOVE.W  #2,D6
00001EBC                          1624      
00001EBC  43F9 00002152           1625      LEA     outputADDA,A1
00001EC2  103C 000E               1626      MOVE.B  #14,D0
00001EC6  4E4F                    1627      TRAP    #15
00001EC8                          1628      
00001EC8  43F9 000021EA           1629      LEA     outputWord,A1
00001ECE  103C 000E               1630      MOVE.B  #14,D0
00001ED2  4E4F                    1631      TRAP    #15
00001ED4                          1632      
00001ED4  4E75                    1633      RTS
00001ED6                          1634      
00001ED6                          1635  addaLOpMode                         *It's an ADDA.L
00001ED6  3C3C 0002               1636      MOVE.W  #2,D6
00001EDA                          1637      
00001EDA  5207                    1638      ADD.B   #1,D7
00001EDC                          1639      
00001EDC  43F9 00002152           1640      LEA     outputADDA,A1
00001EE2  103C 000E               1641      MOVE.B  #14,D0
00001EE6  4E4F                    1642      TRAP    #15
00001EE8                          1643      
00001EE8  43F9 000021EE           1644      LEA     outputLong,A1
00001EEE  103C 000E               1645      MOVE.B  #14,D0
00001EF2  4E4F                    1646      TRAP    #15
00001EF4                          1647      
00001EF4  4E75                    1648      RTS
00001EF6                          1649      
00001EF6                          1650      
00001EF6                          1651  byteOpMode                          *It's a byte?
00001EF6  B63C 0000               1652      CMP.B   #0,D3
00001EFA  6600 0010               1653      BNE     wordOpMode
00001EFE                          1654      
00001EFE  43F9 000021E6           1655      LEA     outputByte,A1           *Output ".B" !
00001F04  103C 000E               1656      MOVE.B  #14,D0
00001F08  4E4F                    1657      TRAP    #15
00001F0A  4E75                    1658      RTS                             *Time to return back in time
00001F0C                          1659      
00001F0C                          1660  wordOpMode                          *It's a word?
00001F0C  B63C 0001               1661      CMP.B   #1,D3
00001F10  6600 0010               1662      BNE     longOpMode
00001F14                          1663      
00001F14  43F9 000021EA           1664      LEA     outputWord,A1           *Output ".W" onto console
00001F1A  103C 000E               1665      MOVE.B  #14,D0
00001F1E  4E4F                    1666      TRAP    #15
00001F20  4E75                    1667      RTS                             *Time warp~
00001F22                          1668      
00001F22                          1669  longOpMode                          *It better be a long then
00001F22  43F9 000021EE           1670      LEA     outputLong,A1           *outputs ".L" onto console
00001F28  103C 000E               1671      MOVE.B  #14,D0
00001F2C  4E4F                    1672      TRAP    #15
00001F2E                          1673      
00001F2E  5207                    1674      ADD.B   #1,D7
00001F30                          1675     
00001F30  4E75                    1676      RTS                             *whoosh~
00001F32                          1677   
00001F32                          1678      
00001F32                          1679  sourceEA                            *output the Source EA
00001F32  3604                    1680      MOVE.W  D4,D3                   *Put the original opcode into D3
00001F34  3403                    1681      MOVE.W  D3,D2                   *Copy that into D2
00001F36                          1682      
00001F36  E65A                    1683      ROR.W   #3,D2                   *Whoo~ Rotating~
00001F38  C4BC 00000007           1684      AND.L   #$00000007,D2           *D2 has Mode
00001F3E                          1685      
00001F3E                          1686  
00001F3E  C6BC 00000007           1687      AND.L   #$00000007,D3           *D3 has Register
00001F44                          1688  
00001F44                          1689   
00001F44                          1690  DnMode                          *Is the Mode a Data Register?
00001F44  4281                    1691      CLR.L   D1
00001F46                          1692      
00001F46  B43C 0000               1693      CMP.B   #0,D2
00001F4A  6600 0018               1694      BNE     AnMode
00001F4E                          1695      
00001F4E  43F9 000021FE           1696      LEA     outputDn,A1         *outputs "D" onto console
00001F54  103C 000E               1697      MOVE.B  #14,D0
00001F58  4E4F                    1698      TRAP    #15
00001F5A                          1699  
00001F5A  1203                    1700      MOVE.B  D3,D1               *outputs the register, whatever the numeric value is
00001F5C  103C 0003               1701      MOVE.B  #3,D0
00001F60  4E4F                    1702      TRAP    #15
00001F62                          1703      
00001F62  4E75                    1704      RTS                         *wooo~
00001F64                          1705    
00001F64                          1706  AnMode                          *Mode is an Address Register?
00001F64  B43C 0001               1707      CMP.B   #1,D2
00001F68  6600 0018               1708      BNE     deRefAnMode
00001F6C                          1709      
00001F6C  43F9 000021FC           1710      LEA     outputAn,A1         *Outputs "A" onto console
00001F72  103C 000E               1711      MOVE.B  #14,D0
00001F76  4E4F                    1712      TRAP    #15
00001F78                          1713      
00001F78  1203                    1714      MOVE.B  D3,D1               *Outputs the register value
00001F7A  103C 0003               1715      MOVE.B  #3,D0
00001F7E  4E4F                    1716      TRAP    #15
00001F80                          1717      
00001F80  4E75                    1718      RTS                         *psssh
00001F82                          1719      
00001F82                          1720  deRefAnMode                     *Mode is a (A0)?
00001F82  B43C 0002               1721      CMP.B   #2,D2               
00001F86  6600 0024               1722      BNE     postIncrementAnMode
00001F8A                          1723      
00001F8A  43F9 000021F2           1724      LEA     outputdeRefAn1,A1   *Outputs "(A" onto console
00001F90  103C 000E               1725      MOVE.B  #14,D0
00001F94  4E4F                    1726      TRAP    #15
00001F96                          1727      
00001F96  1203                    1728      MOVE.B  D3,D1               *outputs register value
00001F98  103C 0003               1729      MOVE.B  #3,D0
00001F9C  4E4F                    1730      TRAP    #15
00001F9E                          1731      
00001F9E  43F9 000021F5           1732      LEA     outputdeRefAn2,A1   *makes it pretty by outputting ")"
00001FA4  103C 000E               1733      MOVE.B  #14,D0
00001FA8  4E4F                    1734      TRAP    #15
00001FAA                          1735      
00001FAA  4E75                    1736      RTS                         *=-=
00001FAC                          1737      
00001FAC                          1738  postIncrementAnMode
00001FAC  B43C 0003               1739      CMP.B   #3,D2
00001FB0  6600 0024               1740      BNE     preDecrementAnMode
00001FB4                          1741      
00001FB4  43F9 000021F2           1742      LEA     outputdeRefAn1,A1
00001FBA  103C 000E               1743      MOVE.B  #14,D0
00001FBE  4E4F                    1744      TRAP    #15
00001FC0                          1745      
00001FC0  1203                    1746      MOVE.B  D3,D1
00001FC2  103C 0003               1747      MOVE.B  #3,D0
00001FC6  4E4F                    1748      TRAP    #15
00001FC8                          1749      
00001FC8  43F9 000021F7           1750      LEA     outputPostIncrementAn,A1
00001FCE  103C 000E               1751      MOVE.B  #14,D0
00001FD2  4E4F                    1752      TRAP    #15
00001FD4                          1753      
00001FD4  4E75                    1754      RTS
00001FD6                          1755      
00001FD6                          1756  preDecrementAnMode
00001FD6  B43C 0004               1757      CMP.B   #4,D2
00001FDA  6600 0030               1758      BNE     immediateData
00001FDE                          1759      
00001FDE  43F9 000021FA           1760      LEA     outputPreDecrementAn,A1
00001FE4  103C 000E               1761      MOVE.B  #14,D0
00001FE8  4E4F                    1762      TRAP    #15
00001FEA                          1763      
00001FEA  43F9 000021F2           1764      LEA     outputdeRefAn1,A1
00001FF0  103C 000E               1765      MOVE.B  #14,D0
00001FF4  4E4F                    1766      TRAP    #15
00001FF6                          1767      
00001FF6  1203                    1768      MOVE.B  D3,D1
00001FF8  103C 0003               1769      MOVE.B  #3,D0
00001FFC  4E4F                    1770      TRAP    #15
00001FFE                          1771      
00001FFE  43F9 000021F5           1772      LEA     outputdeRefAn2,A1
00002004  103C 000E               1773      MOVE.B  #14,D0
00002008  4E4F                    1774      TRAP    #15
0000200A                          1775      
0000200A  4E75                    1776      RTS
0000200C                          1777      
0000200C                          1778  immediateData                   *Mode is an #<data>
0000200C  B43C 0007               1779      CMP.B   #7,D2               *Mode for #<data> is 111
00002010  6600 0030               1780      BNE     xxxWord
00002014                          1781      
00002014  B63C 0004               1782      CMP.B   #4,D3               *Register for #<data> is 100
00002018  6600 0028               1783      BNE     xxxWord
0000201C                          1784                                 
0000201C  43F9 00002200           1785      LEA     outputPound,A1      *Outputs "#"
00002022  103C 000E               1786      MOVE.B  #14,D0
00002026  4E4F                    1787      TRAP    #15   
00002028                          1788      
00002028  BE3C 0001               1789      CMP.B   #1,D7
0000202C  6700 0008               1790      BEQ     immeDataLong
00002030                          1791      
00002030  361D                    1792      MOVE.W  (A5)+,D3
00002032                          1793      
00002032  6000 0004               1794      BRA     immediateDatapt2
00002036                          1795  
00002036                          1796  immeDataLong
00002036  261D                    1797      MOVE.L  (A5)+,D3    
00002038                          1798          
00002038                          1799  immediateDatapt2               *Outputs register value
00002038  2203                    1800      MOVE.L  D3,D1
0000203A  103C 0003               1801      MOVE.B  #3,D0
0000203E  4E4F                    1802      TRAP    #15
00002040                          1803  
00002040  4E75                    1804      RTS                         *~owo~
00002042                          1805      
00002042                          1806  xxxWord
00002042  B43C 0007               1807      CMP.B   #7,D2
00002046  6600 0024               1808      BNE     xxxLong
0000204A                          1809      
0000204A  B63C 0000               1810      CMP.B   #0,D3
0000204E  6600 001C               1811      BNE     xxxLong
00002052                          1812      
00002052  43F9 00002202           1813      LEA     outputAddr,A1
00002058  103C 000E               1814      MOVE.B  #14,D0
0000205C  4E4F                    1815      TRAP    #15
0000205E                          1816      
0000205E  321D                    1817      MOVE.W  (A5)+,D1
00002060  103C 000F               1818      MOVE.B  #15,D0
00002064  143C 0010               1819      MOVE.B  #16,D2
00002068  4E4F                    1820      TRAP    #15
0000206A                          1821      
0000206A  4E75                    1822      RTS
0000206C                          1823      
0000206C                          1824  xxxLong
0000206C  B43C 0007               1825      CMP.B   #7,D2
00002070  6600 00A2               1826      BNE     DONE
00002074                          1827      
00002074  B63C 0001               1828      CMP.B   #1,D3
00002078  6600 009A               1829      BNE     DONE
0000207C                          1830      
0000207C  43F9 00002202           1831      LEA     outputAddr,A1
00002082  103C 000E               1832      MOVE.B  #14,D0
00002086  4E4F                    1833      TRAP    #15
00002088                          1834      
00002088  221D                    1835      MOVE.L  (A5)+,D1
0000208A  103C 000F               1836      MOVE.B  #15,D0
0000208E  143C 0010               1837      MOVE.B  #16,D2
00002092  4E4F                    1838      TRAP    #15
00002094                          1839      
00002094  4E75                    1840      RTS
00002096                          1841      
00002096                          1842  
00002096                          1843  addDestinationEA                *Since ADD only has data register in dest area
00002096  3604                    1844      MOVE.W  D4,D3
00002098                          1845      
00002098  3403                    1846      MOVE.W  D3,D2
0000209A                          1847      
0000209A  720A                    1848      MOVE.L  #10,D1
0000209C  E37A                    1849      ROL.W   D1,D2
0000209E  C4BC 00000007           1850      AND.L   #$00000007,D2       *D2 has mode
000020A4                          1851      
000020A4                          1852      
000020A4  EF5B                    1853      ROL.W   #7,D3
000020A6  C6BC 00000007           1854      AND.L   #$00000007,D3       *D3 has register
000020AC                          1855      
000020AC                          1856  DnRegister                      *For ADD only, since it only has Dn 
000020AC  43F9 000021FE           1857      LEA     outputDn,A1         *outputs "D"
000020B2  103C 000E               1858      MOVE.B  #14,D0
000020B6  4E4F                    1859      TRAP    #15
000020B8                          1860      
000020B8  1203                    1861      MOVE.B  D3,D1               *Outputs register value
000020BA  103C 0003               1862      MOVE.B  #3,D0
000020BE  4E4F                    1863      TRAP    #15
000020C0                          1864      
000020C0  4E75                    1865      RTS
000020C2                          1866  
000020C2                          1867  moveDestinationEA               *Destination output for MOVE
000020C2  3604                    1868      MOVE.W  D4,D3
000020C4  3403                    1869      MOVE.W  D3,D2
000020C6                          1870      
000020C6  EF5B                    1871      ROL.W   #7,D3
000020C8  C6BC 00000007           1872      AND.L   #$00000007,D3       *D3 has Register
000020CE                          1873      
000020CE  323C 000A               1874      MOVE.W  #10,D1      
000020D2  E37A                    1875      ROL.W   D1,D2               *D2 has Mode
000020D4  C4BC 00000007           1876      AND.L   #$00000007,D2
000020DA                          1877      
000020DA  6000 FE68               1878      BRA     DnMode              *output what it is, bra
000020DE                          1879      
000020DE                          1880  addaDestEA                      *Sets up the dest mode to be proper
000020DE  3604                    1881      MOVE.W  D4,D3               *Get the original code again
000020E0  3403                    1882      MOVE.W  D3,D2
000020E2                          1883      
000020E2  EF5B                    1884      ROL.W   #7,D3               
000020E4  C6BC 00000007           1885      AND.L   #$00000007,D3       *D3 has register
000020EA                          1886      
000020EA  323C 000A               1887      MOVE.W  #10,D1
000020EE  E37A                    1888      ROL.W   D1,D2               *Have to AND it by 1, since the mode for ADDA
000020F0  C4BC 00000001           1889      AND.L   #$00000001,D2       *is always an Address
000020F6                          1890      
000020F6  6000 FE4C               1891      BRA     DnMode
000020FA                          1892      
000020FA                          1893  pageContinue
000020FA  43F9 00002248           1894      LEA     outputContinue,A1
00002100  103C 000E               1895      MOVE.B  #14,D0
00002104  4E4F                    1896      TRAP    #15
00002106  103C 0005               1897      MOVE.B  #5,D0
0000210A  4E4F                    1898      TRAP    #15
0000210C  16BC 001E               1899      MOVE.B  #line_count,(A3)
00002110  4EF8 115C               1900      JMP     getOpCode
00002114                          1901      
00002114                          1902  DONE
00002114  BCCD                    1903      CMP.W   A5,A6
00002116  6D00 0012               1904      BLT     END   
0000211A  43F9 00002210           1905      LEA     outputNextLine,A1
00002120  103C 000E               1906      MOVE.B  #14,D0
00002124  4E4F                    1907      TRAP    #15 
00002126  4EF8 115C               1908      JMP     getOpCode
0000212A                          1909      
0000212A                          1910  END
0000212A  43F9 00002210           1911      LEA     outputNextLine,A1
00002130  103C 000E               1912      MOVE.B  #14,D0
00002134  4E4F                    1913      TRAP    #15
00002136                          1914  
00002136  43F9 00002233           1915      LEA     outputEnd,A1
0000213C  103C 000E               1916      MOVE.B  #14,D0
00002140  4E4F                    1917      TRAP    #15
00002142  FFFF FFFF               1918      SIMHALT             ; halt simulator
00002146                          1919  
00002146                          1920  * Put variables and constants here
00002146                          1921  
00002146= 43D2                    1922  code        DC.W    $43D2
00002148                          1923  
00002148                          1924  
00002148= D640                    1925  addCode     DC.W    $D640
0000214A                          1926  
0000214A= 303C                    1927  moveCode1   DC.W    $303C
0000214C= 0011                    1928  moveCode2   DC.W    $0011
0000214E                          1929  
0000214E= 41 44 44 00             1930  outputADD   DC.B    'ADD',0
00002152= 41 00                   1931  outputADDA  DC.B    'A',0
00002154= 53 55 42 00             1932  outputSUB   DC.B    'SUB',0
00002158= 53 55 42 51 00          1933  outputSUBQ  DC.B    'SUBQ',0
0000215D= 4D 4F 56 45 00          1934  outputMOVE  DC.B    'MOVE',0
00002162= 4D 4F 56 45 41 00       1935  outputMOVEA DC.B    'MOVEA',0
00002168= 4D 4F 56 45 4D 2E ...   1936  outputMOVEMW DC.B   'MOVEM.W ',0
00002171= 4D 4F 56 45 4D 2E ...   1937  outputMOVEML DC.B   'MOVEM.L ',0
0000217A= 4D 55 4C 53 20 00       1938  outputMULS  DC.B    'MULS ',0
00002180= 44 49 56 53 2E 57 ...   1939  outputDIVSW DC.B    'DIVS.W ',0
00002188= 4E 4F 50 20 00          1940  outputNOP   DC.B    'NOP ',0
0000218D= 4A 53 52 20 00          1941  outputJSR   DC.B    'JSR ',0
00002192= 52 54 53 20 00          1942  outputRTS   DC.B    'RTS ',0
00002197= 4C 45 41 20 00          1943  outputLEA   DC.B    'LEA ',0
0000219C= 44 41 54 41 20 00       1944  outputData  DC.B    'DATA ',0
000021A2= 4E 45 47 00             1945  outputNEG   DC.B    'NEG',0
000021A6= 42 52 41 20 00          1946  outputBRA   DC.B    'BRA ',0
000021AB= 4F 52 49 00             1947  outputORI   DC.B    'ORI',0
000021AF= 4F 52 00                1948  outputOR    DC.B    'OR',0
000021B2= 45 4F 52 00             1949  outputEOR   DC.B    'EOR',0
000021B6= 43 4D 50 49 00          1950  outputCMPI  DC.B    'CMPI',0
000021BB= 43 4D 50 00             1951  outputCMP   DC.B    'CMP',0
000021BF= 42 43 4C 52 20 00       1952  outputBCLR  DC.B    'BCLR ',0
000021C5= 4C 53 00                1953  outputLS    DC.B    'LS',0
000021C8= 41 53 00                1954  outputAS    DC.B    'AS',0
000021CB= 52 4F 00                1955  outputRO    DC.B    'RO',0
000021CE= 4C 00                   1956  outputLeft  DC.B    'L',0
000021D0= 52 00                   1957  outputRight DC.B    'R',0
000021D2                          1958  *outputRegList DC.B  'A0-A7/D0-D7',0
000021D2                          1959  
000021D2                          1960  
000021D2= 42 43 53 20 00          1961  outputBCS   DC.B    'BCS ',0
000021D7= 42 47 45 20 00          1962  outputBGE   DC.B    'BGE ',0
000021DC= 42 43 54 20 00          1963  outputBCT   DC.B    'BCT ',0
000021E1= 42 56 43 20 00          1964  outputBVC   DC.B    'BVC ',0
000021E6                          1965  
000021E6= 2E 42 20 00             1966  outputByte  DC.B    '.B ',0
000021EA= 2E 57 20 00             1967  outputWord  DC.B    '.W ',0
000021EE= 2E 4C 20 00             1968  outputLong  DC.B    '.L ',0
000021F2                          1969  
000021F2= 28 41 00                1970  outputdeRefAn1   DC.B    '(A',0
000021F5= 29 00                   1971  outputdeRefAn2   DC.B    ')',0
000021F7= 29 2B 00                1972  outputPostIncrementAn   DC.B    ')+',0
000021FA= 2D 00                   1973  outputPreDecrementAn    DC.B    '-',0
000021FC                          1974  
000021FC= 41 00                   1975  outputAn    DC.B    'A',0
000021FE= 44 00                   1976  outputDn    DC.B    'D',0
00002200= 23 00                   1977  outputPound DC.B    '#',0
00002202= 20 20 20 24 00          1978  outputAddr  DC.B    '   $',0
00002208= 0000                    1979  outputCurrentAddr   DC.W    $0000
0000220A= 2F 00                   1980  outputSlash DC.B    '/',0
0000220C                          1981  
0000220C= 2C 00                   1982  outputComma     DC.B    ',',0
0000220E= 2E 00                   1983  outputDot       DC.B    '.',0
00002210= 20 0D 0A 00             1984  outputNextLine  DC.B    ' ',CR,LF,0
00002214= 20 00                   1985  outputSpace     DC.B    ' ',0
00002216= 3A 20 00                1986  outputColon     DC.B    ': ',0
00002219= 2D 00                   1987  outputNegSign   DC.B    '-',0
0000221B= 44 69 73 61 73 73 ...   1988  outputStart     DC.B    'Disassembling Initiated',0
00002233= 50 72 6F 67 72 61 ...   1989  outputEnd       DC.B    'Program Disassembled',0
00002248= 50 72 65 73 73 20 ...   1990  outputContinue  DC.B    'Press ENTER key to continue disassembling',CR,LF,0
00002274                          1991      END    $1000        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADDADESTEA          20DE
ADDALOPMODE         1ED6
ADDAORDER           1E66
ADDAWOPMODE         1EB8
ADDBIT              152A
ADDCODE             2148
ADDDESTINATIONEA    2096
ADDMETHOD           17A8
ADDOPCODE           17A0
ADDR_VAL_TEMP       1150
ALTOPMODE           1E9C
ALTORDER            1E4A
ANMODE              1F64
ASCII_MASK          FF
ASDOPCODE           1ABC
BCCDISPLACEMENT     1C7A
BCCMETHOD           1DC8
BCCOPCODE           1DC0
BCLRIMMEDIATE       1682
BCLROPCODE          163A
BCS                 1DEC
BCT                 1E0C
BGE                 1DFC
BITDISPLACEMENT16   1CCE
BITDISPLACEMENT32   1D44
BRAMETHOD           1C6E
BRAOPCODE           1C62
BVC                 1E1C
BYTEOPMODE          1EF6
CHECKSEVEN          13B2
CHECKSEVENAN        1462
CMPIMETHOD          1608
CMPIOPCODE          1600
CMPOPCODE           198C
CODE                2146
COUNTER             0
CR                  D
DATAOPCODE          1E2C
DEREFANMODE         1F82
DISPLAY8FORSUBQ     189A
DISPLAYMOVEMLONG    132E
DISPLAYMOVEMWORD    131E
DISPLAYSLASH        1492
DIVSWCHECK          1906
DIVSWOPCODE         1906
DNMODE              1F44
DNREGISTER          20AC
DONE                2114
DOTOPMODE           1E82
END                 212A
END_ADDR_MSG        111F
END_VAL             1158
EORMETHOD           1956
EOROPCODE           1944
GETANMODE           1314
GETOPCODE           115C
GET_ADDR            108C
HAMSTERS            13B6
HAMSTERSAN          146A
IGNORESLASH         14A6
IGNORESLASHAN       14E0
IMMEDATALONG        2036
IMMEDIATEDATA       200C
IMMEDIATEDATAPT2    2038
JSRMETHOD           11DE
JSROPCODE           11CE
JSROUTPUTDEREF      11FA
JSROUTPUTLABEL      1210
LEAOPCODE           154A
LEAOUTPUT           158A
LEFTRIGHT           1B34
LF                  A
LINE_COUNT          1E
LONGOPMODE          1F22
LOOP                10A8
LSDMETHOD           1A88
LSDOPCODE           1A80
MASK                F
MEEPMEEP            1420
MEMORYASD           1A16
MEMORYLSD           19E6
MEMORYROD           1A46
MEMTOREG            14F0
MEOWMEOW            1398
MIRRORSHIFT         1516
MOVEALONGMETHOD     1766
MOVEAWORDMETHOD     1706
MOVEBYTEMETHOD      16AA
MOVEBYTEOPCODE      16A2
MOVECODE1           214A
MOVECODE2           214C
MOVEDESTINATIONEA   20C2
MOVELONGMETHODPT2   1776
MOVELONGOPCODE      173E
MOVELONGOPCODEMETHOD  1746
MOVEMCONTINUE       1534
MOVEMLONGMEMTOREG   1252
MOVEMLONGREGTOMEM   124A
MOVEMMETHODMEMTOREG  1282
MOVEMMETHODREGTOMEM  125A
MOVEMOPCODE         1222
MOVEMOUTPUT         12AA
MOVEMOUTPUTMEMTOREG  12E4
MOVEMWEA            1316
MOVEWORDMETHOD      16E6
MOVEWORDMETHODPT2   1716
MOVEWORDOPCODE      16DE
MULSLMETHOD         1C2A
MULSOUTPUT          1C02
MULSWMETHOD         1BF2
MULSWOPCODE         1BDA
NEGBIT16            1D0A
NEGBIT32            1D84
NEGMETHOD           1C36
NEGOPCODE           1C2A
NOPOPCODE           119E
ORIMETHOD           15C6
ORIOPCODE           15B2
ORMETHOD            18D0
OROPCODE            18B4
OUTPUTADD           214E
OUTPUTADDA          2152
OUTPUTADDR          2202
OUTPUTAN            21FC
OUTPUTAS            21C8
OUTPUTBCLR          21BF
OUTPUTBCS           21D2
OUTPUTBCT           21DC
OUTPUTBGE           21D7
OUTPUTBRA           21A6
OUTPUTBVC           21E1
OUTPUTBYTE          21E6
OUTPUTCMP           21BB
OUTPUTCMPI          21B6
OUTPUTCOLON         2216
OUTPUTCOMMA         220C
OUTPUTCONTINUE      2248
OUTPUTCURRENTADDR   2208
OUTPUTDATA          219C
OUTPUTDEREFAN1      21F2
OUTPUTDEREFAN2      21F5
OUTPUTDIVSW         2180
OUTPUTDN            21FE
OUTPUTDOT           220E
OUTPUTEND           2233
OUTPUTEOR           21B2
OUTPUTJSR           218D
OUTPUTLEA           2197
OUTPUTLEFT          21CE
OUTPUTLONG          21EE
OUTPUTLS            21C5
OUTPUTMOVE          215D
OUTPUTMOVEA         2162
OUTPUTMOVEML        2171
OUTPUTMOVEMW        2168
OUTPUTMULS          217A
OUTPUTNEG           21A2
OUTPUTNEGSIGN       2219
OUTPUTNEXTLINE      2210
OUTPUTNOP           2188
OUTPUTOR            21AF
OUTPUTORI           21AB
OUTPUTPART2         13EA
OUTPUTPART2AN       14AA
OUTPUTPOSTINCREMENTAN  21F7
OUTPUTPOUND         2200
OUTPUTPREDECREMENTAN  21FA
OUTPUTRIGHT         21D0
OUTPUTRO            21CB
OUTPUTRTS           2192
OUTPUTSLASH         220A
OUTPUTSPACE         2214
OUTPUTSTART         221B
OUTPUTSUB           2154
OUTPUTSUBQ          2158
OUTPUTWORD          21EA
PAGECONTINUE        20FA
POSTINCREMENTANMODE  1FAC
PREDECREMENTANMODE  1FD6
REGBITSET           13AA
REGBITSETAN         145A
REGISTERCHECKAN     142A
REGISTERCHECKERDN   137A
REGISTERDONE        14E8
REGISTEROUTPUT      13BE
REGISTEROUTPUTAN    1476
REGISTERRANGEAN     1448
REGTOMEM            133A
RET_SA              10F2
RIGHTRIGHT          1B54
RODOPCODE           1AF8
RTSOPCODE           11B6
RTS_STRTADDR        10C6
SHIFTDESTEA         1BBC
SHIFTIMMEDIATEEA    1B94
SHIFTIMMEDIATEEIGHT  1BB2
SHIFTMEMORYSHIFT    19CA
SHIFTREGISTERSHIFT  1A76
SHIFTSOPCODE        19C2
SHIFTSOURCEEA       1B62
SOURCEEA            1F32
STACK               B000
START_ADDR_MSG      10F4
STRIP_ASCII         10CE
ST_VAL              1154
SUB30               10EE
SUB37               10E6
SUBMETHOD           17EE
SUBOPCODE           17E6
SUBQDATA            1868
SUBQMETHOD          182C
SUBQOPCODE          1824
WORDOPMODE          1F0C
XXXLONG             206C
XXXWORD             2042
ZEROBIT             1530
